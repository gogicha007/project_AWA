
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model Unit
 * 
 */
export type Unit = $Result.DefaultSelection<Prisma.$UnitPayload>
/**
 * Model Currency
 * 
 */
export type Currency = $Result.DefaultSelection<Prisma.$CurrencyPayload>
/**
 * Model MaterialGroup
 * 
 */
export type MaterialGroup = $Result.DefaultSelection<Prisma.$MaterialGroupPayload>
/**
 * Model MaterialType
 * 
 */
export type MaterialType = $Result.DefaultSelection<Prisma.$MaterialTypePayload>
/**
 * Model MaterialName
 * 
 */
export type MaterialName = $Result.DefaultSelection<Prisma.$MaterialNamePayload>
/**
 * Model Shipment
 * 
 */
export type Shipment = $Result.DefaultSelection<Prisma.$ShipmentPayload>
/**
 * Model ShipmentFile
 * 
 */
export type ShipmentFile = $Result.DefaultSelection<Prisma.$ShipmentFilePayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model InvoiceItem
 * 
 */
export type InvoiceItem = $Result.DefaultSelection<Prisma.$InvoiceItemPayload>
/**
 * Model Freight
 * 
 */
export type Freight = $Result.DefaultSelection<Prisma.$FreightPayload>
/**
 * Model FreightInvoice
 * 
 */
export type FreightInvoice = $Result.DefaultSelection<Prisma.$FreightInvoicePayload>
/**
 * Model Village
 * 
 */
export type Village = $Result.DefaultSelection<Prisma.$VillagePayload>
/**
 * Model MaterialNeed
 * 
 */
export type MaterialNeed = $Result.DefaultSelection<Prisma.$MaterialNeedPayload>
/**
 * Model PipelineProgress
 * 
 */
export type PipelineProgress = $Result.DefaultSelection<Prisma.$PipelineProgressPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ShipmentStatus: {
  APPLIED: 'APPLIED',
  DECLARED: 'DECLARED',
  ARRIVED: 'ARRIVED'
};

export type ShipmentStatus = (typeof ShipmentStatus)[keyof typeof ShipmentStatus]

}

export type ShipmentStatus = $Enums.ShipmentStatus

export const ShipmentStatus: typeof $Enums.ShipmentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unit`: Exposes CRUD operations for the **Unit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Units
    * const units = await prisma.unit.findMany()
    * ```
    */
  get unit(): Prisma.UnitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.currency`: Exposes CRUD operations for the **Currency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Currencies
    * const currencies = await prisma.currency.findMany()
    * ```
    */
  get currency(): Prisma.CurrencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.materialGroup`: Exposes CRUD operations for the **MaterialGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaterialGroups
    * const materialGroups = await prisma.materialGroup.findMany()
    * ```
    */
  get materialGroup(): Prisma.MaterialGroupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.materialType`: Exposes CRUD operations for the **MaterialType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaterialTypes
    * const materialTypes = await prisma.materialType.findMany()
    * ```
    */
  get materialType(): Prisma.MaterialTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.materialName`: Exposes CRUD operations for the **MaterialName** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaterialNames
    * const materialNames = await prisma.materialName.findMany()
    * ```
    */
  get materialName(): Prisma.MaterialNameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shipment`: Exposes CRUD operations for the **Shipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shipments
    * const shipments = await prisma.shipment.findMany()
    * ```
    */
  get shipment(): Prisma.ShipmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shipmentFile`: Exposes CRUD operations for the **ShipmentFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShipmentFiles
    * const shipmentFiles = await prisma.shipmentFile.findMany()
    * ```
    */
  get shipmentFile(): Prisma.ShipmentFileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoiceItem`: Exposes CRUD operations for the **InvoiceItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceItems
    * const invoiceItems = await prisma.invoiceItem.findMany()
    * ```
    */
  get invoiceItem(): Prisma.InvoiceItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.freight`: Exposes CRUD operations for the **Freight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Freights
    * const freights = await prisma.freight.findMany()
    * ```
    */
  get freight(): Prisma.FreightDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.freightInvoice`: Exposes CRUD operations for the **FreightInvoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FreightInvoices
    * const freightInvoices = await prisma.freightInvoice.findMany()
    * ```
    */
  get freightInvoice(): Prisma.FreightInvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.village`: Exposes CRUD operations for the **Village** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Villages
    * const villages = await prisma.village.findMany()
    * ```
    */
  get village(): Prisma.VillageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.materialNeed`: Exposes CRUD operations for the **MaterialNeed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaterialNeeds
    * const materialNeeds = await prisma.materialNeed.findMany()
    * ```
    */
  get materialNeed(): Prisma.MaterialNeedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pipelineProgress`: Exposes CRUD operations for the **PipelineProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PipelineProgresses
    * const pipelineProgresses = await prisma.pipelineProgress.findMany()
    * ```
    */
  get pipelineProgress(): Prisma.PipelineProgressDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Vendor: 'Vendor',
    Unit: 'Unit',
    Currency: 'Currency',
    MaterialGroup: 'MaterialGroup',
    MaterialType: 'MaterialType',
    MaterialName: 'MaterialName',
    Shipment: 'Shipment',
    ShipmentFile: 'ShipmentFile',
    Invoice: 'Invoice',
    InvoiceItem: 'InvoiceItem',
    Freight: 'Freight',
    FreightInvoice: 'FreightInvoice',
    Village: 'Village',
    MaterialNeed: 'MaterialNeed',
    PipelineProgress: 'PipelineProgress'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "vendor" | "unit" | "currency" | "materialGroup" | "materialType" | "materialName" | "shipment" | "shipmentFile" | "invoice" | "invoiceItem" | "freight" | "freightInvoice" | "village" | "materialNeed" | "pipelineProgress"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      Unit: {
        payload: Prisma.$UnitPayload<ExtArgs>
        fields: Prisma.UnitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findFirst: {
            args: Prisma.UnitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findMany: {
            args: Prisma.UnitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          create: {
            args: Prisma.UnitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          createMany: {
            args: Prisma.UnitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UnitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          delete: {
            args: Prisma.UnitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          update: {
            args: Prisma.UnitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          deleteMany: {
            args: Prisma.UnitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UnitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          upsert: {
            args: Prisma.UnitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          aggregate: {
            args: Prisma.UnitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnit>
          }
          groupBy: {
            args: Prisma.UnitGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnitGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnitCountArgs<ExtArgs>
            result: $Utils.Optional<UnitCountAggregateOutputType> | number
          }
        }
      }
      Currency: {
        payload: Prisma.$CurrencyPayload<ExtArgs>
        fields: Prisma.CurrencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurrencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurrencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findFirst: {
            args: Prisma.CurrencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurrencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findMany: {
            args: Prisma.CurrencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          create: {
            args: Prisma.CurrencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          createMany: {
            args: Prisma.CurrencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurrencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          delete: {
            args: Prisma.CurrencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          update: {
            args: Prisma.CurrencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          deleteMany: {
            args: Prisma.CurrencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurrencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CurrencyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          upsert: {
            args: Prisma.CurrencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          aggregate: {
            args: Prisma.CurrencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurrency>
          }
          groupBy: {
            args: Prisma.CurrencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurrencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurrencyCountArgs<ExtArgs>
            result: $Utils.Optional<CurrencyCountAggregateOutputType> | number
          }
        }
      }
      MaterialGroup: {
        payload: Prisma.$MaterialGroupPayload<ExtArgs>
        fields: Prisma.MaterialGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialGroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialGroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>
          }
          findFirst: {
            args: Prisma.MaterialGroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialGroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>
          }
          findMany: {
            args: Prisma.MaterialGroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>[]
          }
          create: {
            args: Prisma.MaterialGroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>
          }
          createMany: {
            args: Prisma.MaterialGroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaterialGroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>[]
          }
          delete: {
            args: Prisma.MaterialGroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>
          }
          update: {
            args: Prisma.MaterialGroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>
          }
          deleteMany: {
            args: Prisma.MaterialGroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialGroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaterialGroupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>[]
          }
          upsert: {
            args: Prisma.MaterialGroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialGroupPayload>
          }
          aggregate: {
            args: Prisma.MaterialGroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterialGroup>
          }
          groupBy: {
            args: Prisma.MaterialGroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialGroupCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialGroupCountAggregateOutputType> | number
          }
        }
      }
      MaterialType: {
        payload: Prisma.$MaterialTypePayload<ExtArgs>
        fields: Prisma.MaterialTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>
          }
          findFirst: {
            args: Prisma.MaterialTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>
          }
          findMany: {
            args: Prisma.MaterialTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>[]
          }
          create: {
            args: Prisma.MaterialTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>
          }
          createMany: {
            args: Prisma.MaterialTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaterialTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>[]
          }
          delete: {
            args: Prisma.MaterialTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>
          }
          update: {
            args: Prisma.MaterialTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>
          }
          deleteMany: {
            args: Prisma.MaterialTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaterialTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>[]
          }
          upsert: {
            args: Prisma.MaterialTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialTypePayload>
          }
          aggregate: {
            args: Prisma.MaterialTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterialType>
          }
          groupBy: {
            args: Prisma.MaterialTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialTypeCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialTypeCountAggregateOutputType> | number
          }
        }
      }
      MaterialName: {
        payload: Prisma.$MaterialNamePayload<ExtArgs>
        fields: Prisma.MaterialNameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialNameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialNameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>
          }
          findFirst: {
            args: Prisma.MaterialNameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialNameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>
          }
          findMany: {
            args: Prisma.MaterialNameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>[]
          }
          create: {
            args: Prisma.MaterialNameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>
          }
          createMany: {
            args: Prisma.MaterialNameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaterialNameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>[]
          }
          delete: {
            args: Prisma.MaterialNameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>
          }
          update: {
            args: Prisma.MaterialNameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>
          }
          deleteMany: {
            args: Prisma.MaterialNameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialNameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaterialNameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>[]
          }
          upsert: {
            args: Prisma.MaterialNameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNamePayload>
          }
          aggregate: {
            args: Prisma.MaterialNameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterialName>
          }
          groupBy: {
            args: Prisma.MaterialNameGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialNameGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialNameCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialNameCountAggregateOutputType> | number
          }
        }
      }
      Shipment: {
        payload: Prisma.$ShipmentPayload<ExtArgs>
        fields: Prisma.ShipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShipmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShipmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          findFirst: {
            args: Prisma.ShipmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShipmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          findMany: {
            args: Prisma.ShipmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>[]
          }
          create: {
            args: Prisma.ShipmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          createMany: {
            args: Prisma.ShipmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShipmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>[]
          }
          delete: {
            args: Prisma.ShipmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          update: {
            args: Prisma.ShipmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          deleteMany: {
            args: Prisma.ShipmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShipmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShipmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>[]
          }
          upsert: {
            args: Prisma.ShipmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentPayload>
          }
          aggregate: {
            args: Prisma.ShipmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShipment>
          }
          groupBy: {
            args: Prisma.ShipmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShipmentCountArgs<ExtArgs>
            result: $Utils.Optional<ShipmentCountAggregateOutputType> | number
          }
        }
      }
      ShipmentFile: {
        payload: Prisma.$ShipmentFilePayload<ExtArgs>
        fields: Prisma.ShipmentFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShipmentFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShipmentFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>
          }
          findFirst: {
            args: Prisma.ShipmentFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShipmentFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>
          }
          findMany: {
            args: Prisma.ShipmentFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>[]
          }
          create: {
            args: Prisma.ShipmentFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>
          }
          createMany: {
            args: Prisma.ShipmentFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShipmentFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>[]
          }
          delete: {
            args: Prisma.ShipmentFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>
          }
          update: {
            args: Prisma.ShipmentFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>
          }
          deleteMany: {
            args: Prisma.ShipmentFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShipmentFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShipmentFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>[]
          }
          upsert: {
            args: Prisma.ShipmentFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipmentFilePayload>
          }
          aggregate: {
            args: Prisma.ShipmentFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShipmentFile>
          }
          groupBy: {
            args: Prisma.ShipmentFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShipmentFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShipmentFileCountArgs<ExtArgs>
            result: $Utils.Optional<ShipmentFileCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      InvoiceItem: {
        payload: Prisma.$InvoiceItemPayload<ExtArgs>
        fields: Prisma.InvoiceItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findFirst: {
            args: Prisma.InvoiceItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findMany: {
            args: Prisma.InvoiceItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          create: {
            args: Prisma.InvoiceItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          createMany: {
            args: Prisma.InvoiceItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          delete: {
            args: Prisma.InvoiceItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          update: {
            args: Prisma.InvoiceItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          deleteMany: {
            args: Prisma.InvoiceItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          upsert: {
            args: Prisma.InvoiceItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          aggregate: {
            args: Prisma.InvoiceItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoiceItem>
          }
          groupBy: {
            args: Prisma.InvoiceItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceItemCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemCountAggregateOutputType> | number
          }
        }
      }
      Freight: {
        payload: Prisma.$FreightPayload<ExtArgs>
        fields: Prisma.FreightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FreightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FreightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>
          }
          findFirst: {
            args: Prisma.FreightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FreightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>
          }
          findMany: {
            args: Prisma.FreightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>[]
          }
          create: {
            args: Prisma.FreightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>
          }
          createMany: {
            args: Prisma.FreightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FreightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>[]
          }
          delete: {
            args: Prisma.FreightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>
          }
          update: {
            args: Prisma.FreightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>
          }
          deleteMany: {
            args: Prisma.FreightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FreightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FreightUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>[]
          }
          upsert: {
            args: Prisma.FreightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightPayload>
          }
          aggregate: {
            args: Prisma.FreightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFreight>
          }
          groupBy: {
            args: Prisma.FreightGroupByArgs<ExtArgs>
            result: $Utils.Optional<FreightGroupByOutputType>[]
          }
          count: {
            args: Prisma.FreightCountArgs<ExtArgs>
            result: $Utils.Optional<FreightCountAggregateOutputType> | number
          }
        }
      }
      FreightInvoice: {
        payload: Prisma.$FreightInvoicePayload<ExtArgs>
        fields: Prisma.FreightInvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FreightInvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FreightInvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>
          }
          findFirst: {
            args: Prisma.FreightInvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FreightInvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>
          }
          findMany: {
            args: Prisma.FreightInvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>[]
          }
          create: {
            args: Prisma.FreightInvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>
          }
          createMany: {
            args: Prisma.FreightInvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FreightInvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>[]
          }
          delete: {
            args: Prisma.FreightInvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>
          }
          update: {
            args: Prisma.FreightInvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>
          }
          deleteMany: {
            args: Prisma.FreightInvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FreightInvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FreightInvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>[]
          }
          upsert: {
            args: Prisma.FreightInvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FreightInvoicePayload>
          }
          aggregate: {
            args: Prisma.FreightInvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFreightInvoice>
          }
          groupBy: {
            args: Prisma.FreightInvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<FreightInvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.FreightInvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<FreightInvoiceCountAggregateOutputType> | number
          }
        }
      }
      Village: {
        payload: Prisma.$VillagePayload<ExtArgs>
        fields: Prisma.VillageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VillageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VillageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>
          }
          findFirst: {
            args: Prisma.VillageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VillageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>
          }
          findMany: {
            args: Prisma.VillageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>[]
          }
          create: {
            args: Prisma.VillageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>
          }
          createMany: {
            args: Prisma.VillageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VillageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>[]
          }
          delete: {
            args: Prisma.VillageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>
          }
          update: {
            args: Prisma.VillageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>
          }
          deleteMany: {
            args: Prisma.VillageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VillageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VillageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>[]
          }
          upsert: {
            args: Prisma.VillageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VillagePayload>
          }
          aggregate: {
            args: Prisma.VillageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVillage>
          }
          groupBy: {
            args: Prisma.VillageGroupByArgs<ExtArgs>
            result: $Utils.Optional<VillageGroupByOutputType>[]
          }
          count: {
            args: Prisma.VillageCountArgs<ExtArgs>
            result: $Utils.Optional<VillageCountAggregateOutputType> | number
          }
        }
      }
      MaterialNeed: {
        payload: Prisma.$MaterialNeedPayload<ExtArgs>
        fields: Prisma.MaterialNeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialNeedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialNeedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>
          }
          findFirst: {
            args: Prisma.MaterialNeedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialNeedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>
          }
          findMany: {
            args: Prisma.MaterialNeedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>[]
          }
          create: {
            args: Prisma.MaterialNeedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>
          }
          createMany: {
            args: Prisma.MaterialNeedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaterialNeedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>[]
          }
          delete: {
            args: Prisma.MaterialNeedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>
          }
          update: {
            args: Prisma.MaterialNeedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>
          }
          deleteMany: {
            args: Prisma.MaterialNeedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialNeedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaterialNeedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>[]
          }
          upsert: {
            args: Prisma.MaterialNeedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialNeedPayload>
          }
          aggregate: {
            args: Prisma.MaterialNeedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterialNeed>
          }
          groupBy: {
            args: Prisma.MaterialNeedGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialNeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialNeedCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialNeedCountAggregateOutputType> | number
          }
        }
      }
      PipelineProgress: {
        payload: Prisma.$PipelineProgressPayload<ExtArgs>
        fields: Prisma.PipelineProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PipelineProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PipelineProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>
          }
          findFirst: {
            args: Prisma.PipelineProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PipelineProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>
          }
          findMany: {
            args: Prisma.PipelineProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>[]
          }
          create: {
            args: Prisma.PipelineProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>
          }
          createMany: {
            args: Prisma.PipelineProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PipelineProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>[]
          }
          delete: {
            args: Prisma.PipelineProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>
          }
          update: {
            args: Prisma.PipelineProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>
          }
          deleteMany: {
            args: Prisma.PipelineProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PipelineProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PipelineProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>[]
          }
          upsert: {
            args: Prisma.PipelineProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineProgressPayload>
          }
          aggregate: {
            args: Prisma.PipelineProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePipelineProgress>
          }
          groupBy: {
            args: Prisma.PipelineProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<PipelineProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.PipelineProgressCountArgs<ExtArgs>
            result: $Utils.Optional<PipelineProgressCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    vendor?: VendorOmit
    unit?: UnitOmit
    currency?: CurrencyOmit
    materialGroup?: MaterialGroupOmit
    materialType?: MaterialTypeOmit
    materialName?: MaterialNameOmit
    shipment?: ShipmentOmit
    shipmentFile?: ShipmentFileOmit
    invoice?: InvoiceOmit
    invoiceItem?: InvoiceItemOmit
    freight?: FreightOmit
    freightInvoice?: FreightInvoiceOmit
    village?: VillageOmit
    materialNeed?: MaterialNeedOmit
    pipelineProgress?: PipelineProgressOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Vendor: number
    Invoice: number
    Shipment: number
    Freight: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vendor?: boolean | UserCountOutputTypeCountVendorArgs
    Invoice?: boolean | UserCountOutputTypeCountInvoiceArgs
    Shipment?: boolean | UserCountOutputTypeCountShipmentArgs
    Freight?: boolean | UserCountOutputTypeCountFreightArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFreightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreightWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    Invoice: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Invoice?: boolean | VendorCountOutputTypeCountInvoiceArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Count Type UnitCountOutputType
   */

  export type UnitCountOutputType = {
    InvoiceItem: number
    PipelineProgress: number
  }

  export type UnitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InvoiceItem?: boolean | UnitCountOutputTypeCountInvoiceItemArgs
    PipelineProgress?: boolean | UnitCountOutputTypeCountPipelineProgressArgs
  }

  // Custom InputTypes
  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitCountOutputType
     */
    select?: UnitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountInvoiceItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountPipelineProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineProgressWhereInput
  }


  /**
   * Count Type CurrencyCountOutputType
   */

  export type CurrencyCountOutputType = {
    Invoice: number
    Freight: number
  }

  export type CurrencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Invoice?: boolean | CurrencyCountOutputTypeCountInvoiceArgs
    Freight?: boolean | CurrencyCountOutputTypeCountFreightArgs
  }

  // Custom InputTypes
  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyCountOutputType
     */
    select?: CurrencyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountFreightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreightWhereInput
  }


  /**
   * Count Type MaterialGroupCountOutputType
   */

  export type MaterialGroupCountOutputType = {
    MaterialType: number
  }

  export type MaterialGroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MaterialType?: boolean | MaterialGroupCountOutputTypeCountMaterialTypeArgs
  }

  // Custom InputTypes
  /**
   * MaterialGroupCountOutputType without action
   */
  export type MaterialGroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroupCountOutputType
     */
    select?: MaterialGroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaterialGroupCountOutputType without action
   */
  export type MaterialGroupCountOutputTypeCountMaterialTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialTypeWhereInput
  }


  /**
   * Count Type MaterialTypeCountOutputType
   */

  export type MaterialTypeCountOutputType = {
    MaterialName: number
  }

  export type MaterialTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MaterialName?: boolean | MaterialTypeCountOutputTypeCountMaterialNameArgs
  }

  // Custom InputTypes
  /**
   * MaterialTypeCountOutputType without action
   */
  export type MaterialTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialTypeCountOutputType
     */
    select?: MaterialTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaterialTypeCountOutputType without action
   */
  export type MaterialTypeCountOutputTypeCountMaterialNameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialNameWhereInput
  }


  /**
   * Count Type MaterialNameCountOutputType
   */

  export type MaterialNameCountOutputType = {
    InvoiceItem: number
    MaterialNeed: number
    PipelineProgress: number
  }

  export type MaterialNameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InvoiceItem?: boolean | MaterialNameCountOutputTypeCountInvoiceItemArgs
    MaterialNeed?: boolean | MaterialNameCountOutputTypeCountMaterialNeedArgs
    PipelineProgress?: boolean | MaterialNameCountOutputTypeCountPipelineProgressArgs
  }

  // Custom InputTypes
  /**
   * MaterialNameCountOutputType without action
   */
  export type MaterialNameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNameCountOutputType
     */
    select?: MaterialNameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaterialNameCountOutputType without action
   */
  export type MaterialNameCountOutputTypeCountInvoiceItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
  }

  /**
   * MaterialNameCountOutputType without action
   */
  export type MaterialNameCountOutputTypeCountMaterialNeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialNeedWhereInput
  }

  /**
   * MaterialNameCountOutputType without action
   */
  export type MaterialNameCountOutputTypeCountPipelineProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineProgressWhereInput
  }


  /**
   * Count Type ShipmentCountOutputType
   */

  export type ShipmentCountOutputType = {
    Files: number
    Freights: number
    Invoices: number
  }

  export type ShipmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Files?: boolean | ShipmentCountOutputTypeCountFilesArgs
    Freights?: boolean | ShipmentCountOutputTypeCountFreightsArgs
    Invoices?: boolean | ShipmentCountOutputTypeCountInvoicesArgs
  }

  // Custom InputTypes
  /**
   * ShipmentCountOutputType without action
   */
  export type ShipmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentCountOutputType
     */
    select?: ShipmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShipmentCountOutputType without action
   */
  export type ShipmentCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipmentFileWhereInput
  }

  /**
   * ShipmentCountOutputType without action
   */
  export type ShipmentCountOutputTypeCountFreightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreightWhereInput
  }

  /**
   * ShipmentCountOutputType without action
   */
  export type ShipmentCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    Items: number
    Freights: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Items?: boolean | InvoiceCountOutputTypeCountItemsArgs
    Freights?: boolean | InvoiceCountOutputTypeCountFreightsArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountFreightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreightInvoiceWhereInput
  }


  /**
   * Count Type FreightCountOutputType
   */

  export type FreightCountOutputType = {
    invoices: number
  }

  export type FreightCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoices?: boolean | FreightCountOutputTypeCountInvoicesArgs
  }

  // Custom InputTypes
  /**
   * FreightCountOutputType without action
   */
  export type FreightCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightCountOutputType
     */
    select?: FreightCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FreightCountOutputType without action
   */
  export type FreightCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreightInvoiceWhereInput
  }


  /**
   * Count Type VillageCountOutputType
   */

  export type VillageCountOutputType = {
    PipelineProgress: number
    MaterialNeeds: number
  }

  export type VillageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PipelineProgress?: boolean | VillageCountOutputTypeCountPipelineProgressArgs
    MaterialNeeds?: boolean | VillageCountOutputTypeCountMaterialNeedsArgs
  }

  // Custom InputTypes
  /**
   * VillageCountOutputType without action
   */
  export type VillageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VillageCountOutputType
     */
    select?: VillageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VillageCountOutputType without action
   */
  export type VillageCountOutputTypeCountPipelineProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineProgressWhereInput
  }

  /**
   * VillageCountOutputType without action
   */
  export type VillageCountOutputTypeCountMaterialNeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialNeedWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firebaseUid: string | null
    email: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firebaseUid: string | null
    email: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firebaseUid: number
    email: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firebaseUid?: true
    email?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firebaseUid?: true
    email?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firebaseUid?: true
    email?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firebaseUid: string
    email: string
    name: string | null
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firebaseUid?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Vendor?: boolean | User$VendorArgs<ExtArgs>
    Invoice?: boolean | User$InvoiceArgs<ExtArgs>
    Shipment?: boolean | User$ShipmentArgs<ExtArgs>
    Freight?: boolean | User$FreightArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firebaseUid?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firebaseUid?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firebaseUid?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firebaseUid" | "email" | "name" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vendor?: boolean | User$VendorArgs<ExtArgs>
    Invoice?: boolean | User$InvoiceArgs<ExtArgs>
    Shipment?: boolean | User$ShipmentArgs<ExtArgs>
    Freight?: boolean | User$FreightArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Vendor: Prisma.$VendorPayload<ExtArgs>[]
      Invoice: Prisma.$InvoicePayload<ExtArgs>[]
      Shipment: Prisma.$ShipmentPayload<ExtArgs>[]
      Freight: Prisma.$FreightPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firebaseUid: string
      email: string
      name: string | null
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Vendor<T extends User$VendorArgs<ExtArgs> = {}>(args?: Subset<T, User$VendorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Invoice<T extends User$InvoiceArgs<ExtArgs> = {}>(args?: Subset<T, User$InvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Shipment<T extends User$ShipmentArgs<ExtArgs> = {}>(args?: Subset<T, User$ShipmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Freight<T extends User$FreightArgs<ExtArgs> = {}>(args?: Subset<T, User$FreightArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firebaseUid: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Vendor
   */
  export type User$VendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    cursor?: VendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * User.Invoice
   */
  export type User$InvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * User.Shipment
   */
  export type User$ShipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    where?: ShipmentWhereInput
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    cursor?: ShipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }

  /**
   * User.Freight
   */
  export type User$FreightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    where?: FreightWhereInput
    orderBy?: FreightOrderByWithRelationInput | FreightOrderByWithRelationInput[]
    cursor?: FreightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FreightScalarFieldEnum | FreightScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type VendorSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type VendorMinAggregateOutputType = {
    id: number | null
    alias: string | null
    name: string | null
    address: string | null
    country: string | null
    userId: number | null
    createdAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: number | null
    alias: string | null
    name: string | null
    address: string | null
    country: string | null
    userId: number | null
    createdAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    alias: number
    name: number
    address: number
    country: number
    userId: number
    createdAt: number
    _all: number
  }


  export type VendorAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type VendorSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type VendorMinAggregateInputType = {
    id?: true
    alias?: true
    name?: true
    address?: true
    country?: true
    userId?: true
    createdAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    alias?: true
    name?: true
    address?: true
    country?: true
    userId?: true
    createdAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    alias?: true
    name?: true
    address?: true
    country?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _avg?: VendorAvgAggregateInputType
    _sum?: VendorSumAggregateInputType
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: number
    alias: string
    name: string
    address: string
    country: string
    userId: number
    createdAt: Date
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    name?: boolean
    address?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Invoice?: boolean | Vendor$InvoiceArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    name?: boolean
    address?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    name?: boolean
    address?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    alias?: boolean
    name?: boolean
    address?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type VendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "alias" | "name" | "address" | "country" | "userId" | "createdAt", ExtArgs["result"]["vendor"]>
  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Invoice?: boolean | Vendor$InvoiceArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Invoice: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      alias: string
      name: string
      address: string
      country: string
      userId: number
      createdAt: Date
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendors and returns the data saved in the database.
     * @param {VendorCreateManyAndReturnArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors and returns the data updated in the database.
     * @param {VendorUpdateManyAndReturnArgs} args - Arguments to update many Vendors.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VendorUpdateManyAndReturnArgs>(args: SelectSubset<T, VendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Invoice<T extends Vendor$InvoiceArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$InvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'Int'>
    readonly alias: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly address: FieldRef<"Vendor", 'String'>
    readonly country: FieldRef<"Vendor", 'String'>
    readonly userId: FieldRef<"Vendor", 'Int'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor createManyAndReturn
   */
  export type VendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor updateManyAndReturn
   */
  export type VendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to delete.
     */
    limit?: number
  }

  /**
   * Vendor.Invoice
   */
  export type Vendor$InvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model Unit
   */

  export type AggregateUnit = {
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  export type UnitAvgAggregateOutputType = {
    id: number | null
  }

  export type UnitSumAggregateOutputType = {
    id: number | null
  }

  export type UnitMinAggregateOutputType = {
    id: number | null
    unit: string | null
  }

  export type UnitMaxAggregateOutputType = {
    id: number | null
    unit: string | null
  }

  export type UnitCountAggregateOutputType = {
    id: number
    unit: number
    _all: number
  }


  export type UnitAvgAggregateInputType = {
    id?: true
  }

  export type UnitSumAggregateInputType = {
    id?: true
  }

  export type UnitMinAggregateInputType = {
    id?: true
    unit?: true
  }

  export type UnitMaxAggregateInputType = {
    id?: true
    unit?: true
  }

  export type UnitCountAggregateInputType = {
    id?: true
    unit?: true
    _all?: true
  }

  export type UnitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unit to aggregate.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Units
    **/
    _count?: true | UnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnitMaxAggregateInputType
  }

  export type GetUnitAggregateType<T extends UnitAggregateArgs> = {
        [P in keyof T & keyof AggregateUnit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnit[P]>
      : GetScalarType<T[P], AggregateUnit[P]>
  }




  export type UnitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithAggregationInput | UnitOrderByWithAggregationInput[]
    by: UnitScalarFieldEnum[] | UnitScalarFieldEnum
    having?: UnitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnitCountAggregateInputType | true
    _avg?: UnitAvgAggregateInputType
    _sum?: UnitSumAggregateInputType
    _min?: UnitMinAggregateInputType
    _max?: UnitMaxAggregateInputType
  }

  export type UnitGroupByOutputType = {
    id: number
    unit: string
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  type GetUnitGroupByPayload<T extends UnitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnitGroupByOutputType[P]>
            : GetScalarType<T[P], UnitGroupByOutputType[P]>
        }
      >
    >


  export type UnitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unit?: boolean
    InvoiceItem?: boolean | Unit$InvoiceItemArgs<ExtArgs>
    PipelineProgress?: boolean | Unit$PipelineProgressArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unit"]>

  export type UnitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unit?: boolean
  }, ExtArgs["result"]["unit"]>

  export type UnitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unit?: boolean
  }, ExtArgs["result"]["unit"]>

  export type UnitSelectScalar = {
    id?: boolean
    unit?: boolean
  }

  export type UnitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "unit", ExtArgs["result"]["unit"]>
  export type UnitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InvoiceItem?: boolean | Unit$InvoiceItemArgs<ExtArgs>
    PipelineProgress?: boolean | Unit$PipelineProgressArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UnitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UnitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UnitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Unit"
    objects: {
      InvoiceItem: Prisma.$InvoiceItemPayload<ExtArgs>[]
      PipelineProgress: Prisma.$PipelineProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      unit: string
    }, ExtArgs["result"]["unit"]>
    composites: {}
  }

  type UnitGetPayload<S extends boolean | null | undefined | UnitDefaultArgs> = $Result.GetResult<Prisma.$UnitPayload, S>

  type UnitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnitCountAggregateInputType | true
    }

  export interface UnitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unit'], meta: { name: 'Unit' } }
    /**
     * Find zero or one Unit that matches the filter.
     * @param {UnitFindUniqueArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnitFindUniqueArgs>(args: SelectSubset<T, UnitFindUniqueArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Unit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnitFindUniqueOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnitFindUniqueOrThrowArgs>(args: SelectSubset<T, UnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnitFindFirstArgs>(args?: SelectSubset<T, UnitFindFirstArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnitFindFirstOrThrowArgs>(args?: SelectSubset<T, UnitFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Units that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Units
     * const units = await prisma.unit.findMany()
     * 
     * // Get first 10 Units
     * const units = await prisma.unit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unitWithIdOnly = await prisma.unit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnitFindManyArgs>(args?: SelectSubset<T, UnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Unit.
     * @param {UnitCreateArgs} args - Arguments to create a Unit.
     * @example
     * // Create one Unit
     * const Unit = await prisma.unit.create({
     *   data: {
     *     // ... data to create a Unit
     *   }
     * })
     * 
     */
    create<T extends UnitCreateArgs>(args: SelectSubset<T, UnitCreateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Units.
     * @param {UnitCreateManyArgs} args - Arguments to create many Units.
     * @example
     * // Create many Units
     * const unit = await prisma.unit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnitCreateManyArgs>(args?: SelectSubset<T, UnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Units and returns the data saved in the database.
     * @param {UnitCreateManyAndReturnArgs} args - Arguments to create many Units.
     * @example
     * // Create many Units
     * const unit = await prisma.unit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Units and only return the `id`
     * const unitWithIdOnly = await prisma.unit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UnitCreateManyAndReturnArgs>(args?: SelectSubset<T, UnitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Unit.
     * @param {UnitDeleteArgs} args - Arguments to delete one Unit.
     * @example
     * // Delete one Unit
     * const Unit = await prisma.unit.delete({
     *   where: {
     *     // ... filter to delete one Unit
     *   }
     * })
     * 
     */
    delete<T extends UnitDeleteArgs>(args: SelectSubset<T, UnitDeleteArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Unit.
     * @param {UnitUpdateArgs} args - Arguments to update one Unit.
     * @example
     * // Update one Unit
     * const unit = await prisma.unit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnitUpdateArgs>(args: SelectSubset<T, UnitUpdateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Units.
     * @param {UnitDeleteManyArgs} args - Arguments to filter Units to delete.
     * @example
     * // Delete a few Units
     * const { count } = await prisma.unit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnitDeleteManyArgs>(args?: SelectSubset<T, UnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnitUpdateManyArgs>(args: SelectSubset<T, UnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units and returns the data updated in the database.
     * @param {UnitUpdateManyAndReturnArgs} args - Arguments to update many Units.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Units and only return the `id`
     * const unitWithIdOnly = await prisma.unit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UnitUpdateManyAndReturnArgs>(args: SelectSubset<T, UnitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Unit.
     * @param {UnitUpsertArgs} args - Arguments to update or create a Unit.
     * @example
     * // Update or create a Unit
     * const unit = await prisma.unit.upsert({
     *   create: {
     *     // ... data to create a Unit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unit we want to update
     *   }
     * })
     */
    upsert<T extends UnitUpsertArgs>(args: SelectSubset<T, UnitUpsertArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitCountArgs} args - Arguments to filter Units to count.
     * @example
     * // Count the number of Units
     * const count = await prisma.unit.count({
     *   where: {
     *     // ... the filter for the Units we want to count
     *   }
     * })
    **/
    count<T extends UnitCountArgs>(
      args?: Subset<T, UnitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitAggregateArgs>(args: Subset<T, UnitAggregateArgs>): Prisma.PrismaPromise<GetUnitAggregateType<T>>

    /**
     * Group by Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnitGroupByArgs['orderBy'] }
        : { orderBy?: UnitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Unit model
   */
  readonly fields: UnitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    InvoiceItem<T extends Unit$InvoiceItemArgs<ExtArgs> = {}>(args?: Subset<T, Unit$InvoiceItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PipelineProgress<T extends Unit$PipelineProgressArgs<ExtArgs> = {}>(args?: Subset<T, Unit$PipelineProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Unit model
   */
  interface UnitFieldRefs {
    readonly id: FieldRef<"Unit", 'Int'>
    readonly unit: FieldRef<"Unit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Unit findUnique
   */
  export type UnitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findUniqueOrThrow
   */
  export type UnitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findFirst
   */
  export type UnitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findFirstOrThrow
   */
  export type UnitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findMany
   */
  export type UnitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Units to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit create
   */
  export type UnitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to create a Unit.
     */
    data: XOR<UnitCreateInput, UnitUncheckedCreateInput>
  }

  /**
   * Unit createMany
   */
  export type UnitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Units.
     */
    data: UnitCreateManyInput | UnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Unit createManyAndReturn
   */
  export type UnitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * The data used to create many Units.
     */
    data: UnitCreateManyInput | UnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Unit update
   */
  export type UnitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to update a Unit.
     */
    data: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
    /**
     * Choose, which Unit to update.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit updateMany
   */
  export type UnitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Units.
     */
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    /**
     * Filter which Units to update
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to update.
     */
    limit?: number
  }

  /**
   * Unit updateManyAndReturn
   */
  export type UnitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * The data used to update Units.
     */
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    /**
     * Filter which Units to update
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to update.
     */
    limit?: number
  }

  /**
   * Unit upsert
   */
  export type UnitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The filter to search for the Unit to update in case it exists.
     */
    where: UnitWhereUniqueInput
    /**
     * In case the Unit found by the `where` argument doesn't exist, create a new Unit with this data.
     */
    create: XOR<UnitCreateInput, UnitUncheckedCreateInput>
    /**
     * In case the Unit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
  }

  /**
   * Unit delete
   */
  export type UnitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter which Unit to delete.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit deleteMany
   */
  export type UnitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Units to delete
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to delete.
     */
    limit?: number
  }

  /**
   * Unit.InvoiceItem
   */
  export type Unit$InvoiceItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    cursor?: InvoiceItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * Unit.PipelineProgress
   */
  export type Unit$PipelineProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    where?: PipelineProgressWhereInput
    orderBy?: PipelineProgressOrderByWithRelationInput | PipelineProgressOrderByWithRelationInput[]
    cursor?: PipelineProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineProgressScalarFieldEnum | PipelineProgressScalarFieldEnum[]
  }

  /**
   * Unit without action
   */
  export type UnitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
  }


  /**
   * Model Currency
   */

  export type AggregateCurrency = {
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  export type CurrencyAvgAggregateOutputType = {
    id: number | null
  }

  export type CurrencySumAggregateOutputType = {
    id: number | null
  }

  export type CurrencyMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
  }

  export type CurrencyMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
  }

  export type CurrencyCountAggregateOutputType = {
    id: number
    code: number
    name: number
    _all: number
  }


  export type CurrencyAvgAggregateInputType = {
    id?: true
  }

  export type CurrencySumAggregateInputType = {
    id?: true
  }

  export type CurrencyMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
  }

  export type CurrencyMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
  }

  export type CurrencyCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    _all?: true
  }

  export type CurrencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currency to aggregate.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Currencies
    **/
    _count?: true | CurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrencyMaxAggregateInputType
  }

  export type GetCurrencyAggregateType<T extends CurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrency[P]>
      : GetScalarType<T[P], AggregateCurrency[P]>
  }




  export type CurrencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyWhereInput
    orderBy?: CurrencyOrderByWithAggregationInput | CurrencyOrderByWithAggregationInput[]
    by: CurrencyScalarFieldEnum[] | CurrencyScalarFieldEnum
    having?: CurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrencyCountAggregateInputType | true
    _avg?: CurrencyAvgAggregateInputType
    _sum?: CurrencySumAggregateInputType
    _min?: CurrencyMinAggregateInputType
    _max?: CurrencyMaxAggregateInputType
  }

  export type CurrencyGroupByOutputType = {
    id: number
    code: string
    name: string
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  type GetCurrencyGroupByPayload<T extends CurrencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
        }
      >
    >


  export type CurrencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    Invoice?: boolean | Currency$InvoiceArgs<ExtArgs>
    Freight?: boolean | Currency$FreightArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
  }

  export type CurrencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name", ExtArgs["result"]["currency"]>
  export type CurrencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Invoice?: boolean | Currency$InvoiceArgs<ExtArgs>
    Freight?: boolean | Currency$FreightArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CurrencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CurrencyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CurrencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Currency"
    objects: {
      Invoice: Prisma.$InvoicePayload<ExtArgs>[]
      Freight: Prisma.$FreightPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
    }, ExtArgs["result"]["currency"]>
    composites: {}
  }

  type CurrencyGetPayload<S extends boolean | null | undefined | CurrencyDefaultArgs> = $Result.GetResult<Prisma.$CurrencyPayload, S>

  type CurrencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CurrencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CurrencyCountAggregateInputType | true
    }

  export interface CurrencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Currency'], meta: { name: 'Currency' } }
    /**
     * Find zero or one Currency that matches the filter.
     * @param {CurrencyFindUniqueArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurrencyFindUniqueArgs>(args: SelectSubset<T, CurrencyFindUniqueArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Currency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CurrencyFindUniqueOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurrencyFindUniqueOrThrowArgs>(args: SelectSubset<T, CurrencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurrencyFindFirstArgs>(args?: SelectSubset<T, CurrencyFindFirstArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurrencyFindFirstOrThrowArgs>(args?: SelectSubset<T, CurrencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Currencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Currencies
     * const currencies = await prisma.currency.findMany()
     * 
     * // Get first 10 Currencies
     * const currencies = await prisma.currency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currencyWithIdOnly = await prisma.currency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CurrencyFindManyArgs>(args?: SelectSubset<T, CurrencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Currency.
     * @param {CurrencyCreateArgs} args - Arguments to create a Currency.
     * @example
     * // Create one Currency
     * const Currency = await prisma.currency.create({
     *   data: {
     *     // ... data to create a Currency
     *   }
     * })
     * 
     */
    create<T extends CurrencyCreateArgs>(args: SelectSubset<T, CurrencyCreateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Currencies.
     * @param {CurrencyCreateManyArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurrencyCreateManyArgs>(args?: SelectSubset<T, CurrencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Currencies and returns the data saved in the database.
     * @param {CurrencyCreateManyAndReturnArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurrencyCreateManyAndReturnArgs>(args?: SelectSubset<T, CurrencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Currency.
     * @param {CurrencyDeleteArgs} args - Arguments to delete one Currency.
     * @example
     * // Delete one Currency
     * const Currency = await prisma.currency.delete({
     *   where: {
     *     // ... filter to delete one Currency
     *   }
     * })
     * 
     */
    delete<T extends CurrencyDeleteArgs>(args: SelectSubset<T, CurrencyDeleteArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Currency.
     * @param {CurrencyUpdateArgs} args - Arguments to update one Currency.
     * @example
     * // Update one Currency
     * const currency = await prisma.currency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurrencyUpdateArgs>(args: SelectSubset<T, CurrencyUpdateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Currencies.
     * @param {CurrencyDeleteManyArgs} args - Arguments to filter Currencies to delete.
     * @example
     * // Delete a few Currencies
     * const { count } = await prisma.currency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurrencyDeleteManyArgs>(args?: SelectSubset<T, CurrencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurrencyUpdateManyArgs>(args: SelectSubset<T, CurrencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies and returns the data updated in the database.
     * @param {CurrencyUpdateManyAndReturnArgs} args - Arguments to update many Currencies.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CurrencyUpdateManyAndReturnArgs>(args: SelectSubset<T, CurrencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Currency.
     * @param {CurrencyUpsertArgs} args - Arguments to update or create a Currency.
     * @example
     * // Update or create a Currency
     * const currency = await prisma.currency.upsert({
     *   create: {
     *     // ... data to create a Currency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Currency we want to update
     *   }
     * })
     */
    upsert<T extends CurrencyUpsertArgs>(args: SelectSubset<T, CurrencyUpsertArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyCountArgs} args - Arguments to filter Currencies to count.
     * @example
     * // Count the number of Currencies
     * const count = await prisma.currency.count({
     *   where: {
     *     // ... the filter for the Currencies we want to count
     *   }
     * })
    **/
    count<T extends CurrencyCountArgs>(
      args?: Subset<T, CurrencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrencyAggregateArgs>(args: Subset<T, CurrencyAggregateArgs>): Prisma.PrismaPromise<GetCurrencyAggregateType<T>>

    /**
     * Group by Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrencyGroupByArgs['orderBy'] }
        : { orderBy?: CurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Currency model
   */
  readonly fields: CurrencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Currency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurrencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Invoice<T extends Currency$InvoiceArgs<ExtArgs> = {}>(args?: Subset<T, Currency$InvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Freight<T extends Currency$FreightArgs<ExtArgs> = {}>(args?: Subset<T, Currency$FreightArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Currency model
   */
  interface CurrencyFieldRefs {
    readonly id: FieldRef<"Currency", 'Int'>
    readonly code: FieldRef<"Currency", 'String'>
    readonly name: FieldRef<"Currency", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Currency findUnique
   */
  export type CurrencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findUniqueOrThrow
   */
  export type CurrencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findFirst
   */
  export type CurrencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findFirstOrThrow
   */
  export type CurrencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findMany
   */
  export type CurrencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currencies to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency create
   */
  export type CurrencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Currency.
     */
    data: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
  }

  /**
   * Currency createMany
   */
  export type CurrencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency createManyAndReturn
   */
  export type CurrencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency update
   */
  export type CurrencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Currency.
     */
    data: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
    /**
     * Choose, which Currency to update.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency updateMany
   */
  export type CurrencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency updateManyAndReturn
   */
  export type CurrencyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency upsert
   */
  export type CurrencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Currency to update in case it exists.
     */
    where: CurrencyWhereUniqueInput
    /**
     * In case the Currency found by the `where` argument doesn't exist, create a new Currency with this data.
     */
    create: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
    /**
     * In case the Currency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
  }

  /**
   * Currency delete
   */
  export type CurrencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter which Currency to delete.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency deleteMany
   */
  export type CurrencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currencies to delete
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to delete.
     */
    limit?: number
  }

  /**
   * Currency.Invoice
   */
  export type Currency$InvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Currency.Freight
   */
  export type Currency$FreightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    where?: FreightWhereInput
    orderBy?: FreightOrderByWithRelationInput | FreightOrderByWithRelationInput[]
    cursor?: FreightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FreightScalarFieldEnum | FreightScalarFieldEnum[]
  }

  /**
   * Currency without action
   */
  export type CurrencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
  }


  /**
   * Model MaterialGroup
   */

  export type AggregateMaterialGroup = {
    _count: MaterialGroupCountAggregateOutputType | null
    _avg: MaterialGroupAvgAggregateOutputType | null
    _sum: MaterialGroupSumAggregateOutputType | null
    _min: MaterialGroupMinAggregateOutputType | null
    _max: MaterialGroupMaxAggregateOutputType | null
  }

  export type MaterialGroupAvgAggregateOutputType = {
    id: number | null
  }

  export type MaterialGroupSumAggregateOutputType = {
    id: number | null
  }

  export type MaterialGroupMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type MaterialGroupMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type MaterialGroupCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type MaterialGroupAvgAggregateInputType = {
    id?: true
  }

  export type MaterialGroupSumAggregateInputType = {
    id?: true
  }

  export type MaterialGroupMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type MaterialGroupMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type MaterialGroupCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type MaterialGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialGroup to aggregate.
     */
    where?: MaterialGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialGroups to fetch.
     */
    orderBy?: MaterialGroupOrderByWithRelationInput | MaterialGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaterialGroups
    **/
    _count?: true | MaterialGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialGroupMaxAggregateInputType
  }

  export type GetMaterialGroupAggregateType<T extends MaterialGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterialGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterialGroup[P]>
      : GetScalarType<T[P], AggregateMaterialGroup[P]>
  }




  export type MaterialGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialGroupWhereInput
    orderBy?: MaterialGroupOrderByWithAggregationInput | MaterialGroupOrderByWithAggregationInput[]
    by: MaterialGroupScalarFieldEnum[] | MaterialGroupScalarFieldEnum
    having?: MaterialGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialGroupCountAggregateInputType | true
    _avg?: MaterialGroupAvgAggregateInputType
    _sum?: MaterialGroupSumAggregateInputType
    _min?: MaterialGroupMinAggregateInputType
    _max?: MaterialGroupMaxAggregateInputType
  }

  export type MaterialGroupGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: MaterialGroupCountAggregateOutputType | null
    _avg: MaterialGroupAvgAggregateOutputType | null
    _sum: MaterialGroupSumAggregateOutputType | null
    _min: MaterialGroupMinAggregateOutputType | null
    _max: MaterialGroupMaxAggregateOutputType | null
  }

  type GetMaterialGroupGroupByPayload<T extends MaterialGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialGroupGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialGroupGroupByOutputType[P]>
        }
      >
    >


  export type MaterialGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    MaterialType?: boolean | MaterialGroup$MaterialTypeArgs<ExtArgs>
    _count?: boolean | MaterialGroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialGroup"]>

  export type MaterialGroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["materialGroup"]>

  export type MaterialGroupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["materialGroup"]>

  export type MaterialGroupSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type MaterialGroupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["materialGroup"]>
  export type MaterialGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MaterialType?: boolean | MaterialGroup$MaterialTypeArgs<ExtArgs>
    _count?: boolean | MaterialGroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaterialGroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MaterialGroupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MaterialGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaterialGroup"
    objects: {
      MaterialType: Prisma.$MaterialTypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
    }, ExtArgs["result"]["materialGroup"]>
    composites: {}
  }

  type MaterialGroupGetPayload<S extends boolean | null | undefined | MaterialGroupDefaultArgs> = $Result.GetResult<Prisma.$MaterialGroupPayload, S>

  type MaterialGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaterialGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialGroupCountAggregateInputType | true
    }

  export interface MaterialGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaterialGroup'], meta: { name: 'MaterialGroup' } }
    /**
     * Find zero or one MaterialGroup that matches the filter.
     * @param {MaterialGroupFindUniqueArgs} args - Arguments to find a MaterialGroup
     * @example
     * // Get one MaterialGroup
     * const materialGroup = await prisma.materialGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialGroupFindUniqueArgs>(args: SelectSubset<T, MaterialGroupFindUniqueArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaterialGroup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaterialGroupFindUniqueOrThrowArgs} args - Arguments to find a MaterialGroup
     * @example
     * // Get one MaterialGroup
     * const materialGroup = await prisma.materialGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialGroupFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupFindFirstArgs} args - Arguments to find a MaterialGroup
     * @example
     * // Get one MaterialGroup
     * const materialGroup = await prisma.materialGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialGroupFindFirstArgs>(args?: SelectSubset<T, MaterialGroupFindFirstArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupFindFirstOrThrowArgs} args - Arguments to find a MaterialGroup
     * @example
     * // Get one MaterialGroup
     * const materialGroup = await prisma.materialGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialGroupFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaterialGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaterialGroups
     * const materialGroups = await prisma.materialGroup.findMany()
     * 
     * // Get first 10 MaterialGroups
     * const materialGroups = await prisma.materialGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialGroupWithIdOnly = await prisma.materialGroup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialGroupFindManyArgs>(args?: SelectSubset<T, MaterialGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaterialGroup.
     * @param {MaterialGroupCreateArgs} args - Arguments to create a MaterialGroup.
     * @example
     * // Create one MaterialGroup
     * const MaterialGroup = await prisma.materialGroup.create({
     *   data: {
     *     // ... data to create a MaterialGroup
     *   }
     * })
     * 
     */
    create<T extends MaterialGroupCreateArgs>(args: SelectSubset<T, MaterialGroupCreateArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaterialGroups.
     * @param {MaterialGroupCreateManyArgs} args - Arguments to create many MaterialGroups.
     * @example
     * // Create many MaterialGroups
     * const materialGroup = await prisma.materialGroup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialGroupCreateManyArgs>(args?: SelectSubset<T, MaterialGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaterialGroups and returns the data saved in the database.
     * @param {MaterialGroupCreateManyAndReturnArgs} args - Arguments to create many MaterialGroups.
     * @example
     * // Create many MaterialGroups
     * const materialGroup = await prisma.materialGroup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaterialGroups and only return the `id`
     * const materialGroupWithIdOnly = await prisma.materialGroup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaterialGroupCreateManyAndReturnArgs>(args?: SelectSubset<T, MaterialGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaterialGroup.
     * @param {MaterialGroupDeleteArgs} args - Arguments to delete one MaterialGroup.
     * @example
     * // Delete one MaterialGroup
     * const MaterialGroup = await prisma.materialGroup.delete({
     *   where: {
     *     // ... filter to delete one MaterialGroup
     *   }
     * })
     * 
     */
    delete<T extends MaterialGroupDeleteArgs>(args: SelectSubset<T, MaterialGroupDeleteArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaterialGroup.
     * @param {MaterialGroupUpdateArgs} args - Arguments to update one MaterialGroup.
     * @example
     * // Update one MaterialGroup
     * const materialGroup = await prisma.materialGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialGroupUpdateArgs>(args: SelectSubset<T, MaterialGroupUpdateArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaterialGroups.
     * @param {MaterialGroupDeleteManyArgs} args - Arguments to filter MaterialGroups to delete.
     * @example
     * // Delete a few MaterialGroups
     * const { count } = await prisma.materialGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialGroupDeleteManyArgs>(args?: SelectSubset<T, MaterialGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaterialGroups
     * const materialGroup = await prisma.materialGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialGroupUpdateManyArgs>(args: SelectSubset<T, MaterialGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialGroups and returns the data updated in the database.
     * @param {MaterialGroupUpdateManyAndReturnArgs} args - Arguments to update many MaterialGroups.
     * @example
     * // Update many MaterialGroups
     * const materialGroup = await prisma.materialGroup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaterialGroups and only return the `id`
     * const materialGroupWithIdOnly = await prisma.materialGroup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaterialGroupUpdateManyAndReturnArgs>(args: SelectSubset<T, MaterialGroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaterialGroup.
     * @param {MaterialGroupUpsertArgs} args - Arguments to update or create a MaterialGroup.
     * @example
     * // Update or create a MaterialGroup
     * const materialGroup = await prisma.materialGroup.upsert({
     *   create: {
     *     // ... data to create a MaterialGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaterialGroup we want to update
     *   }
     * })
     */
    upsert<T extends MaterialGroupUpsertArgs>(args: SelectSubset<T, MaterialGroupUpsertArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaterialGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupCountArgs} args - Arguments to filter MaterialGroups to count.
     * @example
     * // Count the number of MaterialGroups
     * const count = await prisma.materialGroup.count({
     *   where: {
     *     // ... the filter for the MaterialGroups we want to count
     *   }
     * })
    **/
    count<T extends MaterialGroupCountArgs>(
      args?: Subset<T, MaterialGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaterialGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialGroupAggregateArgs>(args: Subset<T, MaterialGroupAggregateArgs>): Prisma.PrismaPromise<GetMaterialGroupAggregateType<T>>

    /**
     * Group by MaterialGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialGroupGroupByArgs['orderBy'] }
        : { orderBy?: MaterialGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaterialGroup model
   */
  readonly fields: MaterialGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaterialGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MaterialType<T extends MaterialGroup$MaterialTypeArgs<ExtArgs> = {}>(args?: Subset<T, MaterialGroup$MaterialTypeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaterialGroup model
   */
  interface MaterialGroupFieldRefs {
    readonly id: FieldRef<"MaterialGroup", 'Int'>
    readonly name: FieldRef<"MaterialGroup", 'String'>
    readonly description: FieldRef<"MaterialGroup", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MaterialGroup findUnique
   */
  export type MaterialGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * Filter, which MaterialGroup to fetch.
     */
    where: MaterialGroupWhereUniqueInput
  }

  /**
   * MaterialGroup findUniqueOrThrow
   */
  export type MaterialGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * Filter, which MaterialGroup to fetch.
     */
    where: MaterialGroupWhereUniqueInput
  }

  /**
   * MaterialGroup findFirst
   */
  export type MaterialGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * Filter, which MaterialGroup to fetch.
     */
    where?: MaterialGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialGroups to fetch.
     */
    orderBy?: MaterialGroupOrderByWithRelationInput | MaterialGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialGroups.
     */
    cursor?: MaterialGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialGroups.
     */
    distinct?: MaterialGroupScalarFieldEnum | MaterialGroupScalarFieldEnum[]
  }

  /**
   * MaterialGroup findFirstOrThrow
   */
  export type MaterialGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * Filter, which MaterialGroup to fetch.
     */
    where?: MaterialGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialGroups to fetch.
     */
    orderBy?: MaterialGroupOrderByWithRelationInput | MaterialGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialGroups.
     */
    cursor?: MaterialGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialGroups.
     */
    distinct?: MaterialGroupScalarFieldEnum | MaterialGroupScalarFieldEnum[]
  }

  /**
   * MaterialGroup findMany
   */
  export type MaterialGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * Filter, which MaterialGroups to fetch.
     */
    where?: MaterialGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialGroups to fetch.
     */
    orderBy?: MaterialGroupOrderByWithRelationInput | MaterialGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaterialGroups.
     */
    cursor?: MaterialGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialGroups.
     */
    skip?: number
    distinct?: MaterialGroupScalarFieldEnum | MaterialGroupScalarFieldEnum[]
  }

  /**
   * MaterialGroup create
   */
  export type MaterialGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a MaterialGroup.
     */
    data: XOR<MaterialGroupCreateInput, MaterialGroupUncheckedCreateInput>
  }

  /**
   * MaterialGroup createMany
   */
  export type MaterialGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaterialGroups.
     */
    data: MaterialGroupCreateManyInput | MaterialGroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaterialGroup createManyAndReturn
   */
  export type MaterialGroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * The data used to create many MaterialGroups.
     */
    data: MaterialGroupCreateManyInput | MaterialGroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaterialGroup update
   */
  export type MaterialGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a MaterialGroup.
     */
    data: XOR<MaterialGroupUpdateInput, MaterialGroupUncheckedUpdateInput>
    /**
     * Choose, which MaterialGroup to update.
     */
    where: MaterialGroupWhereUniqueInput
  }

  /**
   * MaterialGroup updateMany
   */
  export type MaterialGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaterialGroups.
     */
    data: XOR<MaterialGroupUpdateManyMutationInput, MaterialGroupUncheckedUpdateManyInput>
    /**
     * Filter which MaterialGroups to update
     */
    where?: MaterialGroupWhereInput
    /**
     * Limit how many MaterialGroups to update.
     */
    limit?: number
  }

  /**
   * MaterialGroup updateManyAndReturn
   */
  export type MaterialGroupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * The data used to update MaterialGroups.
     */
    data: XOR<MaterialGroupUpdateManyMutationInput, MaterialGroupUncheckedUpdateManyInput>
    /**
     * Filter which MaterialGroups to update
     */
    where?: MaterialGroupWhereInput
    /**
     * Limit how many MaterialGroups to update.
     */
    limit?: number
  }

  /**
   * MaterialGroup upsert
   */
  export type MaterialGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the MaterialGroup to update in case it exists.
     */
    where: MaterialGroupWhereUniqueInput
    /**
     * In case the MaterialGroup found by the `where` argument doesn't exist, create a new MaterialGroup with this data.
     */
    create: XOR<MaterialGroupCreateInput, MaterialGroupUncheckedCreateInput>
    /**
     * In case the MaterialGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialGroupUpdateInput, MaterialGroupUncheckedUpdateInput>
  }

  /**
   * MaterialGroup delete
   */
  export type MaterialGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
    /**
     * Filter which MaterialGroup to delete.
     */
    where: MaterialGroupWhereUniqueInput
  }

  /**
   * MaterialGroup deleteMany
   */
  export type MaterialGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialGroups to delete
     */
    where?: MaterialGroupWhereInput
    /**
     * Limit how many MaterialGroups to delete.
     */
    limit?: number
  }

  /**
   * MaterialGroup.MaterialType
   */
  export type MaterialGroup$MaterialTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    where?: MaterialTypeWhereInput
    orderBy?: MaterialTypeOrderByWithRelationInput | MaterialTypeOrderByWithRelationInput[]
    cursor?: MaterialTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialTypeScalarFieldEnum | MaterialTypeScalarFieldEnum[]
  }

  /**
   * MaterialGroup without action
   */
  export type MaterialGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialGroup
     */
    select?: MaterialGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialGroup
     */
    omit?: MaterialGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialGroupInclude<ExtArgs> | null
  }


  /**
   * Model MaterialType
   */

  export type AggregateMaterialType = {
    _count: MaterialTypeCountAggregateOutputType | null
    _avg: MaterialTypeAvgAggregateOutputType | null
    _sum: MaterialTypeSumAggregateOutputType | null
    _min: MaterialTypeMinAggregateOutputType | null
    _max: MaterialTypeMaxAggregateOutputType | null
  }

  export type MaterialTypeAvgAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type MaterialTypeSumAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type MaterialTypeMinAggregateOutputType = {
    id: number | null
    type: string | null
    groupId: number | null
  }

  export type MaterialTypeMaxAggregateOutputType = {
    id: number | null
    type: string | null
    groupId: number | null
  }

  export type MaterialTypeCountAggregateOutputType = {
    id: number
    type: number
    groupId: number
    _all: number
  }


  export type MaterialTypeAvgAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type MaterialTypeSumAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type MaterialTypeMinAggregateInputType = {
    id?: true
    type?: true
    groupId?: true
  }

  export type MaterialTypeMaxAggregateInputType = {
    id?: true
    type?: true
    groupId?: true
  }

  export type MaterialTypeCountAggregateInputType = {
    id?: true
    type?: true
    groupId?: true
    _all?: true
  }

  export type MaterialTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialType to aggregate.
     */
    where?: MaterialTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialTypes to fetch.
     */
    orderBy?: MaterialTypeOrderByWithRelationInput | MaterialTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaterialTypes
    **/
    _count?: true | MaterialTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialTypeMaxAggregateInputType
  }

  export type GetMaterialTypeAggregateType<T extends MaterialTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterialType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterialType[P]>
      : GetScalarType<T[P], AggregateMaterialType[P]>
  }




  export type MaterialTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialTypeWhereInput
    orderBy?: MaterialTypeOrderByWithAggregationInput | MaterialTypeOrderByWithAggregationInput[]
    by: MaterialTypeScalarFieldEnum[] | MaterialTypeScalarFieldEnum
    having?: MaterialTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialTypeCountAggregateInputType | true
    _avg?: MaterialTypeAvgAggregateInputType
    _sum?: MaterialTypeSumAggregateInputType
    _min?: MaterialTypeMinAggregateInputType
    _max?: MaterialTypeMaxAggregateInputType
  }

  export type MaterialTypeGroupByOutputType = {
    id: number
    type: string
    groupId: number
    _count: MaterialTypeCountAggregateOutputType | null
    _avg: MaterialTypeAvgAggregateOutputType | null
    _sum: MaterialTypeSumAggregateOutputType | null
    _min: MaterialTypeMinAggregateOutputType | null
    _max: MaterialTypeMaxAggregateOutputType | null
  }

  type GetMaterialTypeGroupByPayload<T extends MaterialTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialTypeGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialTypeGroupByOutputType[P]>
        }
      >
    >


  export type MaterialTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    groupId?: boolean
    group?: boolean | MaterialGroupDefaultArgs<ExtArgs>
    MaterialName?: boolean | MaterialType$MaterialNameArgs<ExtArgs>
    _count?: boolean | MaterialTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialType"]>

  export type MaterialTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    groupId?: boolean
    group?: boolean | MaterialGroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialType"]>

  export type MaterialTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    groupId?: boolean
    group?: boolean | MaterialGroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialType"]>

  export type MaterialTypeSelectScalar = {
    id?: boolean
    type?: boolean
    groupId?: boolean
  }

  export type MaterialTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "groupId", ExtArgs["result"]["materialType"]>
  export type MaterialTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | MaterialGroupDefaultArgs<ExtArgs>
    MaterialName?: boolean | MaterialType$MaterialNameArgs<ExtArgs>
    _count?: boolean | MaterialTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaterialTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | MaterialGroupDefaultArgs<ExtArgs>
  }
  export type MaterialTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | MaterialGroupDefaultArgs<ExtArgs>
  }

  export type $MaterialTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaterialType"
    objects: {
      group: Prisma.$MaterialGroupPayload<ExtArgs>
      MaterialName: Prisma.$MaterialNamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      groupId: number
    }, ExtArgs["result"]["materialType"]>
    composites: {}
  }

  type MaterialTypeGetPayload<S extends boolean | null | undefined | MaterialTypeDefaultArgs> = $Result.GetResult<Prisma.$MaterialTypePayload, S>

  type MaterialTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaterialTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialTypeCountAggregateInputType | true
    }

  export interface MaterialTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaterialType'], meta: { name: 'MaterialType' } }
    /**
     * Find zero or one MaterialType that matches the filter.
     * @param {MaterialTypeFindUniqueArgs} args - Arguments to find a MaterialType
     * @example
     * // Get one MaterialType
     * const materialType = await prisma.materialType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialTypeFindUniqueArgs>(args: SelectSubset<T, MaterialTypeFindUniqueArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaterialType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaterialTypeFindUniqueOrThrowArgs} args - Arguments to find a MaterialType
     * @example
     * // Get one MaterialType
     * const materialType = await prisma.materialType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialTypeFindFirstArgs} args - Arguments to find a MaterialType
     * @example
     * // Get one MaterialType
     * const materialType = await prisma.materialType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialTypeFindFirstArgs>(args?: SelectSubset<T, MaterialTypeFindFirstArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialTypeFindFirstOrThrowArgs} args - Arguments to find a MaterialType
     * @example
     * // Get one MaterialType
     * const materialType = await prisma.materialType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaterialTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaterialTypes
     * const materialTypes = await prisma.materialType.findMany()
     * 
     * // Get first 10 MaterialTypes
     * const materialTypes = await prisma.materialType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialTypeWithIdOnly = await prisma.materialType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialTypeFindManyArgs>(args?: SelectSubset<T, MaterialTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaterialType.
     * @param {MaterialTypeCreateArgs} args - Arguments to create a MaterialType.
     * @example
     * // Create one MaterialType
     * const MaterialType = await prisma.materialType.create({
     *   data: {
     *     // ... data to create a MaterialType
     *   }
     * })
     * 
     */
    create<T extends MaterialTypeCreateArgs>(args: SelectSubset<T, MaterialTypeCreateArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaterialTypes.
     * @param {MaterialTypeCreateManyArgs} args - Arguments to create many MaterialTypes.
     * @example
     * // Create many MaterialTypes
     * const materialType = await prisma.materialType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialTypeCreateManyArgs>(args?: SelectSubset<T, MaterialTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaterialTypes and returns the data saved in the database.
     * @param {MaterialTypeCreateManyAndReturnArgs} args - Arguments to create many MaterialTypes.
     * @example
     * // Create many MaterialTypes
     * const materialType = await prisma.materialType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaterialTypes and only return the `id`
     * const materialTypeWithIdOnly = await prisma.materialType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaterialTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, MaterialTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaterialType.
     * @param {MaterialTypeDeleteArgs} args - Arguments to delete one MaterialType.
     * @example
     * // Delete one MaterialType
     * const MaterialType = await prisma.materialType.delete({
     *   where: {
     *     // ... filter to delete one MaterialType
     *   }
     * })
     * 
     */
    delete<T extends MaterialTypeDeleteArgs>(args: SelectSubset<T, MaterialTypeDeleteArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaterialType.
     * @param {MaterialTypeUpdateArgs} args - Arguments to update one MaterialType.
     * @example
     * // Update one MaterialType
     * const materialType = await prisma.materialType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialTypeUpdateArgs>(args: SelectSubset<T, MaterialTypeUpdateArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaterialTypes.
     * @param {MaterialTypeDeleteManyArgs} args - Arguments to filter MaterialTypes to delete.
     * @example
     * // Delete a few MaterialTypes
     * const { count } = await prisma.materialType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialTypeDeleteManyArgs>(args?: SelectSubset<T, MaterialTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaterialTypes
     * const materialType = await prisma.materialType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialTypeUpdateManyArgs>(args: SelectSubset<T, MaterialTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialTypes and returns the data updated in the database.
     * @param {MaterialTypeUpdateManyAndReturnArgs} args - Arguments to update many MaterialTypes.
     * @example
     * // Update many MaterialTypes
     * const materialType = await prisma.materialType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaterialTypes and only return the `id`
     * const materialTypeWithIdOnly = await prisma.materialType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaterialTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, MaterialTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaterialType.
     * @param {MaterialTypeUpsertArgs} args - Arguments to update or create a MaterialType.
     * @example
     * // Update or create a MaterialType
     * const materialType = await prisma.materialType.upsert({
     *   create: {
     *     // ... data to create a MaterialType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaterialType we want to update
     *   }
     * })
     */
    upsert<T extends MaterialTypeUpsertArgs>(args: SelectSubset<T, MaterialTypeUpsertArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaterialTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialTypeCountArgs} args - Arguments to filter MaterialTypes to count.
     * @example
     * // Count the number of MaterialTypes
     * const count = await prisma.materialType.count({
     *   where: {
     *     // ... the filter for the MaterialTypes we want to count
     *   }
     * })
    **/
    count<T extends MaterialTypeCountArgs>(
      args?: Subset<T, MaterialTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaterialType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialTypeAggregateArgs>(args: Subset<T, MaterialTypeAggregateArgs>): Prisma.PrismaPromise<GetMaterialTypeAggregateType<T>>

    /**
     * Group by MaterialType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialTypeGroupByArgs['orderBy'] }
        : { orderBy?: MaterialTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaterialType model
   */
  readonly fields: MaterialTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaterialType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    group<T extends MaterialGroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialGroupDefaultArgs<ExtArgs>>): Prisma__MaterialGroupClient<$Result.GetResult<Prisma.$MaterialGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    MaterialName<T extends MaterialType$MaterialNameArgs<ExtArgs> = {}>(args?: Subset<T, MaterialType$MaterialNameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaterialType model
   */
  interface MaterialTypeFieldRefs {
    readonly id: FieldRef<"MaterialType", 'Int'>
    readonly type: FieldRef<"MaterialType", 'String'>
    readonly groupId: FieldRef<"MaterialType", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MaterialType findUnique
   */
  export type MaterialTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * Filter, which MaterialType to fetch.
     */
    where: MaterialTypeWhereUniqueInput
  }

  /**
   * MaterialType findUniqueOrThrow
   */
  export type MaterialTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * Filter, which MaterialType to fetch.
     */
    where: MaterialTypeWhereUniqueInput
  }

  /**
   * MaterialType findFirst
   */
  export type MaterialTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * Filter, which MaterialType to fetch.
     */
    where?: MaterialTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialTypes to fetch.
     */
    orderBy?: MaterialTypeOrderByWithRelationInput | MaterialTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialTypes.
     */
    cursor?: MaterialTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialTypes.
     */
    distinct?: MaterialTypeScalarFieldEnum | MaterialTypeScalarFieldEnum[]
  }

  /**
   * MaterialType findFirstOrThrow
   */
  export type MaterialTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * Filter, which MaterialType to fetch.
     */
    where?: MaterialTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialTypes to fetch.
     */
    orderBy?: MaterialTypeOrderByWithRelationInput | MaterialTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialTypes.
     */
    cursor?: MaterialTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialTypes.
     */
    distinct?: MaterialTypeScalarFieldEnum | MaterialTypeScalarFieldEnum[]
  }

  /**
   * MaterialType findMany
   */
  export type MaterialTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * Filter, which MaterialTypes to fetch.
     */
    where?: MaterialTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialTypes to fetch.
     */
    orderBy?: MaterialTypeOrderByWithRelationInput | MaterialTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaterialTypes.
     */
    cursor?: MaterialTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialTypes.
     */
    skip?: number
    distinct?: MaterialTypeScalarFieldEnum | MaterialTypeScalarFieldEnum[]
  }

  /**
   * MaterialType create
   */
  export type MaterialTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a MaterialType.
     */
    data: XOR<MaterialTypeCreateInput, MaterialTypeUncheckedCreateInput>
  }

  /**
   * MaterialType createMany
   */
  export type MaterialTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaterialTypes.
     */
    data: MaterialTypeCreateManyInput | MaterialTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaterialType createManyAndReturn
   */
  export type MaterialTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * The data used to create many MaterialTypes.
     */
    data: MaterialTypeCreateManyInput | MaterialTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialType update
   */
  export type MaterialTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a MaterialType.
     */
    data: XOR<MaterialTypeUpdateInput, MaterialTypeUncheckedUpdateInput>
    /**
     * Choose, which MaterialType to update.
     */
    where: MaterialTypeWhereUniqueInput
  }

  /**
   * MaterialType updateMany
   */
  export type MaterialTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaterialTypes.
     */
    data: XOR<MaterialTypeUpdateManyMutationInput, MaterialTypeUncheckedUpdateManyInput>
    /**
     * Filter which MaterialTypes to update
     */
    where?: MaterialTypeWhereInput
    /**
     * Limit how many MaterialTypes to update.
     */
    limit?: number
  }

  /**
   * MaterialType updateManyAndReturn
   */
  export type MaterialTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * The data used to update MaterialTypes.
     */
    data: XOR<MaterialTypeUpdateManyMutationInput, MaterialTypeUncheckedUpdateManyInput>
    /**
     * Filter which MaterialTypes to update
     */
    where?: MaterialTypeWhereInput
    /**
     * Limit how many MaterialTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialType upsert
   */
  export type MaterialTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the MaterialType to update in case it exists.
     */
    where: MaterialTypeWhereUniqueInput
    /**
     * In case the MaterialType found by the `where` argument doesn't exist, create a new MaterialType with this data.
     */
    create: XOR<MaterialTypeCreateInput, MaterialTypeUncheckedCreateInput>
    /**
     * In case the MaterialType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialTypeUpdateInput, MaterialTypeUncheckedUpdateInput>
  }

  /**
   * MaterialType delete
   */
  export type MaterialTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
    /**
     * Filter which MaterialType to delete.
     */
    where: MaterialTypeWhereUniqueInput
  }

  /**
   * MaterialType deleteMany
   */
  export type MaterialTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialTypes to delete
     */
    where?: MaterialTypeWhereInput
    /**
     * Limit how many MaterialTypes to delete.
     */
    limit?: number
  }

  /**
   * MaterialType.MaterialName
   */
  export type MaterialType$MaterialNameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    where?: MaterialNameWhereInput
    orderBy?: MaterialNameOrderByWithRelationInput | MaterialNameOrderByWithRelationInput[]
    cursor?: MaterialNameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialNameScalarFieldEnum | MaterialNameScalarFieldEnum[]
  }

  /**
   * MaterialType without action
   */
  export type MaterialTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialType
     */
    select?: MaterialTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialType
     */
    omit?: MaterialTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialTypeInclude<ExtArgs> | null
  }


  /**
   * Model MaterialName
   */

  export type AggregateMaterialName = {
    _count: MaterialNameCountAggregateOutputType | null
    _avg: MaterialNameAvgAggregateOutputType | null
    _sum: MaterialNameSumAggregateOutputType | null
    _min: MaterialNameMinAggregateOutputType | null
    _max: MaterialNameMaxAggregateOutputType | null
  }

  export type MaterialNameAvgAggregateOutputType = {
    id: number | null
    degree: number | null
    typeId: number | null
  }

  export type MaterialNameSumAggregateOutputType = {
    id: number | null
    degree: number | null
    typeId: number | null
  }

  export type MaterialNameMinAggregateOutputType = {
    id: number | null
    name: string | null
    dn: string | null
    pn: string | null
    degree: number | null
    description: string | null
    typeId: number | null
  }

  export type MaterialNameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    dn: string | null
    pn: string | null
    degree: number | null
    description: string | null
    typeId: number | null
  }

  export type MaterialNameCountAggregateOutputType = {
    id: number
    name: number
    dn: number
    pn: number
    degree: number
    description: number
    typeId: number
    _all: number
  }


  export type MaterialNameAvgAggregateInputType = {
    id?: true
    degree?: true
    typeId?: true
  }

  export type MaterialNameSumAggregateInputType = {
    id?: true
    degree?: true
    typeId?: true
  }

  export type MaterialNameMinAggregateInputType = {
    id?: true
    name?: true
    dn?: true
    pn?: true
    degree?: true
    description?: true
    typeId?: true
  }

  export type MaterialNameMaxAggregateInputType = {
    id?: true
    name?: true
    dn?: true
    pn?: true
    degree?: true
    description?: true
    typeId?: true
  }

  export type MaterialNameCountAggregateInputType = {
    id?: true
    name?: true
    dn?: true
    pn?: true
    degree?: true
    description?: true
    typeId?: true
    _all?: true
  }

  export type MaterialNameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialName to aggregate.
     */
    where?: MaterialNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNames to fetch.
     */
    orderBy?: MaterialNameOrderByWithRelationInput | MaterialNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaterialNames
    **/
    _count?: true | MaterialNameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialNameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialNameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialNameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialNameMaxAggregateInputType
  }

  export type GetMaterialNameAggregateType<T extends MaterialNameAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterialName]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterialName[P]>
      : GetScalarType<T[P], AggregateMaterialName[P]>
  }




  export type MaterialNameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialNameWhereInput
    orderBy?: MaterialNameOrderByWithAggregationInput | MaterialNameOrderByWithAggregationInput[]
    by: MaterialNameScalarFieldEnum[] | MaterialNameScalarFieldEnum
    having?: MaterialNameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialNameCountAggregateInputType | true
    _avg?: MaterialNameAvgAggregateInputType
    _sum?: MaterialNameSumAggregateInputType
    _min?: MaterialNameMinAggregateInputType
    _max?: MaterialNameMaxAggregateInputType
  }

  export type MaterialNameGroupByOutputType = {
    id: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    typeId: number
    _count: MaterialNameCountAggregateOutputType | null
    _avg: MaterialNameAvgAggregateOutputType | null
    _sum: MaterialNameSumAggregateOutputType | null
    _min: MaterialNameMinAggregateOutputType | null
    _max: MaterialNameMaxAggregateOutputType | null
  }

  type GetMaterialNameGroupByPayload<T extends MaterialNameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialNameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialNameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialNameGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialNameGroupByOutputType[P]>
        }
      >
    >


  export type MaterialNameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dn?: boolean
    pn?: boolean
    degree?: boolean
    description?: boolean
    typeId?: boolean
    type?: boolean | MaterialTypeDefaultArgs<ExtArgs>
    InvoiceItem?: boolean | MaterialName$InvoiceItemArgs<ExtArgs>
    MaterialNeed?: boolean | MaterialName$MaterialNeedArgs<ExtArgs>
    PipelineProgress?: boolean | MaterialName$PipelineProgressArgs<ExtArgs>
    _count?: boolean | MaterialNameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialName"]>

  export type MaterialNameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dn?: boolean
    pn?: boolean
    degree?: boolean
    description?: boolean
    typeId?: boolean
    type?: boolean | MaterialTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialName"]>

  export type MaterialNameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dn?: boolean
    pn?: boolean
    degree?: boolean
    description?: boolean
    typeId?: boolean
    type?: boolean | MaterialTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialName"]>

  export type MaterialNameSelectScalar = {
    id?: boolean
    name?: boolean
    dn?: boolean
    pn?: boolean
    degree?: boolean
    description?: boolean
    typeId?: boolean
  }

  export type MaterialNameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "dn" | "pn" | "degree" | "description" | "typeId", ExtArgs["result"]["materialName"]>
  export type MaterialNameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | MaterialTypeDefaultArgs<ExtArgs>
    InvoiceItem?: boolean | MaterialName$InvoiceItemArgs<ExtArgs>
    MaterialNeed?: boolean | MaterialName$MaterialNeedArgs<ExtArgs>
    PipelineProgress?: boolean | MaterialName$PipelineProgressArgs<ExtArgs>
    _count?: boolean | MaterialNameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaterialNameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | MaterialTypeDefaultArgs<ExtArgs>
  }
  export type MaterialNameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | MaterialTypeDefaultArgs<ExtArgs>
  }

  export type $MaterialNamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaterialName"
    objects: {
      type: Prisma.$MaterialTypePayload<ExtArgs>
      InvoiceItem: Prisma.$InvoiceItemPayload<ExtArgs>[]
      MaterialNeed: Prisma.$MaterialNeedPayload<ExtArgs>[]
      PipelineProgress: Prisma.$PipelineProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      dn: string
      pn: string
      degree: number
      description: string
      typeId: number
    }, ExtArgs["result"]["materialName"]>
    composites: {}
  }

  type MaterialNameGetPayload<S extends boolean | null | undefined | MaterialNameDefaultArgs> = $Result.GetResult<Prisma.$MaterialNamePayload, S>

  type MaterialNameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaterialNameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialNameCountAggregateInputType | true
    }

  export interface MaterialNameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaterialName'], meta: { name: 'MaterialName' } }
    /**
     * Find zero or one MaterialName that matches the filter.
     * @param {MaterialNameFindUniqueArgs} args - Arguments to find a MaterialName
     * @example
     * // Get one MaterialName
     * const materialName = await prisma.materialName.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialNameFindUniqueArgs>(args: SelectSubset<T, MaterialNameFindUniqueArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaterialName that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaterialNameFindUniqueOrThrowArgs} args - Arguments to find a MaterialName
     * @example
     * // Get one MaterialName
     * const materialName = await prisma.materialName.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialNameFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialNameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialName that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNameFindFirstArgs} args - Arguments to find a MaterialName
     * @example
     * // Get one MaterialName
     * const materialName = await prisma.materialName.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialNameFindFirstArgs>(args?: SelectSubset<T, MaterialNameFindFirstArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialName that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNameFindFirstOrThrowArgs} args - Arguments to find a MaterialName
     * @example
     * // Get one MaterialName
     * const materialName = await prisma.materialName.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialNameFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialNameFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaterialNames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaterialNames
     * const materialNames = await prisma.materialName.findMany()
     * 
     * // Get first 10 MaterialNames
     * const materialNames = await prisma.materialName.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialNameWithIdOnly = await prisma.materialName.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialNameFindManyArgs>(args?: SelectSubset<T, MaterialNameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaterialName.
     * @param {MaterialNameCreateArgs} args - Arguments to create a MaterialName.
     * @example
     * // Create one MaterialName
     * const MaterialName = await prisma.materialName.create({
     *   data: {
     *     // ... data to create a MaterialName
     *   }
     * })
     * 
     */
    create<T extends MaterialNameCreateArgs>(args: SelectSubset<T, MaterialNameCreateArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaterialNames.
     * @param {MaterialNameCreateManyArgs} args - Arguments to create many MaterialNames.
     * @example
     * // Create many MaterialNames
     * const materialName = await prisma.materialName.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialNameCreateManyArgs>(args?: SelectSubset<T, MaterialNameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaterialNames and returns the data saved in the database.
     * @param {MaterialNameCreateManyAndReturnArgs} args - Arguments to create many MaterialNames.
     * @example
     * // Create many MaterialNames
     * const materialName = await prisma.materialName.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaterialNames and only return the `id`
     * const materialNameWithIdOnly = await prisma.materialName.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaterialNameCreateManyAndReturnArgs>(args?: SelectSubset<T, MaterialNameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaterialName.
     * @param {MaterialNameDeleteArgs} args - Arguments to delete one MaterialName.
     * @example
     * // Delete one MaterialName
     * const MaterialName = await prisma.materialName.delete({
     *   where: {
     *     // ... filter to delete one MaterialName
     *   }
     * })
     * 
     */
    delete<T extends MaterialNameDeleteArgs>(args: SelectSubset<T, MaterialNameDeleteArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaterialName.
     * @param {MaterialNameUpdateArgs} args - Arguments to update one MaterialName.
     * @example
     * // Update one MaterialName
     * const materialName = await prisma.materialName.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialNameUpdateArgs>(args: SelectSubset<T, MaterialNameUpdateArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaterialNames.
     * @param {MaterialNameDeleteManyArgs} args - Arguments to filter MaterialNames to delete.
     * @example
     * // Delete a few MaterialNames
     * const { count } = await prisma.materialName.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialNameDeleteManyArgs>(args?: SelectSubset<T, MaterialNameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaterialNames
     * const materialName = await prisma.materialName.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialNameUpdateManyArgs>(args: SelectSubset<T, MaterialNameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialNames and returns the data updated in the database.
     * @param {MaterialNameUpdateManyAndReturnArgs} args - Arguments to update many MaterialNames.
     * @example
     * // Update many MaterialNames
     * const materialName = await prisma.materialName.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaterialNames and only return the `id`
     * const materialNameWithIdOnly = await prisma.materialName.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaterialNameUpdateManyAndReturnArgs>(args: SelectSubset<T, MaterialNameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaterialName.
     * @param {MaterialNameUpsertArgs} args - Arguments to update or create a MaterialName.
     * @example
     * // Update or create a MaterialName
     * const materialName = await prisma.materialName.upsert({
     *   create: {
     *     // ... data to create a MaterialName
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaterialName we want to update
     *   }
     * })
     */
    upsert<T extends MaterialNameUpsertArgs>(args: SelectSubset<T, MaterialNameUpsertArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaterialNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNameCountArgs} args - Arguments to filter MaterialNames to count.
     * @example
     * // Count the number of MaterialNames
     * const count = await prisma.materialName.count({
     *   where: {
     *     // ... the filter for the MaterialNames we want to count
     *   }
     * })
    **/
    count<T extends MaterialNameCountArgs>(
      args?: Subset<T, MaterialNameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialNameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaterialName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialNameAggregateArgs>(args: Subset<T, MaterialNameAggregateArgs>): Prisma.PrismaPromise<GetMaterialNameAggregateType<T>>

    /**
     * Group by MaterialName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialNameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialNameGroupByArgs['orderBy'] }
        : { orderBy?: MaterialNameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialNameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialNameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaterialName model
   */
  readonly fields: MaterialNameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaterialName.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialNameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    type<T extends MaterialTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialTypeDefaultArgs<ExtArgs>>): Prisma__MaterialTypeClient<$Result.GetResult<Prisma.$MaterialTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    InvoiceItem<T extends MaterialName$InvoiceItemArgs<ExtArgs> = {}>(args?: Subset<T, MaterialName$InvoiceItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MaterialNeed<T extends MaterialName$MaterialNeedArgs<ExtArgs> = {}>(args?: Subset<T, MaterialName$MaterialNeedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PipelineProgress<T extends MaterialName$PipelineProgressArgs<ExtArgs> = {}>(args?: Subset<T, MaterialName$PipelineProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaterialName model
   */
  interface MaterialNameFieldRefs {
    readonly id: FieldRef<"MaterialName", 'Int'>
    readonly name: FieldRef<"MaterialName", 'String'>
    readonly dn: FieldRef<"MaterialName", 'String'>
    readonly pn: FieldRef<"MaterialName", 'String'>
    readonly degree: FieldRef<"MaterialName", 'Int'>
    readonly description: FieldRef<"MaterialName", 'String'>
    readonly typeId: FieldRef<"MaterialName", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MaterialName findUnique
   */
  export type MaterialNameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * Filter, which MaterialName to fetch.
     */
    where: MaterialNameWhereUniqueInput
  }

  /**
   * MaterialName findUniqueOrThrow
   */
  export type MaterialNameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * Filter, which MaterialName to fetch.
     */
    where: MaterialNameWhereUniqueInput
  }

  /**
   * MaterialName findFirst
   */
  export type MaterialNameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * Filter, which MaterialName to fetch.
     */
    where?: MaterialNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNames to fetch.
     */
    orderBy?: MaterialNameOrderByWithRelationInput | MaterialNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialNames.
     */
    cursor?: MaterialNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialNames.
     */
    distinct?: MaterialNameScalarFieldEnum | MaterialNameScalarFieldEnum[]
  }

  /**
   * MaterialName findFirstOrThrow
   */
  export type MaterialNameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * Filter, which MaterialName to fetch.
     */
    where?: MaterialNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNames to fetch.
     */
    orderBy?: MaterialNameOrderByWithRelationInput | MaterialNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialNames.
     */
    cursor?: MaterialNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialNames.
     */
    distinct?: MaterialNameScalarFieldEnum | MaterialNameScalarFieldEnum[]
  }

  /**
   * MaterialName findMany
   */
  export type MaterialNameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * Filter, which MaterialNames to fetch.
     */
    where?: MaterialNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNames to fetch.
     */
    orderBy?: MaterialNameOrderByWithRelationInput | MaterialNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaterialNames.
     */
    cursor?: MaterialNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNames.
     */
    skip?: number
    distinct?: MaterialNameScalarFieldEnum | MaterialNameScalarFieldEnum[]
  }

  /**
   * MaterialName create
   */
  export type MaterialNameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * The data needed to create a MaterialName.
     */
    data: XOR<MaterialNameCreateInput, MaterialNameUncheckedCreateInput>
  }

  /**
   * MaterialName createMany
   */
  export type MaterialNameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaterialNames.
     */
    data: MaterialNameCreateManyInput | MaterialNameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaterialName createManyAndReturn
   */
  export type MaterialNameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * The data used to create many MaterialNames.
     */
    data: MaterialNameCreateManyInput | MaterialNameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialName update
   */
  export type MaterialNameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * The data needed to update a MaterialName.
     */
    data: XOR<MaterialNameUpdateInput, MaterialNameUncheckedUpdateInput>
    /**
     * Choose, which MaterialName to update.
     */
    where: MaterialNameWhereUniqueInput
  }

  /**
   * MaterialName updateMany
   */
  export type MaterialNameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaterialNames.
     */
    data: XOR<MaterialNameUpdateManyMutationInput, MaterialNameUncheckedUpdateManyInput>
    /**
     * Filter which MaterialNames to update
     */
    where?: MaterialNameWhereInput
    /**
     * Limit how many MaterialNames to update.
     */
    limit?: number
  }

  /**
   * MaterialName updateManyAndReturn
   */
  export type MaterialNameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * The data used to update MaterialNames.
     */
    data: XOR<MaterialNameUpdateManyMutationInput, MaterialNameUncheckedUpdateManyInput>
    /**
     * Filter which MaterialNames to update
     */
    where?: MaterialNameWhereInput
    /**
     * Limit how many MaterialNames to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialName upsert
   */
  export type MaterialNameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * The filter to search for the MaterialName to update in case it exists.
     */
    where: MaterialNameWhereUniqueInput
    /**
     * In case the MaterialName found by the `where` argument doesn't exist, create a new MaterialName with this data.
     */
    create: XOR<MaterialNameCreateInput, MaterialNameUncheckedCreateInput>
    /**
     * In case the MaterialName was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialNameUpdateInput, MaterialNameUncheckedUpdateInput>
  }

  /**
   * MaterialName delete
   */
  export type MaterialNameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
    /**
     * Filter which MaterialName to delete.
     */
    where: MaterialNameWhereUniqueInput
  }

  /**
   * MaterialName deleteMany
   */
  export type MaterialNameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialNames to delete
     */
    where?: MaterialNameWhereInput
    /**
     * Limit how many MaterialNames to delete.
     */
    limit?: number
  }

  /**
   * MaterialName.InvoiceItem
   */
  export type MaterialName$InvoiceItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    cursor?: InvoiceItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * MaterialName.MaterialNeed
   */
  export type MaterialName$MaterialNeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    where?: MaterialNeedWhereInput
    orderBy?: MaterialNeedOrderByWithRelationInput | MaterialNeedOrderByWithRelationInput[]
    cursor?: MaterialNeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialNeedScalarFieldEnum | MaterialNeedScalarFieldEnum[]
  }

  /**
   * MaterialName.PipelineProgress
   */
  export type MaterialName$PipelineProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    where?: PipelineProgressWhereInput
    orderBy?: PipelineProgressOrderByWithRelationInput | PipelineProgressOrderByWithRelationInput[]
    cursor?: PipelineProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineProgressScalarFieldEnum | PipelineProgressScalarFieldEnum[]
  }

  /**
   * MaterialName without action
   */
  export type MaterialNameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialName
     */
    select?: MaterialNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialName
     */
    omit?: MaterialNameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNameInclude<ExtArgs> | null
  }


  /**
   * Model Shipment
   */

  export type AggregateShipment = {
    _count: ShipmentCountAggregateOutputType | null
    _avg: ShipmentAvgAggregateOutputType | null
    _sum: ShipmentSumAggregateOutputType | null
    _min: ShipmentMinAggregateOutputType | null
    _max: ShipmentMaxAggregateOutputType | null
  }

  export type ShipmentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShipmentSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShipmentMinAggregateOutputType = {
    id: number | null
    alias: string | null
    status: $Enums.ShipmentStatus | null
    declaration_number: string | null
    declaration_date: Date | null
    userId: number | null
    createdAt: Date | null
  }

  export type ShipmentMaxAggregateOutputType = {
    id: number | null
    alias: string | null
    status: $Enums.ShipmentStatus | null
    declaration_number: string | null
    declaration_date: Date | null
    userId: number | null
    createdAt: Date | null
  }

  export type ShipmentCountAggregateOutputType = {
    id: number
    alias: number
    status: number
    declaration_number: number
    declaration_date: number
    userId: number
    createdAt: number
    _all: number
  }


  export type ShipmentAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShipmentSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShipmentMinAggregateInputType = {
    id?: true
    alias?: true
    status?: true
    declaration_number?: true
    declaration_date?: true
    userId?: true
    createdAt?: true
  }

  export type ShipmentMaxAggregateInputType = {
    id?: true
    alias?: true
    status?: true
    declaration_number?: true
    declaration_date?: true
    userId?: true
    createdAt?: true
  }

  export type ShipmentCountAggregateInputType = {
    id?: true
    alias?: true
    status?: true
    declaration_number?: true
    declaration_date?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type ShipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipment to aggregate.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shipments
    **/
    _count?: true | ShipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShipmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShipmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShipmentMaxAggregateInputType
  }

  export type GetShipmentAggregateType<T extends ShipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateShipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShipment[P]>
      : GetScalarType<T[P], AggregateShipment[P]>
  }




  export type ShipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipmentWhereInput
    orderBy?: ShipmentOrderByWithAggregationInput | ShipmentOrderByWithAggregationInput[]
    by: ShipmentScalarFieldEnum[] | ShipmentScalarFieldEnum
    having?: ShipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShipmentCountAggregateInputType | true
    _avg?: ShipmentAvgAggregateInputType
    _sum?: ShipmentSumAggregateInputType
    _min?: ShipmentMinAggregateInputType
    _max?: ShipmentMaxAggregateInputType
  }

  export type ShipmentGroupByOutputType = {
    id: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number: string | null
    declaration_date: Date | null
    userId: number
    createdAt: Date
    _count: ShipmentCountAggregateOutputType | null
    _avg: ShipmentAvgAggregateOutputType | null
    _sum: ShipmentSumAggregateOutputType | null
    _min: ShipmentMinAggregateOutputType | null
    _max: ShipmentMaxAggregateOutputType | null
  }

  type GetShipmentGroupByPayload<T extends ShipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShipmentGroupByOutputType[P]>
            : GetScalarType<T[P], ShipmentGroupByOutputType[P]>
        }
      >
    >


  export type ShipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    status?: boolean
    declaration_number?: boolean
    declaration_date?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Files?: boolean | Shipment$FilesArgs<ExtArgs>
    Freights?: boolean | Shipment$FreightsArgs<ExtArgs>
    Invoices?: boolean | Shipment$InvoicesArgs<ExtArgs>
    _count?: boolean | ShipmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipment"]>

  export type ShipmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    status?: boolean
    declaration_number?: boolean
    declaration_date?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipment"]>

  export type ShipmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    status?: boolean
    declaration_number?: boolean
    declaration_date?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipment"]>

  export type ShipmentSelectScalar = {
    id?: boolean
    alias?: boolean
    status?: boolean
    declaration_number?: boolean
    declaration_date?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type ShipmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "alias" | "status" | "declaration_number" | "declaration_date" | "userId" | "createdAt", ExtArgs["result"]["shipment"]>
  export type ShipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Files?: boolean | Shipment$FilesArgs<ExtArgs>
    Freights?: boolean | Shipment$FreightsArgs<ExtArgs>
    Invoices?: boolean | Shipment$InvoicesArgs<ExtArgs>
    _count?: boolean | ShipmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShipmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShipmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shipment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Files: Prisma.$ShipmentFilePayload<ExtArgs>[]
      Freights: Prisma.$FreightPayload<ExtArgs>[]
      Invoices: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      alias: string
      status: $Enums.ShipmentStatus
      declaration_number: string | null
      declaration_date: Date | null
      userId: number
      createdAt: Date
    }, ExtArgs["result"]["shipment"]>
    composites: {}
  }

  type ShipmentGetPayload<S extends boolean | null | undefined | ShipmentDefaultArgs> = $Result.GetResult<Prisma.$ShipmentPayload, S>

  type ShipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShipmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShipmentCountAggregateInputType | true
    }

  export interface ShipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shipment'], meta: { name: 'Shipment' } }
    /**
     * Find zero or one Shipment that matches the filter.
     * @param {ShipmentFindUniqueArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShipmentFindUniqueArgs>(args: SelectSubset<T, ShipmentFindUniqueArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Shipment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShipmentFindUniqueOrThrowArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShipmentFindUniqueOrThrowArgs>(args: SelectSubset<T, ShipmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFindFirstArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShipmentFindFirstArgs>(args?: SelectSubset<T, ShipmentFindFirstArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFindFirstOrThrowArgs} args - Arguments to find a Shipment
     * @example
     * // Get one Shipment
     * const shipment = await prisma.shipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShipmentFindFirstOrThrowArgs>(args?: SelectSubset<T, ShipmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Shipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shipments
     * const shipments = await prisma.shipment.findMany()
     * 
     * // Get first 10 Shipments
     * const shipments = await prisma.shipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shipmentWithIdOnly = await prisma.shipment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShipmentFindManyArgs>(args?: SelectSubset<T, ShipmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Shipment.
     * @param {ShipmentCreateArgs} args - Arguments to create a Shipment.
     * @example
     * // Create one Shipment
     * const Shipment = await prisma.shipment.create({
     *   data: {
     *     // ... data to create a Shipment
     *   }
     * })
     * 
     */
    create<T extends ShipmentCreateArgs>(args: SelectSubset<T, ShipmentCreateArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Shipments.
     * @param {ShipmentCreateManyArgs} args - Arguments to create many Shipments.
     * @example
     * // Create many Shipments
     * const shipment = await prisma.shipment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShipmentCreateManyArgs>(args?: SelectSubset<T, ShipmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shipments and returns the data saved in the database.
     * @param {ShipmentCreateManyAndReturnArgs} args - Arguments to create many Shipments.
     * @example
     * // Create many Shipments
     * const shipment = await prisma.shipment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shipments and only return the `id`
     * const shipmentWithIdOnly = await prisma.shipment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShipmentCreateManyAndReturnArgs>(args?: SelectSubset<T, ShipmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Shipment.
     * @param {ShipmentDeleteArgs} args - Arguments to delete one Shipment.
     * @example
     * // Delete one Shipment
     * const Shipment = await prisma.shipment.delete({
     *   where: {
     *     // ... filter to delete one Shipment
     *   }
     * })
     * 
     */
    delete<T extends ShipmentDeleteArgs>(args: SelectSubset<T, ShipmentDeleteArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Shipment.
     * @param {ShipmentUpdateArgs} args - Arguments to update one Shipment.
     * @example
     * // Update one Shipment
     * const shipment = await prisma.shipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShipmentUpdateArgs>(args: SelectSubset<T, ShipmentUpdateArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Shipments.
     * @param {ShipmentDeleteManyArgs} args - Arguments to filter Shipments to delete.
     * @example
     * // Delete a few Shipments
     * const { count } = await prisma.shipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShipmentDeleteManyArgs>(args?: SelectSubset<T, ShipmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shipments
     * const shipment = await prisma.shipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShipmentUpdateManyArgs>(args: SelectSubset<T, ShipmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shipments and returns the data updated in the database.
     * @param {ShipmentUpdateManyAndReturnArgs} args - Arguments to update many Shipments.
     * @example
     * // Update many Shipments
     * const shipment = await prisma.shipment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Shipments and only return the `id`
     * const shipmentWithIdOnly = await prisma.shipment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShipmentUpdateManyAndReturnArgs>(args: SelectSubset<T, ShipmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Shipment.
     * @param {ShipmentUpsertArgs} args - Arguments to update or create a Shipment.
     * @example
     * // Update or create a Shipment
     * const shipment = await prisma.shipment.upsert({
     *   create: {
     *     // ... data to create a Shipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shipment we want to update
     *   }
     * })
     */
    upsert<T extends ShipmentUpsertArgs>(args: SelectSubset<T, ShipmentUpsertArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Shipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentCountArgs} args - Arguments to filter Shipments to count.
     * @example
     * // Count the number of Shipments
     * const count = await prisma.shipment.count({
     *   where: {
     *     // ... the filter for the Shipments we want to count
     *   }
     * })
    **/
    count<T extends ShipmentCountArgs>(
      args?: Subset<T, ShipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShipmentAggregateArgs>(args: Subset<T, ShipmentAggregateArgs>): Prisma.PrismaPromise<GetShipmentAggregateType<T>>

    /**
     * Group by Shipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShipmentGroupByArgs['orderBy'] }
        : { orderBy?: ShipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shipment model
   */
  readonly fields: ShipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Files<T extends Shipment$FilesArgs<ExtArgs> = {}>(args?: Subset<T, Shipment$FilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Freights<T extends Shipment$FreightsArgs<ExtArgs> = {}>(args?: Subset<T, Shipment$FreightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Invoices<T extends Shipment$InvoicesArgs<ExtArgs> = {}>(args?: Subset<T, Shipment$InvoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shipment model
   */
  interface ShipmentFieldRefs {
    readonly id: FieldRef<"Shipment", 'Int'>
    readonly alias: FieldRef<"Shipment", 'String'>
    readonly status: FieldRef<"Shipment", 'ShipmentStatus'>
    readonly declaration_number: FieldRef<"Shipment", 'String'>
    readonly declaration_date: FieldRef<"Shipment", 'DateTime'>
    readonly userId: FieldRef<"Shipment", 'Int'>
    readonly createdAt: FieldRef<"Shipment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Shipment findUnique
   */
  export type ShipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where: ShipmentWhereUniqueInput
  }

  /**
   * Shipment findUniqueOrThrow
   */
  export type ShipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where: ShipmentWhereUniqueInput
  }

  /**
   * Shipment findFirst
   */
  export type ShipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipments.
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipments.
     */
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }

  /**
   * Shipment findFirstOrThrow
   */
  export type ShipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipment to fetch.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shipments.
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shipments.
     */
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }

  /**
   * Shipment findMany
   */
  export type ShipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter, which Shipments to fetch.
     */
    where?: ShipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shipments to fetch.
     */
    orderBy?: ShipmentOrderByWithRelationInput | ShipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shipments.
     */
    cursor?: ShipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shipments.
     */
    skip?: number
    distinct?: ShipmentScalarFieldEnum | ShipmentScalarFieldEnum[]
  }

  /**
   * Shipment create
   */
  export type ShipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Shipment.
     */
    data: XOR<ShipmentCreateInput, ShipmentUncheckedCreateInput>
  }

  /**
   * Shipment createMany
   */
  export type ShipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shipments.
     */
    data: ShipmentCreateManyInput | ShipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shipment createManyAndReturn
   */
  export type ShipmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * The data used to create many Shipments.
     */
    data: ShipmentCreateManyInput | ShipmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shipment update
   */
  export type ShipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Shipment.
     */
    data: XOR<ShipmentUpdateInput, ShipmentUncheckedUpdateInput>
    /**
     * Choose, which Shipment to update.
     */
    where: ShipmentWhereUniqueInput
  }

  /**
   * Shipment updateMany
   */
  export type ShipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shipments.
     */
    data: XOR<ShipmentUpdateManyMutationInput, ShipmentUncheckedUpdateManyInput>
    /**
     * Filter which Shipments to update
     */
    where?: ShipmentWhereInput
    /**
     * Limit how many Shipments to update.
     */
    limit?: number
  }

  /**
   * Shipment updateManyAndReturn
   */
  export type ShipmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * The data used to update Shipments.
     */
    data: XOR<ShipmentUpdateManyMutationInput, ShipmentUncheckedUpdateManyInput>
    /**
     * Filter which Shipments to update
     */
    where?: ShipmentWhereInput
    /**
     * Limit how many Shipments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shipment upsert
   */
  export type ShipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Shipment to update in case it exists.
     */
    where: ShipmentWhereUniqueInput
    /**
     * In case the Shipment found by the `where` argument doesn't exist, create a new Shipment with this data.
     */
    create: XOR<ShipmentCreateInput, ShipmentUncheckedCreateInput>
    /**
     * In case the Shipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShipmentUpdateInput, ShipmentUncheckedUpdateInput>
  }

  /**
   * Shipment delete
   */
  export type ShipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
    /**
     * Filter which Shipment to delete.
     */
    where: ShipmentWhereUniqueInput
  }

  /**
   * Shipment deleteMany
   */
  export type ShipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipments to delete
     */
    where?: ShipmentWhereInput
    /**
     * Limit how many Shipments to delete.
     */
    limit?: number
  }

  /**
   * Shipment.Files
   */
  export type Shipment$FilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    where?: ShipmentFileWhereInput
    orderBy?: ShipmentFileOrderByWithRelationInput | ShipmentFileOrderByWithRelationInput[]
    cursor?: ShipmentFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShipmentFileScalarFieldEnum | ShipmentFileScalarFieldEnum[]
  }

  /**
   * Shipment.Freights
   */
  export type Shipment$FreightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    where?: FreightWhereInput
    orderBy?: FreightOrderByWithRelationInput | FreightOrderByWithRelationInput[]
    cursor?: FreightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FreightScalarFieldEnum | FreightScalarFieldEnum[]
  }

  /**
   * Shipment.Invoices
   */
  export type Shipment$InvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Shipment without action
   */
  export type ShipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipment
     */
    select?: ShipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipment
     */
    omit?: ShipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentInclude<ExtArgs> | null
  }


  /**
   * Model ShipmentFile
   */

  export type AggregateShipmentFile = {
    _count: ShipmentFileCountAggregateOutputType | null
    _avg: ShipmentFileAvgAggregateOutputType | null
    _sum: ShipmentFileSumAggregateOutputType | null
    _min: ShipmentFileMinAggregateOutputType | null
    _max: ShipmentFileMaxAggregateOutputType | null
  }

  export type ShipmentFileAvgAggregateOutputType = {
    id: number | null
    shipmentId: number | null
  }

  export type ShipmentFileSumAggregateOutputType = {
    id: number | null
    shipmentId: number | null
  }

  export type ShipmentFileMinAggregateOutputType = {
    id: number | null
    shipmentId: number | null
    fileName: string | null
    fileType: string | null
    fileData: Uint8Array | null
  }

  export type ShipmentFileMaxAggregateOutputType = {
    id: number | null
    shipmentId: number | null
    fileName: string | null
    fileType: string | null
    fileData: Uint8Array | null
  }

  export type ShipmentFileCountAggregateOutputType = {
    id: number
    shipmentId: number
    fileName: number
    fileType: number
    fileData: number
    _all: number
  }


  export type ShipmentFileAvgAggregateInputType = {
    id?: true
    shipmentId?: true
  }

  export type ShipmentFileSumAggregateInputType = {
    id?: true
    shipmentId?: true
  }

  export type ShipmentFileMinAggregateInputType = {
    id?: true
    shipmentId?: true
    fileName?: true
    fileType?: true
    fileData?: true
  }

  export type ShipmentFileMaxAggregateInputType = {
    id?: true
    shipmentId?: true
    fileName?: true
    fileType?: true
    fileData?: true
  }

  export type ShipmentFileCountAggregateInputType = {
    id?: true
    shipmentId?: true
    fileName?: true
    fileType?: true
    fileData?: true
    _all?: true
  }

  export type ShipmentFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShipmentFile to aggregate.
     */
    where?: ShipmentFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShipmentFiles to fetch.
     */
    orderBy?: ShipmentFileOrderByWithRelationInput | ShipmentFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShipmentFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShipmentFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShipmentFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShipmentFiles
    **/
    _count?: true | ShipmentFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShipmentFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShipmentFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShipmentFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShipmentFileMaxAggregateInputType
  }

  export type GetShipmentFileAggregateType<T extends ShipmentFileAggregateArgs> = {
        [P in keyof T & keyof AggregateShipmentFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShipmentFile[P]>
      : GetScalarType<T[P], AggregateShipmentFile[P]>
  }




  export type ShipmentFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipmentFileWhereInput
    orderBy?: ShipmentFileOrderByWithAggregationInput | ShipmentFileOrderByWithAggregationInput[]
    by: ShipmentFileScalarFieldEnum[] | ShipmentFileScalarFieldEnum
    having?: ShipmentFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShipmentFileCountAggregateInputType | true
    _avg?: ShipmentFileAvgAggregateInputType
    _sum?: ShipmentFileSumAggregateInputType
    _min?: ShipmentFileMinAggregateInputType
    _max?: ShipmentFileMaxAggregateInputType
  }

  export type ShipmentFileGroupByOutputType = {
    id: number
    shipmentId: number
    fileName: string
    fileType: string | null
    fileData: Uint8Array | null
    _count: ShipmentFileCountAggregateOutputType | null
    _avg: ShipmentFileAvgAggregateOutputType | null
    _sum: ShipmentFileSumAggregateOutputType | null
    _min: ShipmentFileMinAggregateOutputType | null
    _max: ShipmentFileMaxAggregateOutputType | null
  }

  type GetShipmentFileGroupByPayload<T extends ShipmentFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShipmentFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShipmentFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShipmentFileGroupByOutputType[P]>
            : GetScalarType<T[P], ShipmentFileGroupByOutputType[P]>
        }
      >
    >


  export type ShipmentFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shipmentId?: boolean
    fileName?: boolean
    fileType?: boolean
    fileData?: boolean
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipmentFile"]>

  export type ShipmentFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shipmentId?: boolean
    fileName?: boolean
    fileType?: boolean
    fileData?: boolean
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipmentFile"]>

  export type ShipmentFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shipmentId?: boolean
    fileName?: boolean
    fileType?: boolean
    fileData?: boolean
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipmentFile"]>

  export type ShipmentFileSelectScalar = {
    id?: boolean
    shipmentId?: boolean
    fileName?: boolean
    fileType?: boolean
    fileData?: boolean
  }

  export type ShipmentFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shipmentId" | "fileName" | "fileType" | "fileData", ExtArgs["result"]["shipmentFile"]>
  export type ShipmentFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }
  export type ShipmentFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }
  export type ShipmentFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }

  export type $ShipmentFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShipmentFile"
    objects: {
      shipment: Prisma.$ShipmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shipmentId: number
      fileName: string
      fileType: string | null
      fileData: Uint8Array | null
    }, ExtArgs["result"]["shipmentFile"]>
    composites: {}
  }

  type ShipmentFileGetPayload<S extends boolean | null | undefined | ShipmentFileDefaultArgs> = $Result.GetResult<Prisma.$ShipmentFilePayload, S>

  type ShipmentFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShipmentFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShipmentFileCountAggregateInputType | true
    }

  export interface ShipmentFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShipmentFile'], meta: { name: 'ShipmentFile' } }
    /**
     * Find zero or one ShipmentFile that matches the filter.
     * @param {ShipmentFileFindUniqueArgs} args - Arguments to find a ShipmentFile
     * @example
     * // Get one ShipmentFile
     * const shipmentFile = await prisma.shipmentFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShipmentFileFindUniqueArgs>(args: SelectSubset<T, ShipmentFileFindUniqueArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShipmentFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShipmentFileFindUniqueOrThrowArgs} args - Arguments to find a ShipmentFile
     * @example
     * // Get one ShipmentFile
     * const shipmentFile = await prisma.shipmentFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShipmentFileFindUniqueOrThrowArgs>(args: SelectSubset<T, ShipmentFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShipmentFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFileFindFirstArgs} args - Arguments to find a ShipmentFile
     * @example
     * // Get one ShipmentFile
     * const shipmentFile = await prisma.shipmentFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShipmentFileFindFirstArgs>(args?: SelectSubset<T, ShipmentFileFindFirstArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShipmentFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFileFindFirstOrThrowArgs} args - Arguments to find a ShipmentFile
     * @example
     * // Get one ShipmentFile
     * const shipmentFile = await prisma.shipmentFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShipmentFileFindFirstOrThrowArgs>(args?: SelectSubset<T, ShipmentFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShipmentFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShipmentFiles
     * const shipmentFiles = await prisma.shipmentFile.findMany()
     * 
     * // Get first 10 ShipmentFiles
     * const shipmentFiles = await prisma.shipmentFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shipmentFileWithIdOnly = await prisma.shipmentFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShipmentFileFindManyArgs>(args?: SelectSubset<T, ShipmentFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShipmentFile.
     * @param {ShipmentFileCreateArgs} args - Arguments to create a ShipmentFile.
     * @example
     * // Create one ShipmentFile
     * const ShipmentFile = await prisma.shipmentFile.create({
     *   data: {
     *     // ... data to create a ShipmentFile
     *   }
     * })
     * 
     */
    create<T extends ShipmentFileCreateArgs>(args: SelectSubset<T, ShipmentFileCreateArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShipmentFiles.
     * @param {ShipmentFileCreateManyArgs} args - Arguments to create many ShipmentFiles.
     * @example
     * // Create many ShipmentFiles
     * const shipmentFile = await prisma.shipmentFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShipmentFileCreateManyArgs>(args?: SelectSubset<T, ShipmentFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShipmentFiles and returns the data saved in the database.
     * @param {ShipmentFileCreateManyAndReturnArgs} args - Arguments to create many ShipmentFiles.
     * @example
     * // Create many ShipmentFiles
     * const shipmentFile = await prisma.shipmentFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShipmentFiles and only return the `id`
     * const shipmentFileWithIdOnly = await prisma.shipmentFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShipmentFileCreateManyAndReturnArgs>(args?: SelectSubset<T, ShipmentFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShipmentFile.
     * @param {ShipmentFileDeleteArgs} args - Arguments to delete one ShipmentFile.
     * @example
     * // Delete one ShipmentFile
     * const ShipmentFile = await prisma.shipmentFile.delete({
     *   where: {
     *     // ... filter to delete one ShipmentFile
     *   }
     * })
     * 
     */
    delete<T extends ShipmentFileDeleteArgs>(args: SelectSubset<T, ShipmentFileDeleteArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShipmentFile.
     * @param {ShipmentFileUpdateArgs} args - Arguments to update one ShipmentFile.
     * @example
     * // Update one ShipmentFile
     * const shipmentFile = await prisma.shipmentFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShipmentFileUpdateArgs>(args: SelectSubset<T, ShipmentFileUpdateArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShipmentFiles.
     * @param {ShipmentFileDeleteManyArgs} args - Arguments to filter ShipmentFiles to delete.
     * @example
     * // Delete a few ShipmentFiles
     * const { count } = await prisma.shipmentFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShipmentFileDeleteManyArgs>(args?: SelectSubset<T, ShipmentFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShipmentFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShipmentFiles
     * const shipmentFile = await prisma.shipmentFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShipmentFileUpdateManyArgs>(args: SelectSubset<T, ShipmentFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShipmentFiles and returns the data updated in the database.
     * @param {ShipmentFileUpdateManyAndReturnArgs} args - Arguments to update many ShipmentFiles.
     * @example
     * // Update many ShipmentFiles
     * const shipmentFile = await prisma.shipmentFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShipmentFiles and only return the `id`
     * const shipmentFileWithIdOnly = await prisma.shipmentFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShipmentFileUpdateManyAndReturnArgs>(args: SelectSubset<T, ShipmentFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShipmentFile.
     * @param {ShipmentFileUpsertArgs} args - Arguments to update or create a ShipmentFile.
     * @example
     * // Update or create a ShipmentFile
     * const shipmentFile = await prisma.shipmentFile.upsert({
     *   create: {
     *     // ... data to create a ShipmentFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShipmentFile we want to update
     *   }
     * })
     */
    upsert<T extends ShipmentFileUpsertArgs>(args: SelectSubset<T, ShipmentFileUpsertArgs<ExtArgs>>): Prisma__ShipmentFileClient<$Result.GetResult<Prisma.$ShipmentFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShipmentFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFileCountArgs} args - Arguments to filter ShipmentFiles to count.
     * @example
     * // Count the number of ShipmentFiles
     * const count = await prisma.shipmentFile.count({
     *   where: {
     *     // ... the filter for the ShipmentFiles we want to count
     *   }
     * })
    **/
    count<T extends ShipmentFileCountArgs>(
      args?: Subset<T, ShipmentFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShipmentFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShipmentFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShipmentFileAggregateArgs>(args: Subset<T, ShipmentFileAggregateArgs>): Prisma.PrismaPromise<GetShipmentFileAggregateType<T>>

    /**
     * Group by ShipmentFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipmentFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShipmentFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShipmentFileGroupByArgs['orderBy'] }
        : { orderBy?: ShipmentFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShipmentFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipmentFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShipmentFile model
   */
  readonly fields: ShipmentFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShipmentFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShipmentFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shipment<T extends ShipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShipmentDefaultArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShipmentFile model
   */
  interface ShipmentFileFieldRefs {
    readonly id: FieldRef<"ShipmentFile", 'Int'>
    readonly shipmentId: FieldRef<"ShipmentFile", 'Int'>
    readonly fileName: FieldRef<"ShipmentFile", 'String'>
    readonly fileType: FieldRef<"ShipmentFile", 'String'>
    readonly fileData: FieldRef<"ShipmentFile", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * ShipmentFile findUnique
   */
  export type ShipmentFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * Filter, which ShipmentFile to fetch.
     */
    where: ShipmentFileWhereUniqueInput
  }

  /**
   * ShipmentFile findUniqueOrThrow
   */
  export type ShipmentFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * Filter, which ShipmentFile to fetch.
     */
    where: ShipmentFileWhereUniqueInput
  }

  /**
   * ShipmentFile findFirst
   */
  export type ShipmentFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * Filter, which ShipmentFile to fetch.
     */
    where?: ShipmentFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShipmentFiles to fetch.
     */
    orderBy?: ShipmentFileOrderByWithRelationInput | ShipmentFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShipmentFiles.
     */
    cursor?: ShipmentFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShipmentFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShipmentFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShipmentFiles.
     */
    distinct?: ShipmentFileScalarFieldEnum | ShipmentFileScalarFieldEnum[]
  }

  /**
   * ShipmentFile findFirstOrThrow
   */
  export type ShipmentFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * Filter, which ShipmentFile to fetch.
     */
    where?: ShipmentFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShipmentFiles to fetch.
     */
    orderBy?: ShipmentFileOrderByWithRelationInput | ShipmentFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShipmentFiles.
     */
    cursor?: ShipmentFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShipmentFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShipmentFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShipmentFiles.
     */
    distinct?: ShipmentFileScalarFieldEnum | ShipmentFileScalarFieldEnum[]
  }

  /**
   * ShipmentFile findMany
   */
  export type ShipmentFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * Filter, which ShipmentFiles to fetch.
     */
    where?: ShipmentFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShipmentFiles to fetch.
     */
    orderBy?: ShipmentFileOrderByWithRelationInput | ShipmentFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShipmentFiles.
     */
    cursor?: ShipmentFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShipmentFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShipmentFiles.
     */
    skip?: number
    distinct?: ShipmentFileScalarFieldEnum | ShipmentFileScalarFieldEnum[]
  }

  /**
   * ShipmentFile create
   */
  export type ShipmentFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * The data needed to create a ShipmentFile.
     */
    data: XOR<ShipmentFileCreateInput, ShipmentFileUncheckedCreateInput>
  }

  /**
   * ShipmentFile createMany
   */
  export type ShipmentFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShipmentFiles.
     */
    data: ShipmentFileCreateManyInput | ShipmentFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShipmentFile createManyAndReturn
   */
  export type ShipmentFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * The data used to create many ShipmentFiles.
     */
    data: ShipmentFileCreateManyInput | ShipmentFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShipmentFile update
   */
  export type ShipmentFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * The data needed to update a ShipmentFile.
     */
    data: XOR<ShipmentFileUpdateInput, ShipmentFileUncheckedUpdateInput>
    /**
     * Choose, which ShipmentFile to update.
     */
    where: ShipmentFileWhereUniqueInput
  }

  /**
   * ShipmentFile updateMany
   */
  export type ShipmentFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShipmentFiles.
     */
    data: XOR<ShipmentFileUpdateManyMutationInput, ShipmentFileUncheckedUpdateManyInput>
    /**
     * Filter which ShipmentFiles to update
     */
    where?: ShipmentFileWhereInput
    /**
     * Limit how many ShipmentFiles to update.
     */
    limit?: number
  }

  /**
   * ShipmentFile updateManyAndReturn
   */
  export type ShipmentFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * The data used to update ShipmentFiles.
     */
    data: XOR<ShipmentFileUpdateManyMutationInput, ShipmentFileUncheckedUpdateManyInput>
    /**
     * Filter which ShipmentFiles to update
     */
    where?: ShipmentFileWhereInput
    /**
     * Limit how many ShipmentFiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShipmentFile upsert
   */
  export type ShipmentFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * The filter to search for the ShipmentFile to update in case it exists.
     */
    where: ShipmentFileWhereUniqueInput
    /**
     * In case the ShipmentFile found by the `where` argument doesn't exist, create a new ShipmentFile with this data.
     */
    create: XOR<ShipmentFileCreateInput, ShipmentFileUncheckedCreateInput>
    /**
     * In case the ShipmentFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShipmentFileUpdateInput, ShipmentFileUncheckedUpdateInput>
  }

  /**
   * ShipmentFile delete
   */
  export type ShipmentFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
    /**
     * Filter which ShipmentFile to delete.
     */
    where: ShipmentFileWhereUniqueInput
  }

  /**
   * ShipmentFile deleteMany
   */
  export type ShipmentFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShipmentFiles to delete
     */
    where?: ShipmentFileWhereInput
    /**
     * Limit how many ShipmentFiles to delete.
     */
    limit?: number
  }

  /**
   * ShipmentFile without action
   */
  export type ShipmentFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipmentFile
     */
    select?: ShipmentFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShipmentFile
     */
    omit?: ShipmentFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipmentFileInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    vendorId: number | null
    totalAmount: Decimal | null
    userId: number | null
    currencyId: number | null
    shipmentId: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    vendorId: number | null
    totalAmount: Decimal | null
    userId: number | null
    currencyId: number | null
    shipmentId: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    vendorId: number | null
    invoiceNumber: string | null
    invoiceDate: Date | null
    totalAmount: Decimal | null
    isArrived: boolean | null
    userId: number | null
    createdAt: Date | null
    currencyId: number | null
    shipmentId: number | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    vendorId: number | null
    invoiceNumber: string | null
    invoiceDate: Date | null
    totalAmount: Decimal | null
    isArrived: boolean | null
    userId: number | null
    createdAt: Date | null
    currencyId: number | null
    shipmentId: number | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    vendorId: number
    invoiceNumber: number
    invoiceDate: number
    totalAmount: number
    isArrived: number
    userId: number
    createdAt: number
    currencyId: number
    shipmentId: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    vendorId?: true
    totalAmount?: true
    userId?: true
    currencyId?: true
    shipmentId?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    vendorId?: true
    totalAmount?: true
    userId?: true
    currencyId?: true
    shipmentId?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    vendorId?: true
    invoiceNumber?: true
    invoiceDate?: true
    totalAmount?: true
    isArrived?: true
    userId?: true
    createdAt?: true
    currencyId?: true
    shipmentId?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    vendorId?: true
    invoiceNumber?: true
    invoiceDate?: true
    totalAmount?: true
    isArrived?: true
    userId?: true
    createdAt?: true
    currencyId?: true
    shipmentId?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    vendorId?: true
    invoiceNumber?: true
    invoiceDate?: true
    totalAmount?: true
    isArrived?: true
    userId?: true
    createdAt?: true
    currencyId?: true
    shipmentId?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date
    totalAmount: Decimal
    isArrived: boolean | null
    userId: number
    createdAt: Date
    currencyId: number
    shipmentId: number
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    invoiceNumber?: boolean
    invoiceDate?: boolean
    totalAmount?: boolean
    isArrived?: boolean
    userId?: boolean
    createdAt?: boolean
    currencyId?: boolean
    shipmentId?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    Items?: boolean | Invoice$ItemsArgs<ExtArgs>
    Freights?: boolean | Invoice$FreightsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    invoiceNumber?: boolean
    invoiceDate?: boolean
    totalAmount?: boolean
    isArrived?: boolean
    userId?: boolean
    createdAt?: boolean
    currencyId?: boolean
    shipmentId?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    invoiceNumber?: boolean
    invoiceDate?: boolean
    totalAmount?: boolean
    isArrived?: boolean
    userId?: boolean
    createdAt?: boolean
    currencyId?: boolean
    shipmentId?: boolean
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    vendorId?: boolean
    invoiceNumber?: boolean
    invoiceDate?: boolean
    totalAmount?: boolean
    isArrived?: boolean
    userId?: boolean
    createdAt?: boolean
    currencyId?: boolean
    shipmentId?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "vendorId" | "invoiceNumber" | "invoiceDate" | "totalAmount" | "isArrived" | "userId" | "createdAt" | "currencyId" | "shipmentId", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    Items?: boolean | Invoice$ItemsArgs<ExtArgs>
    Freights?: boolean | Invoice$FreightsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      vendor: Prisma.$VendorPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      currency: Prisma.$CurrencyPayload<ExtArgs>
      shipment: Prisma.$ShipmentPayload<ExtArgs>
      Items: Prisma.$InvoiceItemPayload<ExtArgs>[]
      Freights: Prisma.$FreightInvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      vendorId: number
      invoiceNumber: string
      invoiceDate: Date
      totalAmount: Prisma.Decimal
      isArrived: boolean | null
      userId: number
      createdAt: Date
      currencyId: number
      shipmentId: number
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends VendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendorDefaultArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currency<T extends CurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyDefaultArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shipment<T extends ShipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShipmentDefaultArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Items<T extends Invoice$ItemsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$ItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Freights<T extends Invoice$FreightsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$FreightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'Int'>
    readonly vendorId: FieldRef<"Invoice", 'Int'>
    readonly invoiceNumber: FieldRef<"Invoice", 'String'>
    readonly invoiceDate: FieldRef<"Invoice", 'DateTime'>
    readonly totalAmount: FieldRef<"Invoice", 'Decimal'>
    readonly isArrived: FieldRef<"Invoice", 'Boolean'>
    readonly userId: FieldRef<"Invoice", 'Int'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly currencyId: FieldRef<"Invoice", 'Int'>
    readonly shipmentId: FieldRef<"Invoice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice.Items
   */
  export type Invoice$ItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    cursor?: InvoiceItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * Invoice.Freights
   */
  export type Invoice$FreightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    where?: FreightInvoiceWhereInput
    orderBy?: FreightInvoiceOrderByWithRelationInput | FreightInvoiceOrderByWithRelationInput[]
    cursor?: FreightInvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FreightInvoiceScalarFieldEnum | FreightInvoiceScalarFieldEnum[]
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model InvoiceItem
   */

  export type AggregateInvoiceItem = {
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  export type InvoiceItemAvgAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    productId: number | null
    quantity: Decimal | null
    unitId: number | null
    unitPrice: Decimal | null
    total: Decimal | null
  }

  export type InvoiceItemSumAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    productId: number | null
    quantity: Decimal | null
    unitId: number | null
    unitPrice: Decimal | null
    total: Decimal | null
  }

  export type InvoiceItemMinAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    productId: number | null
    description: string | null
    quantity: Decimal | null
    unitId: number | null
    unitPrice: Decimal | null
    total: Decimal | null
  }

  export type InvoiceItemMaxAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    productId: number | null
    description: string | null
    quantity: Decimal | null
    unitId: number | null
    unitPrice: Decimal | null
    total: Decimal | null
  }

  export type InvoiceItemCountAggregateOutputType = {
    id: number
    invoiceId: number
    productId: number
    description: number
    quantity: number
    unitId: number
    unitPrice: number
    total: number
    _all: number
  }


  export type InvoiceItemAvgAggregateInputType = {
    id?: true
    invoiceId?: true
    productId?: true
    quantity?: true
    unitId?: true
    unitPrice?: true
    total?: true
  }

  export type InvoiceItemSumAggregateInputType = {
    id?: true
    invoiceId?: true
    productId?: true
    quantity?: true
    unitId?: true
    unitPrice?: true
    total?: true
  }

  export type InvoiceItemMinAggregateInputType = {
    id?: true
    invoiceId?: true
    productId?: true
    description?: true
    quantity?: true
    unitId?: true
    unitPrice?: true
    total?: true
  }

  export type InvoiceItemMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    productId?: true
    description?: true
    quantity?: true
    unitId?: true
    unitPrice?: true
    total?: true
  }

  export type InvoiceItemCountAggregateInputType = {
    id?: true
    invoiceId?: true
    productId?: true
    description?: true
    quantity?: true
    unitId?: true
    unitPrice?: true
    total?: true
    _all?: true
  }

  export type InvoiceItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItem to aggregate.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceItems
    **/
    _count?: true | InvoiceItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type GetInvoiceItemAggregateType<T extends InvoiceItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceItem[P]>
      : GetScalarType<T[P], AggregateInvoiceItem[P]>
  }




  export type InvoiceItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithAggregationInput | InvoiceItemOrderByWithAggregationInput[]
    by: InvoiceItemScalarFieldEnum[] | InvoiceItemScalarFieldEnum
    having?: InvoiceItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceItemCountAggregateInputType | true
    _avg?: InvoiceItemAvgAggregateInputType
    _sum?: InvoiceItemSumAggregateInputType
    _min?: InvoiceItemMinAggregateInputType
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type InvoiceItemGroupByOutputType = {
    id: number
    invoiceId: number
    productId: number
    description: string
    quantity: Decimal
    unitId: number
    unitPrice: Decimal
    total: Decimal
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  type GetInvoiceItemGroupByPayload<T extends InvoiceItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    productId?: boolean
    description?: boolean
    quantity?: boolean
    unitId?: boolean
    unitPrice?: boolean
    total?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    productId?: boolean
    description?: boolean
    quantity?: boolean
    unitId?: boolean
    unitPrice?: boolean
    total?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    productId?: boolean
    description?: boolean
    quantity?: boolean
    unitId?: boolean
    unitPrice?: boolean
    total?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    productId?: boolean
    description?: boolean
    quantity?: boolean
    unitId?: boolean
    unitPrice?: boolean
    total?: boolean
  }

  export type InvoiceItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "productId" | "description" | "quantity" | "unitId" | "unitPrice" | "total", ExtArgs["result"]["invoiceItem"]>
  export type InvoiceItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
  }

  export type $InvoiceItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvoiceItem"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
      product: Prisma.$MaterialNamePayload<ExtArgs>
      unit: Prisma.$UnitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      invoiceId: number
      productId: number
      description: string
      quantity: Prisma.Decimal
      unitId: number
      unitPrice: Prisma.Decimal
      total: Prisma.Decimal
    }, ExtArgs["result"]["invoiceItem"]>
    composites: {}
  }

  type InvoiceItemGetPayload<S extends boolean | null | undefined | InvoiceItemDefaultArgs> = $Result.GetResult<Prisma.$InvoiceItemPayload, S>

  type InvoiceItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceItemCountAggregateInputType | true
    }

  export interface InvoiceItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvoiceItem'], meta: { name: 'InvoiceItem' } }
    /**
     * Find zero or one InvoiceItem that matches the filter.
     * @param {InvoiceItemFindUniqueArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceItemFindUniqueArgs>(args: SelectSubset<T, InvoiceItemFindUniqueArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InvoiceItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceItemFindUniqueOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceItemFindFirstArgs>(args?: SelectSubset<T, InvoiceItemFindFirstArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InvoiceItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany()
     * 
     * // Get first 10 InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceItemFindManyArgs>(args?: SelectSubset<T, InvoiceItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InvoiceItem.
     * @param {InvoiceItemCreateArgs} args - Arguments to create a InvoiceItem.
     * @example
     * // Create one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.create({
     *   data: {
     *     // ... data to create a InvoiceItem
     *   }
     * })
     * 
     */
    create<T extends InvoiceItemCreateArgs>(args: SelectSubset<T, InvoiceItemCreateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InvoiceItems.
     * @param {InvoiceItemCreateManyArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceItemCreateManyArgs>(args?: SelectSubset<T, InvoiceItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InvoiceItems and returns the data saved in the database.
     * @param {InvoiceItemCreateManyAndReturnArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InvoiceItem.
     * @param {InvoiceItemDeleteArgs} args - Arguments to delete one InvoiceItem.
     * @example
     * // Delete one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.delete({
     *   where: {
     *     // ... filter to delete one InvoiceItem
     *   }
     * })
     * 
     */
    delete<T extends InvoiceItemDeleteArgs>(args: SelectSubset<T, InvoiceItemDeleteArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InvoiceItem.
     * @param {InvoiceItemUpdateArgs} args - Arguments to update one InvoiceItem.
     * @example
     * // Update one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceItemUpdateArgs>(args: SelectSubset<T, InvoiceItemUpdateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InvoiceItems.
     * @param {InvoiceItemDeleteManyArgs} args - Arguments to filter InvoiceItems to delete.
     * @example
     * // Delete a few InvoiceItems
     * const { count } = await prisma.invoiceItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceItemDeleteManyArgs>(args?: SelectSubset<T, InvoiceItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceItemUpdateManyArgs>(args: SelectSubset<T, InvoiceItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems and returns the data updated in the database.
     * @param {InvoiceItemUpdateManyAndReturnArgs} args - Arguments to update many InvoiceItems.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceItemUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InvoiceItem.
     * @param {InvoiceItemUpsertArgs} args - Arguments to update or create a InvoiceItem.
     * @example
     * // Update or create a InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.upsert({
     *   create: {
     *     // ... data to create a InvoiceItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceItem we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceItemUpsertArgs>(args: SelectSubset<T, InvoiceItemUpsertArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemCountArgs} args - Arguments to filter InvoiceItems to count.
     * @example
     * // Count the number of InvoiceItems
     * const count = await prisma.invoiceItem.count({
     *   where: {
     *     // ... the filter for the InvoiceItems we want to count
     *   }
     * })
    **/
    count<T extends InvoiceItemCountArgs>(
      args?: Subset<T, InvoiceItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceItemAggregateArgs>(args: Subset<T, InvoiceItemAggregateArgs>): Prisma.PrismaPromise<GetInvoiceItemAggregateType<T>>

    /**
     * Group by InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceItemGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvoiceItem model
   */
  readonly fields: InvoiceItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends MaterialNameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialNameDefaultArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    unit<T extends UnitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitDefaultArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InvoiceItem model
   */
  interface InvoiceItemFieldRefs {
    readonly id: FieldRef<"InvoiceItem", 'Int'>
    readonly invoiceId: FieldRef<"InvoiceItem", 'Int'>
    readonly productId: FieldRef<"InvoiceItem", 'Int'>
    readonly description: FieldRef<"InvoiceItem", 'String'>
    readonly quantity: FieldRef<"InvoiceItem", 'Decimal'>
    readonly unitId: FieldRef<"InvoiceItem", 'Int'>
    readonly unitPrice: FieldRef<"InvoiceItem", 'Decimal'>
    readonly total: FieldRef<"InvoiceItem", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * InvoiceItem findUnique
   */
  export type InvoiceItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findUniqueOrThrow
   */
  export type InvoiceItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findFirst
   */
  export type InvoiceItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findFirstOrThrow
   */
  export type InvoiceItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findMany
   */
  export type InvoiceItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItems to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem create
   */
  export type InvoiceItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InvoiceItem.
     */
    data: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
  }

  /**
   * InvoiceItem createMany
   */
  export type InvoiceItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InvoiceItem createManyAndReturn
   */
  export type InvoiceItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem update
   */
  export type InvoiceItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InvoiceItem.
     */
    data: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
    /**
     * Choose, which InvoiceItem to update.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem updateMany
   */
  export type InvoiceItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
  }

  /**
   * InvoiceItem updateManyAndReturn
   */
  export type InvoiceItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem upsert
   */
  export type InvoiceItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InvoiceItem to update in case it exists.
     */
    where: InvoiceItemWhereUniqueInput
    /**
     * In case the InvoiceItem found by the `where` argument doesn't exist, create a new InvoiceItem with this data.
     */
    create: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
    /**
     * In case the InvoiceItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
  }

  /**
   * InvoiceItem delete
   */
  export type InvoiceItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter which InvoiceItem to delete.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem deleteMany
   */
  export type InvoiceItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItems to delete
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to delete.
     */
    limit?: number
  }

  /**
   * InvoiceItem without action
   */
  export type InvoiceItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
  }


  /**
   * Model Freight
   */

  export type AggregateFreight = {
    _count: FreightCountAggregateOutputType | null
    _avg: FreightAvgAggregateOutputType | null
    _sum: FreightSumAggregateOutputType | null
    _min: FreightMinAggregateOutputType | null
    _max: FreightMaxAggregateOutputType | null
  }

  export type FreightAvgAggregateOutputType = {
    id: number | null
    freightRate: Decimal | null
    currencyId: number | null
    shipmentId: number | null
    userId: number | null
  }

  export type FreightSumAggregateOutputType = {
    id: number | null
    freightRate: Decimal | null
    currencyId: number | null
    shipmentId: number | null
    userId: number | null
  }

  export type FreightMinAggregateOutputType = {
    id: number | null
    truckNumber: string | null
    forwarder: string | null
    billNumber: string | null
    billDate: Date | null
    freightRate: Decimal | null
    currencyId: number | null
    shipmentId: number | null
    isArrived: boolean | null
    userId: number | null
  }

  export type FreightMaxAggregateOutputType = {
    id: number | null
    truckNumber: string | null
    forwarder: string | null
    billNumber: string | null
    billDate: Date | null
    freightRate: Decimal | null
    currencyId: number | null
    shipmentId: number | null
    isArrived: boolean | null
    userId: number | null
  }

  export type FreightCountAggregateOutputType = {
    id: number
    truckNumber: number
    forwarder: number
    billNumber: number
    billDate: number
    freightRate: number
    currencyId: number
    shipmentId: number
    isArrived: number
    userId: number
    _all: number
  }


  export type FreightAvgAggregateInputType = {
    id?: true
    freightRate?: true
    currencyId?: true
    shipmentId?: true
    userId?: true
  }

  export type FreightSumAggregateInputType = {
    id?: true
    freightRate?: true
    currencyId?: true
    shipmentId?: true
    userId?: true
  }

  export type FreightMinAggregateInputType = {
    id?: true
    truckNumber?: true
    forwarder?: true
    billNumber?: true
    billDate?: true
    freightRate?: true
    currencyId?: true
    shipmentId?: true
    isArrived?: true
    userId?: true
  }

  export type FreightMaxAggregateInputType = {
    id?: true
    truckNumber?: true
    forwarder?: true
    billNumber?: true
    billDate?: true
    freightRate?: true
    currencyId?: true
    shipmentId?: true
    isArrived?: true
    userId?: true
  }

  export type FreightCountAggregateInputType = {
    id?: true
    truckNumber?: true
    forwarder?: true
    billNumber?: true
    billDate?: true
    freightRate?: true
    currencyId?: true
    shipmentId?: true
    isArrived?: true
    userId?: true
    _all?: true
  }

  export type FreightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Freight to aggregate.
     */
    where?: FreightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freights to fetch.
     */
    orderBy?: FreightOrderByWithRelationInput | FreightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FreightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Freights
    **/
    _count?: true | FreightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FreightAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FreightSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FreightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FreightMaxAggregateInputType
  }

  export type GetFreightAggregateType<T extends FreightAggregateArgs> = {
        [P in keyof T & keyof AggregateFreight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFreight[P]>
      : GetScalarType<T[P], AggregateFreight[P]>
  }




  export type FreightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreightWhereInput
    orderBy?: FreightOrderByWithAggregationInput | FreightOrderByWithAggregationInput[]
    by: FreightScalarFieldEnum[] | FreightScalarFieldEnum
    having?: FreightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FreightCountAggregateInputType | true
    _avg?: FreightAvgAggregateInputType
    _sum?: FreightSumAggregateInputType
    _min?: FreightMinAggregateInputType
    _max?: FreightMaxAggregateInputType
  }

  export type FreightGroupByOutputType = {
    id: number
    truckNumber: string
    forwarder: string | null
    billNumber: string | null
    billDate: Date | null
    freightRate: Decimal | null
    currencyId: number | null
    shipmentId: number
    isArrived: boolean
    userId: number
    _count: FreightCountAggregateOutputType | null
    _avg: FreightAvgAggregateOutputType | null
    _sum: FreightSumAggregateOutputType | null
    _min: FreightMinAggregateOutputType | null
    _max: FreightMaxAggregateOutputType | null
  }

  type GetFreightGroupByPayload<T extends FreightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FreightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FreightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FreightGroupByOutputType[P]>
            : GetScalarType<T[P], FreightGroupByOutputType[P]>
        }
      >
    >


  export type FreightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    truckNumber?: boolean
    forwarder?: boolean
    billNumber?: boolean
    billDate?: boolean
    freightRate?: boolean
    currencyId?: boolean
    shipmentId?: boolean
    isArrived?: boolean
    userId?: boolean
    currency?: boolean | Freight$currencyArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    invoices?: boolean | Freight$invoicesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | FreightCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freight"]>

  export type FreightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    truckNumber?: boolean
    forwarder?: boolean
    billNumber?: boolean
    billDate?: boolean
    freightRate?: boolean
    currencyId?: boolean
    shipmentId?: boolean
    isArrived?: boolean
    userId?: boolean
    currency?: boolean | Freight$currencyArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freight"]>

  export type FreightSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    truckNumber?: boolean
    forwarder?: boolean
    billNumber?: boolean
    billDate?: boolean
    freightRate?: boolean
    currencyId?: boolean
    shipmentId?: boolean
    isArrived?: boolean
    userId?: boolean
    currency?: boolean | Freight$currencyArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freight"]>

  export type FreightSelectScalar = {
    id?: boolean
    truckNumber?: boolean
    forwarder?: boolean
    billNumber?: boolean
    billDate?: boolean
    freightRate?: boolean
    currencyId?: boolean
    shipmentId?: boolean
    isArrived?: boolean
    userId?: boolean
  }

  export type FreightOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "truckNumber" | "forwarder" | "billNumber" | "billDate" | "freightRate" | "currencyId" | "shipmentId" | "isArrived" | "userId", ExtArgs["result"]["freight"]>
  export type FreightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | Freight$currencyArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    invoices?: boolean | Freight$invoicesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | FreightCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FreightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | Freight$currencyArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FreightIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | Freight$currencyArgs<ExtArgs>
    shipment?: boolean | ShipmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FreightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Freight"
    objects: {
      currency: Prisma.$CurrencyPayload<ExtArgs> | null
      shipment: Prisma.$ShipmentPayload<ExtArgs>
      invoices: Prisma.$FreightInvoicePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      truckNumber: string
      forwarder: string | null
      billNumber: string | null
      billDate: Date | null
      freightRate: Prisma.Decimal | null
      currencyId: number | null
      shipmentId: number
      isArrived: boolean
      userId: number
    }, ExtArgs["result"]["freight"]>
    composites: {}
  }

  type FreightGetPayload<S extends boolean | null | undefined | FreightDefaultArgs> = $Result.GetResult<Prisma.$FreightPayload, S>

  type FreightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FreightFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FreightCountAggregateInputType | true
    }

  export interface FreightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Freight'], meta: { name: 'Freight' } }
    /**
     * Find zero or one Freight that matches the filter.
     * @param {FreightFindUniqueArgs} args - Arguments to find a Freight
     * @example
     * // Get one Freight
     * const freight = await prisma.freight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FreightFindUniqueArgs>(args: SelectSubset<T, FreightFindUniqueArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Freight that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FreightFindUniqueOrThrowArgs} args - Arguments to find a Freight
     * @example
     * // Get one Freight
     * const freight = await prisma.freight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FreightFindUniqueOrThrowArgs>(args: SelectSubset<T, FreightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Freight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightFindFirstArgs} args - Arguments to find a Freight
     * @example
     * // Get one Freight
     * const freight = await prisma.freight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FreightFindFirstArgs>(args?: SelectSubset<T, FreightFindFirstArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Freight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightFindFirstOrThrowArgs} args - Arguments to find a Freight
     * @example
     * // Get one Freight
     * const freight = await prisma.freight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FreightFindFirstOrThrowArgs>(args?: SelectSubset<T, FreightFindFirstOrThrowArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Freights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Freights
     * const freights = await prisma.freight.findMany()
     * 
     * // Get first 10 Freights
     * const freights = await prisma.freight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const freightWithIdOnly = await prisma.freight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FreightFindManyArgs>(args?: SelectSubset<T, FreightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Freight.
     * @param {FreightCreateArgs} args - Arguments to create a Freight.
     * @example
     * // Create one Freight
     * const Freight = await prisma.freight.create({
     *   data: {
     *     // ... data to create a Freight
     *   }
     * })
     * 
     */
    create<T extends FreightCreateArgs>(args: SelectSubset<T, FreightCreateArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Freights.
     * @param {FreightCreateManyArgs} args - Arguments to create many Freights.
     * @example
     * // Create many Freights
     * const freight = await prisma.freight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FreightCreateManyArgs>(args?: SelectSubset<T, FreightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Freights and returns the data saved in the database.
     * @param {FreightCreateManyAndReturnArgs} args - Arguments to create many Freights.
     * @example
     * // Create many Freights
     * const freight = await prisma.freight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Freights and only return the `id`
     * const freightWithIdOnly = await prisma.freight.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FreightCreateManyAndReturnArgs>(args?: SelectSubset<T, FreightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Freight.
     * @param {FreightDeleteArgs} args - Arguments to delete one Freight.
     * @example
     * // Delete one Freight
     * const Freight = await prisma.freight.delete({
     *   where: {
     *     // ... filter to delete one Freight
     *   }
     * })
     * 
     */
    delete<T extends FreightDeleteArgs>(args: SelectSubset<T, FreightDeleteArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Freight.
     * @param {FreightUpdateArgs} args - Arguments to update one Freight.
     * @example
     * // Update one Freight
     * const freight = await prisma.freight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FreightUpdateArgs>(args: SelectSubset<T, FreightUpdateArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Freights.
     * @param {FreightDeleteManyArgs} args - Arguments to filter Freights to delete.
     * @example
     * // Delete a few Freights
     * const { count } = await prisma.freight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FreightDeleteManyArgs>(args?: SelectSubset<T, FreightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Freights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Freights
     * const freight = await prisma.freight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FreightUpdateManyArgs>(args: SelectSubset<T, FreightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Freights and returns the data updated in the database.
     * @param {FreightUpdateManyAndReturnArgs} args - Arguments to update many Freights.
     * @example
     * // Update many Freights
     * const freight = await prisma.freight.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Freights and only return the `id`
     * const freightWithIdOnly = await prisma.freight.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FreightUpdateManyAndReturnArgs>(args: SelectSubset<T, FreightUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Freight.
     * @param {FreightUpsertArgs} args - Arguments to update or create a Freight.
     * @example
     * // Update or create a Freight
     * const freight = await prisma.freight.upsert({
     *   create: {
     *     // ... data to create a Freight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Freight we want to update
     *   }
     * })
     */
    upsert<T extends FreightUpsertArgs>(args: SelectSubset<T, FreightUpsertArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Freights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightCountArgs} args - Arguments to filter Freights to count.
     * @example
     * // Count the number of Freights
     * const count = await prisma.freight.count({
     *   where: {
     *     // ... the filter for the Freights we want to count
     *   }
     * })
    **/
    count<T extends FreightCountArgs>(
      args?: Subset<T, FreightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FreightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Freight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FreightAggregateArgs>(args: Subset<T, FreightAggregateArgs>): Prisma.PrismaPromise<GetFreightAggregateType<T>>

    /**
     * Group by Freight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FreightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FreightGroupByArgs['orderBy'] }
        : { orderBy?: FreightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FreightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Freight model
   */
  readonly fields: FreightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Freight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FreightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    currency<T extends Freight$currencyArgs<ExtArgs> = {}>(args?: Subset<T, Freight$currencyArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    shipment<T extends ShipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShipmentDefaultArgs<ExtArgs>>): Prisma__ShipmentClient<$Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invoices<T extends Freight$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Freight$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Freight model
   */
  interface FreightFieldRefs {
    readonly id: FieldRef<"Freight", 'Int'>
    readonly truckNumber: FieldRef<"Freight", 'String'>
    readonly forwarder: FieldRef<"Freight", 'String'>
    readonly billNumber: FieldRef<"Freight", 'String'>
    readonly billDate: FieldRef<"Freight", 'DateTime'>
    readonly freightRate: FieldRef<"Freight", 'Decimal'>
    readonly currencyId: FieldRef<"Freight", 'Int'>
    readonly shipmentId: FieldRef<"Freight", 'Int'>
    readonly isArrived: FieldRef<"Freight", 'Boolean'>
    readonly userId: FieldRef<"Freight", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Freight findUnique
   */
  export type FreightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * Filter, which Freight to fetch.
     */
    where: FreightWhereUniqueInput
  }

  /**
   * Freight findUniqueOrThrow
   */
  export type FreightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * Filter, which Freight to fetch.
     */
    where: FreightWhereUniqueInput
  }

  /**
   * Freight findFirst
   */
  export type FreightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * Filter, which Freight to fetch.
     */
    where?: FreightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freights to fetch.
     */
    orderBy?: FreightOrderByWithRelationInput | FreightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Freights.
     */
    cursor?: FreightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Freights.
     */
    distinct?: FreightScalarFieldEnum | FreightScalarFieldEnum[]
  }

  /**
   * Freight findFirstOrThrow
   */
  export type FreightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * Filter, which Freight to fetch.
     */
    where?: FreightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freights to fetch.
     */
    orderBy?: FreightOrderByWithRelationInput | FreightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Freights.
     */
    cursor?: FreightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Freights.
     */
    distinct?: FreightScalarFieldEnum | FreightScalarFieldEnum[]
  }

  /**
   * Freight findMany
   */
  export type FreightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * Filter, which Freights to fetch.
     */
    where?: FreightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freights to fetch.
     */
    orderBy?: FreightOrderByWithRelationInput | FreightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Freights.
     */
    cursor?: FreightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freights.
     */
    skip?: number
    distinct?: FreightScalarFieldEnum | FreightScalarFieldEnum[]
  }

  /**
   * Freight create
   */
  export type FreightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * The data needed to create a Freight.
     */
    data: XOR<FreightCreateInput, FreightUncheckedCreateInput>
  }

  /**
   * Freight createMany
   */
  export type FreightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Freights.
     */
    data: FreightCreateManyInput | FreightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Freight createManyAndReturn
   */
  export type FreightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * The data used to create many Freights.
     */
    data: FreightCreateManyInput | FreightCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Freight update
   */
  export type FreightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * The data needed to update a Freight.
     */
    data: XOR<FreightUpdateInput, FreightUncheckedUpdateInput>
    /**
     * Choose, which Freight to update.
     */
    where: FreightWhereUniqueInput
  }

  /**
   * Freight updateMany
   */
  export type FreightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Freights.
     */
    data: XOR<FreightUpdateManyMutationInput, FreightUncheckedUpdateManyInput>
    /**
     * Filter which Freights to update
     */
    where?: FreightWhereInput
    /**
     * Limit how many Freights to update.
     */
    limit?: number
  }

  /**
   * Freight updateManyAndReturn
   */
  export type FreightUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * The data used to update Freights.
     */
    data: XOR<FreightUpdateManyMutationInput, FreightUncheckedUpdateManyInput>
    /**
     * Filter which Freights to update
     */
    where?: FreightWhereInput
    /**
     * Limit how many Freights to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Freight upsert
   */
  export type FreightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * The filter to search for the Freight to update in case it exists.
     */
    where: FreightWhereUniqueInput
    /**
     * In case the Freight found by the `where` argument doesn't exist, create a new Freight with this data.
     */
    create: XOR<FreightCreateInput, FreightUncheckedCreateInput>
    /**
     * In case the Freight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FreightUpdateInput, FreightUncheckedUpdateInput>
  }

  /**
   * Freight delete
   */
  export type FreightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
    /**
     * Filter which Freight to delete.
     */
    where: FreightWhereUniqueInput
  }

  /**
   * Freight deleteMany
   */
  export type FreightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Freights to delete
     */
    where?: FreightWhereInput
    /**
     * Limit how many Freights to delete.
     */
    limit?: number
  }

  /**
   * Freight.currency
   */
  export type Freight$currencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    where?: CurrencyWhereInput
  }

  /**
   * Freight.invoices
   */
  export type Freight$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    where?: FreightInvoiceWhereInput
    orderBy?: FreightInvoiceOrderByWithRelationInput | FreightInvoiceOrderByWithRelationInput[]
    cursor?: FreightInvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FreightInvoiceScalarFieldEnum | FreightInvoiceScalarFieldEnum[]
  }

  /**
   * Freight without action
   */
  export type FreightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freight
     */
    select?: FreightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Freight
     */
    omit?: FreightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInclude<ExtArgs> | null
  }


  /**
   * Model FreightInvoice
   */

  export type AggregateFreightInvoice = {
    _count: FreightInvoiceCountAggregateOutputType | null
    _avg: FreightInvoiceAvgAggregateOutputType | null
    _sum: FreightInvoiceSumAggregateOutputType | null
    _min: FreightInvoiceMinAggregateOutputType | null
    _max: FreightInvoiceMaxAggregateOutputType | null
  }

  export type FreightInvoiceAvgAggregateOutputType = {
    freightId: number | null
    invoiceId: number | null
  }

  export type FreightInvoiceSumAggregateOutputType = {
    freightId: number | null
    invoiceId: number | null
  }

  export type FreightInvoiceMinAggregateOutputType = {
    freightId: number | null
    invoiceId: number | null
  }

  export type FreightInvoiceMaxAggregateOutputType = {
    freightId: number | null
    invoiceId: number | null
  }

  export type FreightInvoiceCountAggregateOutputType = {
    freightId: number
    invoiceId: number
    _all: number
  }


  export type FreightInvoiceAvgAggregateInputType = {
    freightId?: true
    invoiceId?: true
  }

  export type FreightInvoiceSumAggregateInputType = {
    freightId?: true
    invoiceId?: true
  }

  export type FreightInvoiceMinAggregateInputType = {
    freightId?: true
    invoiceId?: true
  }

  export type FreightInvoiceMaxAggregateInputType = {
    freightId?: true
    invoiceId?: true
  }

  export type FreightInvoiceCountAggregateInputType = {
    freightId?: true
    invoiceId?: true
    _all?: true
  }

  export type FreightInvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FreightInvoice to aggregate.
     */
    where?: FreightInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FreightInvoices to fetch.
     */
    orderBy?: FreightInvoiceOrderByWithRelationInput | FreightInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FreightInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FreightInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FreightInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FreightInvoices
    **/
    _count?: true | FreightInvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FreightInvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FreightInvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FreightInvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FreightInvoiceMaxAggregateInputType
  }

  export type GetFreightInvoiceAggregateType<T extends FreightInvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateFreightInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFreightInvoice[P]>
      : GetScalarType<T[P], AggregateFreightInvoice[P]>
  }




  export type FreightInvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreightInvoiceWhereInput
    orderBy?: FreightInvoiceOrderByWithAggregationInput | FreightInvoiceOrderByWithAggregationInput[]
    by: FreightInvoiceScalarFieldEnum[] | FreightInvoiceScalarFieldEnum
    having?: FreightInvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FreightInvoiceCountAggregateInputType | true
    _avg?: FreightInvoiceAvgAggregateInputType
    _sum?: FreightInvoiceSumAggregateInputType
    _min?: FreightInvoiceMinAggregateInputType
    _max?: FreightInvoiceMaxAggregateInputType
  }

  export type FreightInvoiceGroupByOutputType = {
    freightId: number
    invoiceId: number
    _count: FreightInvoiceCountAggregateOutputType | null
    _avg: FreightInvoiceAvgAggregateOutputType | null
    _sum: FreightInvoiceSumAggregateOutputType | null
    _min: FreightInvoiceMinAggregateOutputType | null
    _max: FreightInvoiceMaxAggregateOutputType | null
  }

  type GetFreightInvoiceGroupByPayload<T extends FreightInvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FreightInvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FreightInvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FreightInvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], FreightInvoiceGroupByOutputType[P]>
        }
      >
    >


  export type FreightInvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    freightId?: boolean
    invoiceId?: boolean
    freight?: boolean | FreightDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freightInvoice"]>

  export type FreightInvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    freightId?: boolean
    invoiceId?: boolean
    freight?: boolean | FreightDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freightInvoice"]>

  export type FreightInvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    freightId?: boolean
    invoiceId?: boolean
    freight?: boolean | FreightDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freightInvoice"]>

  export type FreightInvoiceSelectScalar = {
    freightId?: boolean
    invoiceId?: boolean
  }

  export type FreightInvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"freightId" | "invoiceId", ExtArgs["result"]["freightInvoice"]>
  export type FreightInvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    freight?: boolean | FreightDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type FreightInvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    freight?: boolean | FreightDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type FreightInvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    freight?: boolean | FreightDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }

  export type $FreightInvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FreightInvoice"
    objects: {
      freight: Prisma.$FreightPayload<ExtArgs>
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      freightId: number
      invoiceId: number
    }, ExtArgs["result"]["freightInvoice"]>
    composites: {}
  }

  type FreightInvoiceGetPayload<S extends boolean | null | undefined | FreightInvoiceDefaultArgs> = $Result.GetResult<Prisma.$FreightInvoicePayload, S>

  type FreightInvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FreightInvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FreightInvoiceCountAggregateInputType | true
    }

  export interface FreightInvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FreightInvoice'], meta: { name: 'FreightInvoice' } }
    /**
     * Find zero or one FreightInvoice that matches the filter.
     * @param {FreightInvoiceFindUniqueArgs} args - Arguments to find a FreightInvoice
     * @example
     * // Get one FreightInvoice
     * const freightInvoice = await prisma.freightInvoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FreightInvoiceFindUniqueArgs>(args: SelectSubset<T, FreightInvoiceFindUniqueArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FreightInvoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FreightInvoiceFindUniqueOrThrowArgs} args - Arguments to find a FreightInvoice
     * @example
     * // Get one FreightInvoice
     * const freightInvoice = await prisma.freightInvoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FreightInvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, FreightInvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FreightInvoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightInvoiceFindFirstArgs} args - Arguments to find a FreightInvoice
     * @example
     * // Get one FreightInvoice
     * const freightInvoice = await prisma.freightInvoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FreightInvoiceFindFirstArgs>(args?: SelectSubset<T, FreightInvoiceFindFirstArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FreightInvoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightInvoiceFindFirstOrThrowArgs} args - Arguments to find a FreightInvoice
     * @example
     * // Get one FreightInvoice
     * const freightInvoice = await prisma.freightInvoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FreightInvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, FreightInvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FreightInvoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightInvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FreightInvoices
     * const freightInvoices = await prisma.freightInvoice.findMany()
     * 
     * // Get first 10 FreightInvoices
     * const freightInvoices = await prisma.freightInvoice.findMany({ take: 10 })
     * 
     * // Only select the `freightId`
     * const freightInvoiceWithFreightIdOnly = await prisma.freightInvoice.findMany({ select: { freightId: true } })
     * 
     */
    findMany<T extends FreightInvoiceFindManyArgs>(args?: SelectSubset<T, FreightInvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FreightInvoice.
     * @param {FreightInvoiceCreateArgs} args - Arguments to create a FreightInvoice.
     * @example
     * // Create one FreightInvoice
     * const FreightInvoice = await prisma.freightInvoice.create({
     *   data: {
     *     // ... data to create a FreightInvoice
     *   }
     * })
     * 
     */
    create<T extends FreightInvoiceCreateArgs>(args: SelectSubset<T, FreightInvoiceCreateArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FreightInvoices.
     * @param {FreightInvoiceCreateManyArgs} args - Arguments to create many FreightInvoices.
     * @example
     * // Create many FreightInvoices
     * const freightInvoice = await prisma.freightInvoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FreightInvoiceCreateManyArgs>(args?: SelectSubset<T, FreightInvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FreightInvoices and returns the data saved in the database.
     * @param {FreightInvoiceCreateManyAndReturnArgs} args - Arguments to create many FreightInvoices.
     * @example
     * // Create many FreightInvoices
     * const freightInvoice = await prisma.freightInvoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FreightInvoices and only return the `freightId`
     * const freightInvoiceWithFreightIdOnly = await prisma.freightInvoice.createManyAndReturn({
     *   select: { freightId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FreightInvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, FreightInvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FreightInvoice.
     * @param {FreightInvoiceDeleteArgs} args - Arguments to delete one FreightInvoice.
     * @example
     * // Delete one FreightInvoice
     * const FreightInvoice = await prisma.freightInvoice.delete({
     *   where: {
     *     // ... filter to delete one FreightInvoice
     *   }
     * })
     * 
     */
    delete<T extends FreightInvoiceDeleteArgs>(args: SelectSubset<T, FreightInvoiceDeleteArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FreightInvoice.
     * @param {FreightInvoiceUpdateArgs} args - Arguments to update one FreightInvoice.
     * @example
     * // Update one FreightInvoice
     * const freightInvoice = await prisma.freightInvoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FreightInvoiceUpdateArgs>(args: SelectSubset<T, FreightInvoiceUpdateArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FreightInvoices.
     * @param {FreightInvoiceDeleteManyArgs} args - Arguments to filter FreightInvoices to delete.
     * @example
     * // Delete a few FreightInvoices
     * const { count } = await prisma.freightInvoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FreightInvoiceDeleteManyArgs>(args?: SelectSubset<T, FreightInvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FreightInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightInvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FreightInvoices
     * const freightInvoice = await prisma.freightInvoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FreightInvoiceUpdateManyArgs>(args: SelectSubset<T, FreightInvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FreightInvoices and returns the data updated in the database.
     * @param {FreightInvoiceUpdateManyAndReturnArgs} args - Arguments to update many FreightInvoices.
     * @example
     * // Update many FreightInvoices
     * const freightInvoice = await prisma.freightInvoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FreightInvoices and only return the `freightId`
     * const freightInvoiceWithFreightIdOnly = await prisma.freightInvoice.updateManyAndReturn({
     *   select: { freightId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FreightInvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, FreightInvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FreightInvoice.
     * @param {FreightInvoiceUpsertArgs} args - Arguments to update or create a FreightInvoice.
     * @example
     * // Update or create a FreightInvoice
     * const freightInvoice = await prisma.freightInvoice.upsert({
     *   create: {
     *     // ... data to create a FreightInvoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FreightInvoice we want to update
     *   }
     * })
     */
    upsert<T extends FreightInvoiceUpsertArgs>(args: SelectSubset<T, FreightInvoiceUpsertArgs<ExtArgs>>): Prisma__FreightInvoiceClient<$Result.GetResult<Prisma.$FreightInvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FreightInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightInvoiceCountArgs} args - Arguments to filter FreightInvoices to count.
     * @example
     * // Count the number of FreightInvoices
     * const count = await prisma.freightInvoice.count({
     *   where: {
     *     // ... the filter for the FreightInvoices we want to count
     *   }
     * })
    **/
    count<T extends FreightInvoiceCountArgs>(
      args?: Subset<T, FreightInvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FreightInvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FreightInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightInvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FreightInvoiceAggregateArgs>(args: Subset<T, FreightInvoiceAggregateArgs>): Prisma.PrismaPromise<GetFreightInvoiceAggregateType<T>>

    /**
     * Group by FreightInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreightInvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FreightInvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FreightInvoiceGroupByArgs['orderBy'] }
        : { orderBy?: FreightInvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FreightInvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreightInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FreightInvoice model
   */
  readonly fields: FreightInvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FreightInvoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FreightInvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    freight<T extends FreightDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FreightDefaultArgs<ExtArgs>>): Prisma__FreightClient<$Result.GetResult<Prisma.$FreightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FreightInvoice model
   */
  interface FreightInvoiceFieldRefs {
    readonly freightId: FieldRef<"FreightInvoice", 'Int'>
    readonly invoiceId: FieldRef<"FreightInvoice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FreightInvoice findUnique
   */
  export type FreightInvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which FreightInvoice to fetch.
     */
    where: FreightInvoiceWhereUniqueInput
  }

  /**
   * FreightInvoice findUniqueOrThrow
   */
  export type FreightInvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which FreightInvoice to fetch.
     */
    where: FreightInvoiceWhereUniqueInput
  }

  /**
   * FreightInvoice findFirst
   */
  export type FreightInvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which FreightInvoice to fetch.
     */
    where?: FreightInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FreightInvoices to fetch.
     */
    orderBy?: FreightInvoiceOrderByWithRelationInput | FreightInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FreightInvoices.
     */
    cursor?: FreightInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FreightInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FreightInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FreightInvoices.
     */
    distinct?: FreightInvoiceScalarFieldEnum | FreightInvoiceScalarFieldEnum[]
  }

  /**
   * FreightInvoice findFirstOrThrow
   */
  export type FreightInvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which FreightInvoice to fetch.
     */
    where?: FreightInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FreightInvoices to fetch.
     */
    orderBy?: FreightInvoiceOrderByWithRelationInput | FreightInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FreightInvoices.
     */
    cursor?: FreightInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FreightInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FreightInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FreightInvoices.
     */
    distinct?: FreightInvoiceScalarFieldEnum | FreightInvoiceScalarFieldEnum[]
  }

  /**
   * FreightInvoice findMany
   */
  export type FreightInvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which FreightInvoices to fetch.
     */
    where?: FreightInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FreightInvoices to fetch.
     */
    orderBy?: FreightInvoiceOrderByWithRelationInput | FreightInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FreightInvoices.
     */
    cursor?: FreightInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FreightInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FreightInvoices.
     */
    skip?: number
    distinct?: FreightInvoiceScalarFieldEnum | FreightInvoiceScalarFieldEnum[]
  }

  /**
   * FreightInvoice create
   */
  export type FreightInvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a FreightInvoice.
     */
    data: XOR<FreightInvoiceCreateInput, FreightInvoiceUncheckedCreateInput>
  }

  /**
   * FreightInvoice createMany
   */
  export type FreightInvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FreightInvoices.
     */
    data: FreightInvoiceCreateManyInput | FreightInvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FreightInvoice createManyAndReturn
   */
  export type FreightInvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many FreightInvoices.
     */
    data: FreightInvoiceCreateManyInput | FreightInvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FreightInvoice update
   */
  export type FreightInvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a FreightInvoice.
     */
    data: XOR<FreightInvoiceUpdateInput, FreightInvoiceUncheckedUpdateInput>
    /**
     * Choose, which FreightInvoice to update.
     */
    where: FreightInvoiceWhereUniqueInput
  }

  /**
   * FreightInvoice updateMany
   */
  export type FreightInvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FreightInvoices.
     */
    data: XOR<FreightInvoiceUpdateManyMutationInput, FreightInvoiceUncheckedUpdateManyInput>
    /**
     * Filter which FreightInvoices to update
     */
    where?: FreightInvoiceWhereInput
    /**
     * Limit how many FreightInvoices to update.
     */
    limit?: number
  }

  /**
   * FreightInvoice updateManyAndReturn
   */
  export type FreightInvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * The data used to update FreightInvoices.
     */
    data: XOR<FreightInvoiceUpdateManyMutationInput, FreightInvoiceUncheckedUpdateManyInput>
    /**
     * Filter which FreightInvoices to update
     */
    where?: FreightInvoiceWhereInput
    /**
     * Limit how many FreightInvoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FreightInvoice upsert
   */
  export type FreightInvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the FreightInvoice to update in case it exists.
     */
    where: FreightInvoiceWhereUniqueInput
    /**
     * In case the FreightInvoice found by the `where` argument doesn't exist, create a new FreightInvoice with this data.
     */
    create: XOR<FreightInvoiceCreateInput, FreightInvoiceUncheckedCreateInput>
    /**
     * In case the FreightInvoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FreightInvoiceUpdateInput, FreightInvoiceUncheckedUpdateInput>
  }

  /**
   * FreightInvoice delete
   */
  export type FreightInvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
    /**
     * Filter which FreightInvoice to delete.
     */
    where: FreightInvoiceWhereUniqueInput
  }

  /**
   * FreightInvoice deleteMany
   */
  export type FreightInvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FreightInvoices to delete
     */
    where?: FreightInvoiceWhereInput
    /**
     * Limit how many FreightInvoices to delete.
     */
    limit?: number
  }

  /**
   * FreightInvoice without action
   */
  export type FreightInvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreightInvoice
     */
    select?: FreightInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FreightInvoice
     */
    omit?: FreightInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FreightInvoiceInclude<ExtArgs> | null
  }


  /**
   * Model Village
   */

  export type AggregateVillage = {
    _count: VillageCountAggregateOutputType | null
    _avg: VillageAvgAggregateOutputType | null
    _sum: VillageSumAggregateOutputType | null
    _min: VillageMinAggregateOutputType | null
    _max: VillageMaxAggregateOutputType | null
  }

  export type VillageAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type VillageSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type VillageMinAggregateOutputType = {
    id: number | null
    name_en: string | null
    name_ge: string | null
    municipality: string | null
    latitude: number | null
    longitude: number | null
  }

  export type VillageMaxAggregateOutputType = {
    id: number | null
    name_en: string | null
    name_ge: string | null
    municipality: string | null
    latitude: number | null
    longitude: number | null
  }

  export type VillageCountAggregateOutputType = {
    id: number
    name_en: number
    name_ge: number
    municipality: number
    latitude: number
    longitude: number
    _all: number
  }


  export type VillageAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type VillageSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type VillageMinAggregateInputType = {
    id?: true
    name_en?: true
    name_ge?: true
    municipality?: true
    latitude?: true
    longitude?: true
  }

  export type VillageMaxAggregateInputType = {
    id?: true
    name_en?: true
    name_ge?: true
    municipality?: true
    latitude?: true
    longitude?: true
  }

  export type VillageCountAggregateInputType = {
    id?: true
    name_en?: true
    name_ge?: true
    municipality?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type VillageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Village to aggregate.
     */
    where?: VillageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Villages to fetch.
     */
    orderBy?: VillageOrderByWithRelationInput | VillageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VillageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Villages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Villages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Villages
    **/
    _count?: true | VillageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VillageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VillageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VillageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VillageMaxAggregateInputType
  }

  export type GetVillageAggregateType<T extends VillageAggregateArgs> = {
        [P in keyof T & keyof AggregateVillage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVillage[P]>
      : GetScalarType<T[P], AggregateVillage[P]>
  }




  export type VillageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VillageWhereInput
    orderBy?: VillageOrderByWithAggregationInput | VillageOrderByWithAggregationInput[]
    by: VillageScalarFieldEnum[] | VillageScalarFieldEnum
    having?: VillageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VillageCountAggregateInputType | true
    _avg?: VillageAvgAggregateInputType
    _sum?: VillageSumAggregateInputType
    _min?: VillageMinAggregateInputType
    _max?: VillageMaxAggregateInputType
  }

  export type VillageGroupByOutputType = {
    id: number
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
    _count: VillageCountAggregateOutputType | null
    _avg: VillageAvgAggregateOutputType | null
    _sum: VillageSumAggregateOutputType | null
    _min: VillageMinAggregateOutputType | null
    _max: VillageMaxAggregateOutputType | null
  }

  type GetVillageGroupByPayload<T extends VillageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VillageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VillageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VillageGroupByOutputType[P]>
            : GetScalarType<T[P], VillageGroupByOutputType[P]>
        }
      >
    >


  export type VillageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_en?: boolean
    name_ge?: boolean
    municipality?: boolean
    latitude?: boolean
    longitude?: boolean
    PipelineProgress?: boolean | Village$PipelineProgressArgs<ExtArgs>
    MaterialNeeds?: boolean | Village$MaterialNeedsArgs<ExtArgs>
    _count?: boolean | VillageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["village"]>

  export type VillageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_en?: boolean
    name_ge?: boolean
    municipality?: boolean
    latitude?: boolean
    longitude?: boolean
  }, ExtArgs["result"]["village"]>

  export type VillageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name_en?: boolean
    name_ge?: boolean
    municipality?: boolean
    latitude?: boolean
    longitude?: boolean
  }, ExtArgs["result"]["village"]>

  export type VillageSelectScalar = {
    id?: boolean
    name_en?: boolean
    name_ge?: boolean
    municipality?: boolean
    latitude?: boolean
    longitude?: boolean
  }

  export type VillageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name_en" | "name_ge" | "municipality" | "latitude" | "longitude", ExtArgs["result"]["village"]>
  export type VillageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PipelineProgress?: boolean | Village$PipelineProgressArgs<ExtArgs>
    MaterialNeeds?: boolean | Village$MaterialNeedsArgs<ExtArgs>
    _count?: boolean | VillageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VillageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VillageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VillagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Village"
    objects: {
      PipelineProgress: Prisma.$PipelineProgressPayload<ExtArgs>[]
      MaterialNeeds: Prisma.$MaterialNeedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name_en: string
      name_ge: string
      municipality: string
      latitude: number
      longitude: number
    }, ExtArgs["result"]["village"]>
    composites: {}
  }

  type VillageGetPayload<S extends boolean | null | undefined | VillageDefaultArgs> = $Result.GetResult<Prisma.$VillagePayload, S>

  type VillageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VillageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VillageCountAggregateInputType | true
    }

  export interface VillageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Village'], meta: { name: 'Village' } }
    /**
     * Find zero or one Village that matches the filter.
     * @param {VillageFindUniqueArgs} args - Arguments to find a Village
     * @example
     * // Get one Village
     * const village = await prisma.village.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VillageFindUniqueArgs>(args: SelectSubset<T, VillageFindUniqueArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Village that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VillageFindUniqueOrThrowArgs} args - Arguments to find a Village
     * @example
     * // Get one Village
     * const village = await prisma.village.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VillageFindUniqueOrThrowArgs>(args: SelectSubset<T, VillageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Village that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VillageFindFirstArgs} args - Arguments to find a Village
     * @example
     * // Get one Village
     * const village = await prisma.village.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VillageFindFirstArgs>(args?: SelectSubset<T, VillageFindFirstArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Village that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VillageFindFirstOrThrowArgs} args - Arguments to find a Village
     * @example
     * // Get one Village
     * const village = await prisma.village.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VillageFindFirstOrThrowArgs>(args?: SelectSubset<T, VillageFindFirstOrThrowArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Villages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VillageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Villages
     * const villages = await prisma.village.findMany()
     * 
     * // Get first 10 Villages
     * const villages = await prisma.village.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const villageWithIdOnly = await prisma.village.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VillageFindManyArgs>(args?: SelectSubset<T, VillageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Village.
     * @param {VillageCreateArgs} args - Arguments to create a Village.
     * @example
     * // Create one Village
     * const Village = await prisma.village.create({
     *   data: {
     *     // ... data to create a Village
     *   }
     * })
     * 
     */
    create<T extends VillageCreateArgs>(args: SelectSubset<T, VillageCreateArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Villages.
     * @param {VillageCreateManyArgs} args - Arguments to create many Villages.
     * @example
     * // Create many Villages
     * const village = await prisma.village.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VillageCreateManyArgs>(args?: SelectSubset<T, VillageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Villages and returns the data saved in the database.
     * @param {VillageCreateManyAndReturnArgs} args - Arguments to create many Villages.
     * @example
     * // Create many Villages
     * const village = await prisma.village.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Villages and only return the `id`
     * const villageWithIdOnly = await prisma.village.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VillageCreateManyAndReturnArgs>(args?: SelectSubset<T, VillageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Village.
     * @param {VillageDeleteArgs} args - Arguments to delete one Village.
     * @example
     * // Delete one Village
     * const Village = await prisma.village.delete({
     *   where: {
     *     // ... filter to delete one Village
     *   }
     * })
     * 
     */
    delete<T extends VillageDeleteArgs>(args: SelectSubset<T, VillageDeleteArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Village.
     * @param {VillageUpdateArgs} args - Arguments to update one Village.
     * @example
     * // Update one Village
     * const village = await prisma.village.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VillageUpdateArgs>(args: SelectSubset<T, VillageUpdateArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Villages.
     * @param {VillageDeleteManyArgs} args - Arguments to filter Villages to delete.
     * @example
     * // Delete a few Villages
     * const { count } = await prisma.village.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VillageDeleteManyArgs>(args?: SelectSubset<T, VillageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Villages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VillageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Villages
     * const village = await prisma.village.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VillageUpdateManyArgs>(args: SelectSubset<T, VillageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Villages and returns the data updated in the database.
     * @param {VillageUpdateManyAndReturnArgs} args - Arguments to update many Villages.
     * @example
     * // Update many Villages
     * const village = await prisma.village.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Villages and only return the `id`
     * const villageWithIdOnly = await prisma.village.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VillageUpdateManyAndReturnArgs>(args: SelectSubset<T, VillageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Village.
     * @param {VillageUpsertArgs} args - Arguments to update or create a Village.
     * @example
     * // Update or create a Village
     * const village = await prisma.village.upsert({
     *   create: {
     *     // ... data to create a Village
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Village we want to update
     *   }
     * })
     */
    upsert<T extends VillageUpsertArgs>(args: SelectSubset<T, VillageUpsertArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Villages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VillageCountArgs} args - Arguments to filter Villages to count.
     * @example
     * // Count the number of Villages
     * const count = await prisma.village.count({
     *   where: {
     *     // ... the filter for the Villages we want to count
     *   }
     * })
    **/
    count<T extends VillageCountArgs>(
      args?: Subset<T, VillageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VillageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Village.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VillageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VillageAggregateArgs>(args: Subset<T, VillageAggregateArgs>): Prisma.PrismaPromise<GetVillageAggregateType<T>>

    /**
     * Group by Village.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VillageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VillageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VillageGroupByArgs['orderBy'] }
        : { orderBy?: VillageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VillageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVillageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Village model
   */
  readonly fields: VillageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Village.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VillageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PipelineProgress<T extends Village$PipelineProgressArgs<ExtArgs> = {}>(args?: Subset<T, Village$PipelineProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MaterialNeeds<T extends Village$MaterialNeedsArgs<ExtArgs> = {}>(args?: Subset<T, Village$MaterialNeedsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Village model
   */
  interface VillageFieldRefs {
    readonly id: FieldRef<"Village", 'Int'>
    readonly name_en: FieldRef<"Village", 'String'>
    readonly name_ge: FieldRef<"Village", 'String'>
    readonly municipality: FieldRef<"Village", 'String'>
    readonly latitude: FieldRef<"Village", 'Float'>
    readonly longitude: FieldRef<"Village", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Village findUnique
   */
  export type VillageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * Filter, which Village to fetch.
     */
    where: VillageWhereUniqueInput
  }

  /**
   * Village findUniqueOrThrow
   */
  export type VillageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * Filter, which Village to fetch.
     */
    where: VillageWhereUniqueInput
  }

  /**
   * Village findFirst
   */
  export type VillageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * Filter, which Village to fetch.
     */
    where?: VillageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Villages to fetch.
     */
    orderBy?: VillageOrderByWithRelationInput | VillageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Villages.
     */
    cursor?: VillageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Villages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Villages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Villages.
     */
    distinct?: VillageScalarFieldEnum | VillageScalarFieldEnum[]
  }

  /**
   * Village findFirstOrThrow
   */
  export type VillageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * Filter, which Village to fetch.
     */
    where?: VillageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Villages to fetch.
     */
    orderBy?: VillageOrderByWithRelationInput | VillageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Villages.
     */
    cursor?: VillageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Villages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Villages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Villages.
     */
    distinct?: VillageScalarFieldEnum | VillageScalarFieldEnum[]
  }

  /**
   * Village findMany
   */
  export type VillageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * Filter, which Villages to fetch.
     */
    where?: VillageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Villages to fetch.
     */
    orderBy?: VillageOrderByWithRelationInput | VillageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Villages.
     */
    cursor?: VillageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Villages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Villages.
     */
    skip?: number
    distinct?: VillageScalarFieldEnum | VillageScalarFieldEnum[]
  }

  /**
   * Village create
   */
  export type VillageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * The data needed to create a Village.
     */
    data: XOR<VillageCreateInput, VillageUncheckedCreateInput>
  }

  /**
   * Village createMany
   */
  export type VillageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Villages.
     */
    data: VillageCreateManyInput | VillageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Village createManyAndReturn
   */
  export type VillageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * The data used to create many Villages.
     */
    data: VillageCreateManyInput | VillageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Village update
   */
  export type VillageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * The data needed to update a Village.
     */
    data: XOR<VillageUpdateInput, VillageUncheckedUpdateInput>
    /**
     * Choose, which Village to update.
     */
    where: VillageWhereUniqueInput
  }

  /**
   * Village updateMany
   */
  export type VillageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Villages.
     */
    data: XOR<VillageUpdateManyMutationInput, VillageUncheckedUpdateManyInput>
    /**
     * Filter which Villages to update
     */
    where?: VillageWhereInput
    /**
     * Limit how many Villages to update.
     */
    limit?: number
  }

  /**
   * Village updateManyAndReturn
   */
  export type VillageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * The data used to update Villages.
     */
    data: XOR<VillageUpdateManyMutationInput, VillageUncheckedUpdateManyInput>
    /**
     * Filter which Villages to update
     */
    where?: VillageWhereInput
    /**
     * Limit how many Villages to update.
     */
    limit?: number
  }

  /**
   * Village upsert
   */
  export type VillageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * The filter to search for the Village to update in case it exists.
     */
    where: VillageWhereUniqueInput
    /**
     * In case the Village found by the `where` argument doesn't exist, create a new Village with this data.
     */
    create: XOR<VillageCreateInput, VillageUncheckedCreateInput>
    /**
     * In case the Village was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VillageUpdateInput, VillageUncheckedUpdateInput>
  }

  /**
   * Village delete
   */
  export type VillageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
    /**
     * Filter which Village to delete.
     */
    where: VillageWhereUniqueInput
  }

  /**
   * Village deleteMany
   */
  export type VillageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Villages to delete
     */
    where?: VillageWhereInput
    /**
     * Limit how many Villages to delete.
     */
    limit?: number
  }

  /**
   * Village.PipelineProgress
   */
  export type Village$PipelineProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    where?: PipelineProgressWhereInput
    orderBy?: PipelineProgressOrderByWithRelationInput | PipelineProgressOrderByWithRelationInput[]
    cursor?: PipelineProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineProgressScalarFieldEnum | PipelineProgressScalarFieldEnum[]
  }

  /**
   * Village.MaterialNeeds
   */
  export type Village$MaterialNeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    where?: MaterialNeedWhereInput
    orderBy?: MaterialNeedOrderByWithRelationInput | MaterialNeedOrderByWithRelationInput[]
    cursor?: MaterialNeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialNeedScalarFieldEnum | MaterialNeedScalarFieldEnum[]
  }

  /**
   * Village without action
   */
  export type VillageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Village
     */
    select?: VillageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Village
     */
    omit?: VillageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VillageInclude<ExtArgs> | null
  }


  /**
   * Model MaterialNeed
   */

  export type AggregateMaterialNeed = {
    _count: MaterialNeedCountAggregateOutputType | null
    _avg: MaterialNeedAvgAggregateOutputType | null
    _sum: MaterialNeedSumAggregateOutputType | null
    _min: MaterialNeedMinAggregateOutputType | null
    _max: MaterialNeedMaxAggregateOutputType | null
  }

  export type MaterialNeedAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    villageId: number | null
  }

  export type MaterialNeedSumAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    villageId: number | null
  }

  export type MaterialNeedMinAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    villageId: number | null
  }

  export type MaterialNeedMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    villageId: number | null
  }

  export type MaterialNeedCountAggregateOutputType = {
    id: number
    productId: number
    requiredAmount: number
    villageId: number
    _all: number
  }


  export type MaterialNeedAvgAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    villageId?: true
  }

  export type MaterialNeedSumAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    villageId?: true
  }

  export type MaterialNeedMinAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    villageId?: true
  }

  export type MaterialNeedMaxAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    villageId?: true
  }

  export type MaterialNeedCountAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    villageId?: true
    _all?: true
  }

  export type MaterialNeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialNeed to aggregate.
     */
    where?: MaterialNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNeeds to fetch.
     */
    orderBy?: MaterialNeedOrderByWithRelationInput | MaterialNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaterialNeeds
    **/
    _count?: true | MaterialNeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialNeedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialNeedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialNeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialNeedMaxAggregateInputType
  }

  export type GetMaterialNeedAggregateType<T extends MaterialNeedAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterialNeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterialNeed[P]>
      : GetScalarType<T[P], AggregateMaterialNeed[P]>
  }




  export type MaterialNeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialNeedWhereInput
    orderBy?: MaterialNeedOrderByWithAggregationInput | MaterialNeedOrderByWithAggregationInput[]
    by: MaterialNeedScalarFieldEnum[] | MaterialNeedScalarFieldEnum
    having?: MaterialNeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialNeedCountAggregateInputType | true
    _avg?: MaterialNeedAvgAggregateInputType
    _sum?: MaterialNeedSumAggregateInputType
    _min?: MaterialNeedMinAggregateInputType
    _max?: MaterialNeedMaxAggregateInputType
  }

  export type MaterialNeedGroupByOutputType = {
    id: number
    productId: number
    requiredAmount: Decimal
    villageId: number
    _count: MaterialNeedCountAggregateOutputType | null
    _avg: MaterialNeedAvgAggregateOutputType | null
    _sum: MaterialNeedSumAggregateOutputType | null
    _min: MaterialNeedMinAggregateOutputType | null
    _max: MaterialNeedMaxAggregateOutputType | null
  }

  type GetMaterialNeedGroupByPayload<T extends MaterialNeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialNeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialNeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialNeedGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialNeedGroupByOutputType[P]>
        }
      >
    >


  export type MaterialNeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    villageId?: boolean
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialNeed"]>

  export type MaterialNeedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    villageId?: boolean
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialNeed"]>

  export type MaterialNeedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    villageId?: boolean
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialNeed"]>

  export type MaterialNeedSelectScalar = {
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    villageId?: boolean
  }

  export type MaterialNeedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "requiredAmount" | "villageId", ExtArgs["result"]["materialNeed"]>
  export type MaterialNeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }
  export type MaterialNeedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }
  export type MaterialNeedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }

  export type $MaterialNeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaterialNeed"
    objects: {
      product: Prisma.$MaterialNamePayload<ExtArgs>
      village: Prisma.$VillagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number
      requiredAmount: Prisma.Decimal
      villageId: number
    }, ExtArgs["result"]["materialNeed"]>
    composites: {}
  }

  type MaterialNeedGetPayload<S extends boolean | null | undefined | MaterialNeedDefaultArgs> = $Result.GetResult<Prisma.$MaterialNeedPayload, S>

  type MaterialNeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaterialNeedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialNeedCountAggregateInputType | true
    }

  export interface MaterialNeedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaterialNeed'], meta: { name: 'MaterialNeed' } }
    /**
     * Find zero or one MaterialNeed that matches the filter.
     * @param {MaterialNeedFindUniqueArgs} args - Arguments to find a MaterialNeed
     * @example
     * // Get one MaterialNeed
     * const materialNeed = await prisma.materialNeed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialNeedFindUniqueArgs>(args: SelectSubset<T, MaterialNeedFindUniqueArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaterialNeed that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaterialNeedFindUniqueOrThrowArgs} args - Arguments to find a MaterialNeed
     * @example
     * // Get one MaterialNeed
     * const materialNeed = await prisma.materialNeed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialNeedFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialNeedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialNeed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNeedFindFirstArgs} args - Arguments to find a MaterialNeed
     * @example
     * // Get one MaterialNeed
     * const materialNeed = await prisma.materialNeed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialNeedFindFirstArgs>(args?: SelectSubset<T, MaterialNeedFindFirstArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialNeed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNeedFindFirstOrThrowArgs} args - Arguments to find a MaterialNeed
     * @example
     * // Get one MaterialNeed
     * const materialNeed = await prisma.materialNeed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialNeedFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialNeedFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaterialNeeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNeedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaterialNeeds
     * const materialNeeds = await prisma.materialNeed.findMany()
     * 
     * // Get first 10 MaterialNeeds
     * const materialNeeds = await prisma.materialNeed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialNeedWithIdOnly = await prisma.materialNeed.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialNeedFindManyArgs>(args?: SelectSubset<T, MaterialNeedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaterialNeed.
     * @param {MaterialNeedCreateArgs} args - Arguments to create a MaterialNeed.
     * @example
     * // Create one MaterialNeed
     * const MaterialNeed = await prisma.materialNeed.create({
     *   data: {
     *     // ... data to create a MaterialNeed
     *   }
     * })
     * 
     */
    create<T extends MaterialNeedCreateArgs>(args: SelectSubset<T, MaterialNeedCreateArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaterialNeeds.
     * @param {MaterialNeedCreateManyArgs} args - Arguments to create many MaterialNeeds.
     * @example
     * // Create many MaterialNeeds
     * const materialNeed = await prisma.materialNeed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialNeedCreateManyArgs>(args?: SelectSubset<T, MaterialNeedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaterialNeeds and returns the data saved in the database.
     * @param {MaterialNeedCreateManyAndReturnArgs} args - Arguments to create many MaterialNeeds.
     * @example
     * // Create many MaterialNeeds
     * const materialNeed = await prisma.materialNeed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaterialNeeds and only return the `id`
     * const materialNeedWithIdOnly = await prisma.materialNeed.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaterialNeedCreateManyAndReturnArgs>(args?: SelectSubset<T, MaterialNeedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaterialNeed.
     * @param {MaterialNeedDeleteArgs} args - Arguments to delete one MaterialNeed.
     * @example
     * // Delete one MaterialNeed
     * const MaterialNeed = await prisma.materialNeed.delete({
     *   where: {
     *     // ... filter to delete one MaterialNeed
     *   }
     * })
     * 
     */
    delete<T extends MaterialNeedDeleteArgs>(args: SelectSubset<T, MaterialNeedDeleteArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaterialNeed.
     * @param {MaterialNeedUpdateArgs} args - Arguments to update one MaterialNeed.
     * @example
     * // Update one MaterialNeed
     * const materialNeed = await prisma.materialNeed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialNeedUpdateArgs>(args: SelectSubset<T, MaterialNeedUpdateArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaterialNeeds.
     * @param {MaterialNeedDeleteManyArgs} args - Arguments to filter MaterialNeeds to delete.
     * @example
     * // Delete a few MaterialNeeds
     * const { count } = await prisma.materialNeed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialNeedDeleteManyArgs>(args?: SelectSubset<T, MaterialNeedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialNeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaterialNeeds
     * const materialNeed = await prisma.materialNeed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialNeedUpdateManyArgs>(args: SelectSubset<T, MaterialNeedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialNeeds and returns the data updated in the database.
     * @param {MaterialNeedUpdateManyAndReturnArgs} args - Arguments to update many MaterialNeeds.
     * @example
     * // Update many MaterialNeeds
     * const materialNeed = await prisma.materialNeed.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaterialNeeds and only return the `id`
     * const materialNeedWithIdOnly = await prisma.materialNeed.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaterialNeedUpdateManyAndReturnArgs>(args: SelectSubset<T, MaterialNeedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaterialNeed.
     * @param {MaterialNeedUpsertArgs} args - Arguments to update or create a MaterialNeed.
     * @example
     * // Update or create a MaterialNeed
     * const materialNeed = await prisma.materialNeed.upsert({
     *   create: {
     *     // ... data to create a MaterialNeed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaterialNeed we want to update
     *   }
     * })
     */
    upsert<T extends MaterialNeedUpsertArgs>(args: SelectSubset<T, MaterialNeedUpsertArgs<ExtArgs>>): Prisma__MaterialNeedClient<$Result.GetResult<Prisma.$MaterialNeedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaterialNeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNeedCountArgs} args - Arguments to filter MaterialNeeds to count.
     * @example
     * // Count the number of MaterialNeeds
     * const count = await prisma.materialNeed.count({
     *   where: {
     *     // ... the filter for the MaterialNeeds we want to count
     *   }
     * })
    **/
    count<T extends MaterialNeedCountArgs>(
      args?: Subset<T, MaterialNeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialNeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaterialNeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialNeedAggregateArgs>(args: Subset<T, MaterialNeedAggregateArgs>): Prisma.PrismaPromise<GetMaterialNeedAggregateType<T>>

    /**
     * Group by MaterialNeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialNeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialNeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialNeedGroupByArgs['orderBy'] }
        : { orderBy?: MaterialNeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialNeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialNeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaterialNeed model
   */
  readonly fields: MaterialNeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaterialNeed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialNeedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends MaterialNameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialNameDefaultArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    village<T extends VillageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VillageDefaultArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaterialNeed model
   */
  interface MaterialNeedFieldRefs {
    readonly id: FieldRef<"MaterialNeed", 'Int'>
    readonly productId: FieldRef<"MaterialNeed", 'Int'>
    readonly requiredAmount: FieldRef<"MaterialNeed", 'Decimal'>
    readonly villageId: FieldRef<"MaterialNeed", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MaterialNeed findUnique
   */
  export type MaterialNeedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * Filter, which MaterialNeed to fetch.
     */
    where: MaterialNeedWhereUniqueInput
  }

  /**
   * MaterialNeed findUniqueOrThrow
   */
  export type MaterialNeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * Filter, which MaterialNeed to fetch.
     */
    where: MaterialNeedWhereUniqueInput
  }

  /**
   * MaterialNeed findFirst
   */
  export type MaterialNeedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * Filter, which MaterialNeed to fetch.
     */
    where?: MaterialNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNeeds to fetch.
     */
    orderBy?: MaterialNeedOrderByWithRelationInput | MaterialNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialNeeds.
     */
    cursor?: MaterialNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialNeeds.
     */
    distinct?: MaterialNeedScalarFieldEnum | MaterialNeedScalarFieldEnum[]
  }

  /**
   * MaterialNeed findFirstOrThrow
   */
  export type MaterialNeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * Filter, which MaterialNeed to fetch.
     */
    where?: MaterialNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNeeds to fetch.
     */
    orderBy?: MaterialNeedOrderByWithRelationInput | MaterialNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialNeeds.
     */
    cursor?: MaterialNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialNeeds.
     */
    distinct?: MaterialNeedScalarFieldEnum | MaterialNeedScalarFieldEnum[]
  }

  /**
   * MaterialNeed findMany
   */
  export type MaterialNeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * Filter, which MaterialNeeds to fetch.
     */
    where?: MaterialNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialNeeds to fetch.
     */
    orderBy?: MaterialNeedOrderByWithRelationInput | MaterialNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaterialNeeds.
     */
    cursor?: MaterialNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialNeeds.
     */
    skip?: number
    distinct?: MaterialNeedScalarFieldEnum | MaterialNeedScalarFieldEnum[]
  }

  /**
   * MaterialNeed create
   */
  export type MaterialNeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * The data needed to create a MaterialNeed.
     */
    data: XOR<MaterialNeedCreateInput, MaterialNeedUncheckedCreateInput>
  }

  /**
   * MaterialNeed createMany
   */
  export type MaterialNeedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaterialNeeds.
     */
    data: MaterialNeedCreateManyInput | MaterialNeedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaterialNeed createManyAndReturn
   */
  export type MaterialNeedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * The data used to create many MaterialNeeds.
     */
    data: MaterialNeedCreateManyInput | MaterialNeedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialNeed update
   */
  export type MaterialNeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * The data needed to update a MaterialNeed.
     */
    data: XOR<MaterialNeedUpdateInput, MaterialNeedUncheckedUpdateInput>
    /**
     * Choose, which MaterialNeed to update.
     */
    where: MaterialNeedWhereUniqueInput
  }

  /**
   * MaterialNeed updateMany
   */
  export type MaterialNeedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaterialNeeds.
     */
    data: XOR<MaterialNeedUpdateManyMutationInput, MaterialNeedUncheckedUpdateManyInput>
    /**
     * Filter which MaterialNeeds to update
     */
    where?: MaterialNeedWhereInput
    /**
     * Limit how many MaterialNeeds to update.
     */
    limit?: number
  }

  /**
   * MaterialNeed updateManyAndReturn
   */
  export type MaterialNeedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * The data used to update MaterialNeeds.
     */
    data: XOR<MaterialNeedUpdateManyMutationInput, MaterialNeedUncheckedUpdateManyInput>
    /**
     * Filter which MaterialNeeds to update
     */
    where?: MaterialNeedWhereInput
    /**
     * Limit how many MaterialNeeds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialNeed upsert
   */
  export type MaterialNeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * The filter to search for the MaterialNeed to update in case it exists.
     */
    where: MaterialNeedWhereUniqueInput
    /**
     * In case the MaterialNeed found by the `where` argument doesn't exist, create a new MaterialNeed with this data.
     */
    create: XOR<MaterialNeedCreateInput, MaterialNeedUncheckedCreateInput>
    /**
     * In case the MaterialNeed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialNeedUpdateInput, MaterialNeedUncheckedUpdateInput>
  }

  /**
   * MaterialNeed delete
   */
  export type MaterialNeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
    /**
     * Filter which MaterialNeed to delete.
     */
    where: MaterialNeedWhereUniqueInput
  }

  /**
   * MaterialNeed deleteMany
   */
  export type MaterialNeedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialNeeds to delete
     */
    where?: MaterialNeedWhereInput
    /**
     * Limit how many MaterialNeeds to delete.
     */
    limit?: number
  }

  /**
   * MaterialNeed without action
   */
  export type MaterialNeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialNeed
     */
    select?: MaterialNeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialNeed
     */
    omit?: MaterialNeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialNeedInclude<ExtArgs> | null
  }


  /**
   * Model PipelineProgress
   */

  export type AggregatePipelineProgress = {
    _count: PipelineProgressCountAggregateOutputType | null
    _avg: PipelineProgressAvgAggregateOutputType | null
    _sum: PipelineProgressSumAggregateOutputType | null
    _min: PipelineProgressMinAggregateOutputType | null
    _max: PipelineProgressMaxAggregateOutputType | null
  }

  export type PipelineProgressAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    unitId: number | null
    villageId: number | null
  }

  export type PipelineProgressSumAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    unitId: number | null
    villageId: number | null
  }

  export type PipelineProgressMinAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    unitId: number | null
    villageId: number | null
  }

  export type PipelineProgressMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    requiredAmount: Decimal | null
    unitId: number | null
    villageId: number | null
  }

  export type PipelineProgressCountAggregateOutputType = {
    id: number
    productId: number
    requiredAmount: number
    unitId: number
    villageId: number
    _all: number
  }


  export type PipelineProgressAvgAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    unitId?: true
    villageId?: true
  }

  export type PipelineProgressSumAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    unitId?: true
    villageId?: true
  }

  export type PipelineProgressMinAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    unitId?: true
    villageId?: true
  }

  export type PipelineProgressMaxAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    unitId?: true
    villageId?: true
  }

  export type PipelineProgressCountAggregateInputType = {
    id?: true
    productId?: true
    requiredAmount?: true
    unitId?: true
    villageId?: true
    _all?: true
  }

  export type PipelineProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PipelineProgress to aggregate.
     */
    where?: PipelineProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineProgresses to fetch.
     */
    orderBy?: PipelineProgressOrderByWithRelationInput | PipelineProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PipelineProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PipelineProgresses
    **/
    _count?: true | PipelineProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PipelineProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PipelineProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PipelineProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PipelineProgressMaxAggregateInputType
  }

  export type GetPipelineProgressAggregateType<T extends PipelineProgressAggregateArgs> = {
        [P in keyof T & keyof AggregatePipelineProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePipelineProgress[P]>
      : GetScalarType<T[P], AggregatePipelineProgress[P]>
  }




  export type PipelineProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineProgressWhereInput
    orderBy?: PipelineProgressOrderByWithAggregationInput | PipelineProgressOrderByWithAggregationInput[]
    by: PipelineProgressScalarFieldEnum[] | PipelineProgressScalarFieldEnum
    having?: PipelineProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PipelineProgressCountAggregateInputType | true
    _avg?: PipelineProgressAvgAggregateInputType
    _sum?: PipelineProgressSumAggregateInputType
    _min?: PipelineProgressMinAggregateInputType
    _max?: PipelineProgressMaxAggregateInputType
  }

  export type PipelineProgressGroupByOutputType = {
    id: number
    productId: number
    requiredAmount: Decimal
    unitId: number
    villageId: number
    _count: PipelineProgressCountAggregateOutputType | null
    _avg: PipelineProgressAvgAggregateOutputType | null
    _sum: PipelineProgressSumAggregateOutputType | null
    _min: PipelineProgressMinAggregateOutputType | null
    _max: PipelineProgressMaxAggregateOutputType | null
  }

  type GetPipelineProgressGroupByPayload<T extends PipelineProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PipelineProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PipelineProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PipelineProgressGroupByOutputType[P]>
            : GetScalarType<T[P], PipelineProgressGroupByOutputType[P]>
        }
      >
    >


  export type PipelineProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    unitId?: boolean
    villageId?: boolean
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineProgress"]>

  export type PipelineProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    unitId?: boolean
    villageId?: boolean
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineProgress"]>

  export type PipelineProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    unitId?: boolean
    villageId?: boolean
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineProgress"]>

  export type PipelineProgressSelectScalar = {
    id?: boolean
    productId?: boolean
    requiredAmount?: boolean
    unitId?: boolean
    villageId?: boolean
  }

  export type PipelineProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "requiredAmount" | "unitId" | "villageId", ExtArgs["result"]["pipelineProgress"]>
  export type PipelineProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }
  export type PipelineProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }
  export type PipelineProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | MaterialNameDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    village?: boolean | VillageDefaultArgs<ExtArgs>
  }

  export type $PipelineProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PipelineProgress"
    objects: {
      product: Prisma.$MaterialNamePayload<ExtArgs>
      unit: Prisma.$UnitPayload<ExtArgs>
      village: Prisma.$VillagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number
      requiredAmount: Prisma.Decimal
      unitId: number
      villageId: number
    }, ExtArgs["result"]["pipelineProgress"]>
    composites: {}
  }

  type PipelineProgressGetPayload<S extends boolean | null | undefined | PipelineProgressDefaultArgs> = $Result.GetResult<Prisma.$PipelineProgressPayload, S>

  type PipelineProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PipelineProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PipelineProgressCountAggregateInputType | true
    }

  export interface PipelineProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PipelineProgress'], meta: { name: 'PipelineProgress' } }
    /**
     * Find zero or one PipelineProgress that matches the filter.
     * @param {PipelineProgressFindUniqueArgs} args - Arguments to find a PipelineProgress
     * @example
     * // Get one PipelineProgress
     * const pipelineProgress = await prisma.pipelineProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PipelineProgressFindUniqueArgs>(args: SelectSubset<T, PipelineProgressFindUniqueArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PipelineProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PipelineProgressFindUniqueOrThrowArgs} args - Arguments to find a PipelineProgress
     * @example
     * // Get one PipelineProgress
     * const pipelineProgress = await prisma.pipelineProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PipelineProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, PipelineProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PipelineProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineProgressFindFirstArgs} args - Arguments to find a PipelineProgress
     * @example
     * // Get one PipelineProgress
     * const pipelineProgress = await prisma.pipelineProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PipelineProgressFindFirstArgs>(args?: SelectSubset<T, PipelineProgressFindFirstArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PipelineProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineProgressFindFirstOrThrowArgs} args - Arguments to find a PipelineProgress
     * @example
     * // Get one PipelineProgress
     * const pipelineProgress = await prisma.pipelineProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PipelineProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, PipelineProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PipelineProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PipelineProgresses
     * const pipelineProgresses = await prisma.pipelineProgress.findMany()
     * 
     * // Get first 10 PipelineProgresses
     * const pipelineProgresses = await prisma.pipelineProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pipelineProgressWithIdOnly = await prisma.pipelineProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PipelineProgressFindManyArgs>(args?: SelectSubset<T, PipelineProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PipelineProgress.
     * @param {PipelineProgressCreateArgs} args - Arguments to create a PipelineProgress.
     * @example
     * // Create one PipelineProgress
     * const PipelineProgress = await prisma.pipelineProgress.create({
     *   data: {
     *     // ... data to create a PipelineProgress
     *   }
     * })
     * 
     */
    create<T extends PipelineProgressCreateArgs>(args: SelectSubset<T, PipelineProgressCreateArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PipelineProgresses.
     * @param {PipelineProgressCreateManyArgs} args - Arguments to create many PipelineProgresses.
     * @example
     * // Create many PipelineProgresses
     * const pipelineProgress = await prisma.pipelineProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PipelineProgressCreateManyArgs>(args?: SelectSubset<T, PipelineProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PipelineProgresses and returns the data saved in the database.
     * @param {PipelineProgressCreateManyAndReturnArgs} args - Arguments to create many PipelineProgresses.
     * @example
     * // Create many PipelineProgresses
     * const pipelineProgress = await prisma.pipelineProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PipelineProgresses and only return the `id`
     * const pipelineProgressWithIdOnly = await prisma.pipelineProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PipelineProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, PipelineProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PipelineProgress.
     * @param {PipelineProgressDeleteArgs} args - Arguments to delete one PipelineProgress.
     * @example
     * // Delete one PipelineProgress
     * const PipelineProgress = await prisma.pipelineProgress.delete({
     *   where: {
     *     // ... filter to delete one PipelineProgress
     *   }
     * })
     * 
     */
    delete<T extends PipelineProgressDeleteArgs>(args: SelectSubset<T, PipelineProgressDeleteArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PipelineProgress.
     * @param {PipelineProgressUpdateArgs} args - Arguments to update one PipelineProgress.
     * @example
     * // Update one PipelineProgress
     * const pipelineProgress = await prisma.pipelineProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PipelineProgressUpdateArgs>(args: SelectSubset<T, PipelineProgressUpdateArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PipelineProgresses.
     * @param {PipelineProgressDeleteManyArgs} args - Arguments to filter PipelineProgresses to delete.
     * @example
     * // Delete a few PipelineProgresses
     * const { count } = await prisma.pipelineProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PipelineProgressDeleteManyArgs>(args?: SelectSubset<T, PipelineProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PipelineProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PipelineProgresses
     * const pipelineProgress = await prisma.pipelineProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PipelineProgressUpdateManyArgs>(args: SelectSubset<T, PipelineProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PipelineProgresses and returns the data updated in the database.
     * @param {PipelineProgressUpdateManyAndReturnArgs} args - Arguments to update many PipelineProgresses.
     * @example
     * // Update many PipelineProgresses
     * const pipelineProgress = await prisma.pipelineProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PipelineProgresses and only return the `id`
     * const pipelineProgressWithIdOnly = await prisma.pipelineProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PipelineProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, PipelineProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PipelineProgress.
     * @param {PipelineProgressUpsertArgs} args - Arguments to update or create a PipelineProgress.
     * @example
     * // Update or create a PipelineProgress
     * const pipelineProgress = await prisma.pipelineProgress.upsert({
     *   create: {
     *     // ... data to create a PipelineProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PipelineProgress we want to update
     *   }
     * })
     */
    upsert<T extends PipelineProgressUpsertArgs>(args: SelectSubset<T, PipelineProgressUpsertArgs<ExtArgs>>): Prisma__PipelineProgressClient<$Result.GetResult<Prisma.$PipelineProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PipelineProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineProgressCountArgs} args - Arguments to filter PipelineProgresses to count.
     * @example
     * // Count the number of PipelineProgresses
     * const count = await prisma.pipelineProgress.count({
     *   where: {
     *     // ... the filter for the PipelineProgresses we want to count
     *   }
     * })
    **/
    count<T extends PipelineProgressCountArgs>(
      args?: Subset<T, PipelineProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PipelineProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PipelineProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PipelineProgressAggregateArgs>(args: Subset<T, PipelineProgressAggregateArgs>): Prisma.PrismaPromise<GetPipelineProgressAggregateType<T>>

    /**
     * Group by PipelineProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PipelineProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PipelineProgressGroupByArgs['orderBy'] }
        : { orderBy?: PipelineProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PipelineProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPipelineProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PipelineProgress model
   */
  readonly fields: PipelineProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PipelineProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PipelineProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends MaterialNameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialNameDefaultArgs<ExtArgs>>): Prisma__MaterialNameClient<$Result.GetResult<Prisma.$MaterialNamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    unit<T extends UnitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitDefaultArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    village<T extends VillageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VillageDefaultArgs<ExtArgs>>): Prisma__VillageClient<$Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PipelineProgress model
   */
  interface PipelineProgressFieldRefs {
    readonly id: FieldRef<"PipelineProgress", 'Int'>
    readonly productId: FieldRef<"PipelineProgress", 'Int'>
    readonly requiredAmount: FieldRef<"PipelineProgress", 'Decimal'>
    readonly unitId: FieldRef<"PipelineProgress", 'Int'>
    readonly villageId: FieldRef<"PipelineProgress", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PipelineProgress findUnique
   */
  export type PipelineProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * Filter, which PipelineProgress to fetch.
     */
    where: PipelineProgressWhereUniqueInput
  }

  /**
   * PipelineProgress findUniqueOrThrow
   */
  export type PipelineProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * Filter, which PipelineProgress to fetch.
     */
    where: PipelineProgressWhereUniqueInput
  }

  /**
   * PipelineProgress findFirst
   */
  export type PipelineProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * Filter, which PipelineProgress to fetch.
     */
    where?: PipelineProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineProgresses to fetch.
     */
    orderBy?: PipelineProgressOrderByWithRelationInput | PipelineProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PipelineProgresses.
     */
    cursor?: PipelineProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PipelineProgresses.
     */
    distinct?: PipelineProgressScalarFieldEnum | PipelineProgressScalarFieldEnum[]
  }

  /**
   * PipelineProgress findFirstOrThrow
   */
  export type PipelineProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * Filter, which PipelineProgress to fetch.
     */
    where?: PipelineProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineProgresses to fetch.
     */
    orderBy?: PipelineProgressOrderByWithRelationInput | PipelineProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PipelineProgresses.
     */
    cursor?: PipelineProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PipelineProgresses.
     */
    distinct?: PipelineProgressScalarFieldEnum | PipelineProgressScalarFieldEnum[]
  }

  /**
   * PipelineProgress findMany
   */
  export type PipelineProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * Filter, which PipelineProgresses to fetch.
     */
    where?: PipelineProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineProgresses to fetch.
     */
    orderBy?: PipelineProgressOrderByWithRelationInput | PipelineProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PipelineProgresses.
     */
    cursor?: PipelineProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineProgresses.
     */
    skip?: number
    distinct?: PipelineProgressScalarFieldEnum | PipelineProgressScalarFieldEnum[]
  }

  /**
   * PipelineProgress create
   */
  export type PipelineProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a PipelineProgress.
     */
    data: XOR<PipelineProgressCreateInput, PipelineProgressUncheckedCreateInput>
  }

  /**
   * PipelineProgress createMany
   */
  export type PipelineProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PipelineProgresses.
     */
    data: PipelineProgressCreateManyInput | PipelineProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PipelineProgress createManyAndReturn
   */
  export type PipelineProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * The data used to create many PipelineProgresses.
     */
    data: PipelineProgressCreateManyInput | PipelineProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PipelineProgress update
   */
  export type PipelineProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a PipelineProgress.
     */
    data: XOR<PipelineProgressUpdateInput, PipelineProgressUncheckedUpdateInput>
    /**
     * Choose, which PipelineProgress to update.
     */
    where: PipelineProgressWhereUniqueInput
  }

  /**
   * PipelineProgress updateMany
   */
  export type PipelineProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PipelineProgresses.
     */
    data: XOR<PipelineProgressUpdateManyMutationInput, PipelineProgressUncheckedUpdateManyInput>
    /**
     * Filter which PipelineProgresses to update
     */
    where?: PipelineProgressWhereInput
    /**
     * Limit how many PipelineProgresses to update.
     */
    limit?: number
  }

  /**
   * PipelineProgress updateManyAndReturn
   */
  export type PipelineProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * The data used to update PipelineProgresses.
     */
    data: XOR<PipelineProgressUpdateManyMutationInput, PipelineProgressUncheckedUpdateManyInput>
    /**
     * Filter which PipelineProgresses to update
     */
    where?: PipelineProgressWhereInput
    /**
     * Limit how many PipelineProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PipelineProgress upsert
   */
  export type PipelineProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the PipelineProgress to update in case it exists.
     */
    where: PipelineProgressWhereUniqueInput
    /**
     * In case the PipelineProgress found by the `where` argument doesn't exist, create a new PipelineProgress with this data.
     */
    create: XOR<PipelineProgressCreateInput, PipelineProgressUncheckedCreateInput>
    /**
     * In case the PipelineProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PipelineProgressUpdateInput, PipelineProgressUncheckedUpdateInput>
  }

  /**
   * PipelineProgress delete
   */
  export type PipelineProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
    /**
     * Filter which PipelineProgress to delete.
     */
    where: PipelineProgressWhereUniqueInput
  }

  /**
   * PipelineProgress deleteMany
   */
  export type PipelineProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PipelineProgresses to delete
     */
    where?: PipelineProgressWhereInput
    /**
     * Limit how many PipelineProgresses to delete.
     */
    limit?: number
  }

  /**
   * PipelineProgress without action
   */
  export type PipelineProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineProgress
     */
    select?: PipelineProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineProgress
     */
    omit?: PipelineProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineProgressInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firebaseUid: 'firebaseUid',
    email: 'email',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    alias: 'alias',
    name: 'name',
    address: 'address',
    country: 'country',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const UnitScalarFieldEnum: {
    id: 'id',
    unit: 'unit'
  };

  export type UnitScalarFieldEnum = (typeof UnitScalarFieldEnum)[keyof typeof UnitScalarFieldEnum]


  export const CurrencyScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name'
  };

  export type CurrencyScalarFieldEnum = (typeof CurrencyScalarFieldEnum)[keyof typeof CurrencyScalarFieldEnum]


  export const MaterialGroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type MaterialGroupScalarFieldEnum = (typeof MaterialGroupScalarFieldEnum)[keyof typeof MaterialGroupScalarFieldEnum]


  export const MaterialTypeScalarFieldEnum: {
    id: 'id',
    type: 'type',
    groupId: 'groupId'
  };

  export type MaterialTypeScalarFieldEnum = (typeof MaterialTypeScalarFieldEnum)[keyof typeof MaterialTypeScalarFieldEnum]


  export const MaterialNameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    dn: 'dn',
    pn: 'pn',
    degree: 'degree',
    description: 'description',
    typeId: 'typeId'
  };

  export type MaterialNameScalarFieldEnum = (typeof MaterialNameScalarFieldEnum)[keyof typeof MaterialNameScalarFieldEnum]


  export const ShipmentScalarFieldEnum: {
    id: 'id',
    alias: 'alias',
    status: 'status',
    declaration_number: 'declaration_number',
    declaration_date: 'declaration_date',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type ShipmentScalarFieldEnum = (typeof ShipmentScalarFieldEnum)[keyof typeof ShipmentScalarFieldEnum]


  export const ShipmentFileScalarFieldEnum: {
    id: 'id',
    shipmentId: 'shipmentId',
    fileName: 'fileName',
    fileType: 'fileType',
    fileData: 'fileData'
  };

  export type ShipmentFileScalarFieldEnum = (typeof ShipmentFileScalarFieldEnum)[keyof typeof ShipmentFileScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    vendorId: 'vendorId',
    invoiceNumber: 'invoiceNumber',
    invoiceDate: 'invoiceDate',
    totalAmount: 'totalAmount',
    isArrived: 'isArrived',
    userId: 'userId',
    createdAt: 'createdAt',
    currencyId: 'currencyId',
    shipmentId: 'shipmentId'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const InvoiceItemScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    productId: 'productId',
    description: 'description',
    quantity: 'quantity',
    unitId: 'unitId',
    unitPrice: 'unitPrice',
    total: 'total'
  };

  export type InvoiceItemScalarFieldEnum = (typeof InvoiceItemScalarFieldEnum)[keyof typeof InvoiceItemScalarFieldEnum]


  export const FreightScalarFieldEnum: {
    id: 'id',
    truckNumber: 'truckNumber',
    forwarder: 'forwarder',
    billNumber: 'billNumber',
    billDate: 'billDate',
    freightRate: 'freightRate',
    currencyId: 'currencyId',
    shipmentId: 'shipmentId',
    isArrived: 'isArrived',
    userId: 'userId'
  };

  export type FreightScalarFieldEnum = (typeof FreightScalarFieldEnum)[keyof typeof FreightScalarFieldEnum]


  export const FreightInvoiceScalarFieldEnum: {
    freightId: 'freightId',
    invoiceId: 'invoiceId'
  };

  export type FreightInvoiceScalarFieldEnum = (typeof FreightInvoiceScalarFieldEnum)[keyof typeof FreightInvoiceScalarFieldEnum]


  export const VillageScalarFieldEnum: {
    id: 'id',
    name_en: 'name_en',
    name_ge: 'name_ge',
    municipality: 'municipality',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type VillageScalarFieldEnum = (typeof VillageScalarFieldEnum)[keyof typeof VillageScalarFieldEnum]


  export const MaterialNeedScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    requiredAmount: 'requiredAmount',
    villageId: 'villageId'
  };

  export type MaterialNeedScalarFieldEnum = (typeof MaterialNeedScalarFieldEnum)[keyof typeof MaterialNeedScalarFieldEnum]


  export const PipelineProgressScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    requiredAmount: 'requiredAmount',
    unitId: 'unitId',
    villageId: 'villageId'
  };

  export type PipelineProgressScalarFieldEnum = (typeof PipelineProgressScalarFieldEnum)[keyof typeof PipelineProgressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ShipmentStatus'
   */
  export type EnumShipmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShipmentStatus'>
    


  /**
   * Reference to a field of type 'ShipmentStatus[]'
   */
  export type ListEnumShipmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShipmentStatus[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firebaseUid?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Vendor?: VendorListRelationFilter
    Invoice?: InvoiceListRelationFilter
    Shipment?: ShipmentListRelationFilter
    Freight?: FreightListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Vendor?: VendorOrderByRelationAggregateInput
    Invoice?: InvoiceOrderByRelationAggregateInput
    Shipment?: ShipmentOrderByRelationAggregateInput
    Freight?: FreightOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    firebaseUid?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Vendor?: VendorListRelationFilter
    Invoice?: InvoiceListRelationFilter
    Shipment?: ShipmentListRelationFilter
    Freight?: FreightListRelationFilter
  }, "id" | "firebaseUid" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firebaseUid?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: IntFilter<"Vendor"> | number
    alias?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    address?: StringFilter<"Vendor"> | string
    country?: StringFilter<"Vendor"> | string
    userId?: IntFilter<"Vendor"> | number
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Invoice?: InvoiceListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    alias?: SortOrder
    name?: SortOrder
    address?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    Invoice?: InvoiceOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    alias?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    name?: StringFilter<"Vendor"> | string
    address?: StringFilter<"Vendor"> | string
    country?: StringFilter<"Vendor"> | string
    userId?: IntFilter<"Vendor"> | number
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Invoice?: InvoiceListRelationFilter
  }, "id" | "alias">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    alias?: SortOrder
    name?: SortOrder
    address?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _avg?: VendorAvgOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
    _sum?: VendorSumOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vendor"> | number
    alias?: StringWithAggregatesFilter<"Vendor"> | string
    name?: StringWithAggregatesFilter<"Vendor"> | string
    address?: StringWithAggregatesFilter<"Vendor"> | string
    country?: StringWithAggregatesFilter<"Vendor"> | string
    userId?: IntWithAggregatesFilter<"Vendor"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
  }

  export type UnitWhereInput = {
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    id?: IntFilter<"Unit"> | number
    unit?: StringFilter<"Unit"> | string
    InvoiceItem?: InvoiceItemListRelationFilter
    PipelineProgress?: PipelineProgressListRelationFilter
  }

  export type UnitOrderByWithRelationInput = {
    id?: SortOrder
    unit?: SortOrder
    InvoiceItem?: InvoiceItemOrderByRelationAggregateInput
    PipelineProgress?: PipelineProgressOrderByRelationAggregateInput
  }

  export type UnitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    unit?: string
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    InvoiceItem?: InvoiceItemListRelationFilter
    PipelineProgress?: PipelineProgressListRelationFilter
  }, "id" | "unit">

  export type UnitOrderByWithAggregationInput = {
    id?: SortOrder
    unit?: SortOrder
    _count?: UnitCountOrderByAggregateInput
    _avg?: UnitAvgOrderByAggregateInput
    _max?: UnitMaxOrderByAggregateInput
    _min?: UnitMinOrderByAggregateInput
    _sum?: UnitSumOrderByAggregateInput
  }

  export type UnitScalarWhereWithAggregatesInput = {
    AND?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    OR?: UnitScalarWhereWithAggregatesInput[]
    NOT?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Unit"> | number
    unit?: StringWithAggregatesFilter<"Unit"> | string
  }

  export type CurrencyWhereInput = {
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    id?: IntFilter<"Currency"> | number
    code?: StringFilter<"Currency"> | string
    name?: StringFilter<"Currency"> | string
    Invoice?: InvoiceListRelationFilter
    Freight?: FreightListRelationFilter
  }

  export type CurrencyOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    Invoice?: InvoiceOrderByRelationAggregateInput
    Freight?: FreightOrderByRelationAggregateInput
  }

  export type CurrencyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    name?: StringFilter<"Currency"> | string
    Invoice?: InvoiceListRelationFilter
    Freight?: FreightListRelationFilter
  }, "id" | "code">

  export type CurrencyOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    _count?: CurrencyCountOrderByAggregateInput
    _avg?: CurrencyAvgOrderByAggregateInput
    _max?: CurrencyMaxOrderByAggregateInput
    _min?: CurrencyMinOrderByAggregateInput
    _sum?: CurrencySumOrderByAggregateInput
  }

  export type CurrencyScalarWhereWithAggregatesInput = {
    AND?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    OR?: CurrencyScalarWhereWithAggregatesInput[]
    NOT?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Currency"> | number
    code?: StringWithAggregatesFilter<"Currency"> | string
    name?: StringWithAggregatesFilter<"Currency"> | string
  }

  export type MaterialGroupWhereInput = {
    AND?: MaterialGroupWhereInput | MaterialGroupWhereInput[]
    OR?: MaterialGroupWhereInput[]
    NOT?: MaterialGroupWhereInput | MaterialGroupWhereInput[]
    id?: IntFilter<"MaterialGroup"> | number
    name?: StringFilter<"MaterialGroup"> | string
    description?: StringFilter<"MaterialGroup"> | string
    MaterialType?: MaterialTypeListRelationFilter
  }

  export type MaterialGroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    MaterialType?: MaterialTypeOrderByRelationAggregateInput
  }

  export type MaterialGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: MaterialGroupWhereInput | MaterialGroupWhereInput[]
    OR?: MaterialGroupWhereInput[]
    NOT?: MaterialGroupWhereInput | MaterialGroupWhereInput[]
    description?: StringFilter<"MaterialGroup"> | string
    MaterialType?: MaterialTypeListRelationFilter
  }, "id" | "name">

  export type MaterialGroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: MaterialGroupCountOrderByAggregateInput
    _avg?: MaterialGroupAvgOrderByAggregateInput
    _max?: MaterialGroupMaxOrderByAggregateInput
    _min?: MaterialGroupMinOrderByAggregateInput
    _sum?: MaterialGroupSumOrderByAggregateInput
  }

  export type MaterialGroupScalarWhereWithAggregatesInput = {
    AND?: MaterialGroupScalarWhereWithAggregatesInput | MaterialGroupScalarWhereWithAggregatesInput[]
    OR?: MaterialGroupScalarWhereWithAggregatesInput[]
    NOT?: MaterialGroupScalarWhereWithAggregatesInput | MaterialGroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MaterialGroup"> | number
    name?: StringWithAggregatesFilter<"MaterialGroup"> | string
    description?: StringWithAggregatesFilter<"MaterialGroup"> | string
  }

  export type MaterialTypeWhereInput = {
    AND?: MaterialTypeWhereInput | MaterialTypeWhereInput[]
    OR?: MaterialTypeWhereInput[]
    NOT?: MaterialTypeWhereInput | MaterialTypeWhereInput[]
    id?: IntFilter<"MaterialType"> | number
    type?: StringFilter<"MaterialType"> | string
    groupId?: IntFilter<"MaterialType"> | number
    group?: XOR<MaterialGroupScalarRelationFilter, MaterialGroupWhereInput>
    MaterialName?: MaterialNameListRelationFilter
  }

  export type MaterialTypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    groupId?: SortOrder
    group?: MaterialGroupOrderByWithRelationInput
    MaterialName?: MaterialNameOrderByRelationAggregateInput
  }

  export type MaterialTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    type?: string
    AND?: MaterialTypeWhereInput | MaterialTypeWhereInput[]
    OR?: MaterialTypeWhereInput[]
    NOT?: MaterialTypeWhereInput | MaterialTypeWhereInput[]
    groupId?: IntFilter<"MaterialType"> | number
    group?: XOR<MaterialGroupScalarRelationFilter, MaterialGroupWhereInput>
    MaterialName?: MaterialNameListRelationFilter
  }, "id" | "type">

  export type MaterialTypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    groupId?: SortOrder
    _count?: MaterialTypeCountOrderByAggregateInput
    _avg?: MaterialTypeAvgOrderByAggregateInput
    _max?: MaterialTypeMaxOrderByAggregateInput
    _min?: MaterialTypeMinOrderByAggregateInput
    _sum?: MaterialTypeSumOrderByAggregateInput
  }

  export type MaterialTypeScalarWhereWithAggregatesInput = {
    AND?: MaterialTypeScalarWhereWithAggregatesInput | MaterialTypeScalarWhereWithAggregatesInput[]
    OR?: MaterialTypeScalarWhereWithAggregatesInput[]
    NOT?: MaterialTypeScalarWhereWithAggregatesInput | MaterialTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MaterialType"> | number
    type?: StringWithAggregatesFilter<"MaterialType"> | string
    groupId?: IntWithAggregatesFilter<"MaterialType"> | number
  }

  export type MaterialNameWhereInput = {
    AND?: MaterialNameWhereInput | MaterialNameWhereInput[]
    OR?: MaterialNameWhereInput[]
    NOT?: MaterialNameWhereInput | MaterialNameWhereInput[]
    id?: IntFilter<"MaterialName"> | number
    name?: StringFilter<"MaterialName"> | string
    dn?: StringFilter<"MaterialName"> | string
    pn?: StringFilter<"MaterialName"> | string
    degree?: IntFilter<"MaterialName"> | number
    description?: StringFilter<"MaterialName"> | string
    typeId?: IntFilter<"MaterialName"> | number
    type?: XOR<MaterialTypeScalarRelationFilter, MaterialTypeWhereInput>
    InvoiceItem?: InvoiceItemListRelationFilter
    MaterialNeed?: MaterialNeedListRelationFilter
    PipelineProgress?: PipelineProgressListRelationFilter
  }

  export type MaterialNameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    dn?: SortOrder
    pn?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    type?: MaterialTypeOrderByWithRelationInput
    InvoiceItem?: InvoiceItemOrderByRelationAggregateInput
    MaterialNeed?: MaterialNeedOrderByRelationAggregateInput
    PipelineProgress?: PipelineProgressOrderByRelationAggregateInput
  }

  export type MaterialNameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: MaterialNameWhereInput | MaterialNameWhereInput[]
    OR?: MaterialNameWhereInput[]
    NOT?: MaterialNameWhereInput | MaterialNameWhereInput[]
    dn?: StringFilter<"MaterialName"> | string
    pn?: StringFilter<"MaterialName"> | string
    degree?: IntFilter<"MaterialName"> | number
    description?: StringFilter<"MaterialName"> | string
    typeId?: IntFilter<"MaterialName"> | number
    type?: XOR<MaterialTypeScalarRelationFilter, MaterialTypeWhereInput>
    InvoiceItem?: InvoiceItemListRelationFilter
    MaterialNeed?: MaterialNeedListRelationFilter
    PipelineProgress?: PipelineProgressListRelationFilter
  }, "id" | "name">

  export type MaterialNameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    dn?: SortOrder
    pn?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    _count?: MaterialNameCountOrderByAggregateInput
    _avg?: MaterialNameAvgOrderByAggregateInput
    _max?: MaterialNameMaxOrderByAggregateInput
    _min?: MaterialNameMinOrderByAggregateInput
    _sum?: MaterialNameSumOrderByAggregateInput
  }

  export type MaterialNameScalarWhereWithAggregatesInput = {
    AND?: MaterialNameScalarWhereWithAggregatesInput | MaterialNameScalarWhereWithAggregatesInput[]
    OR?: MaterialNameScalarWhereWithAggregatesInput[]
    NOT?: MaterialNameScalarWhereWithAggregatesInput | MaterialNameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MaterialName"> | number
    name?: StringWithAggregatesFilter<"MaterialName"> | string
    dn?: StringWithAggregatesFilter<"MaterialName"> | string
    pn?: StringWithAggregatesFilter<"MaterialName"> | string
    degree?: IntWithAggregatesFilter<"MaterialName"> | number
    description?: StringWithAggregatesFilter<"MaterialName"> | string
    typeId?: IntWithAggregatesFilter<"MaterialName"> | number
  }

  export type ShipmentWhereInput = {
    AND?: ShipmentWhereInput | ShipmentWhereInput[]
    OR?: ShipmentWhereInput[]
    NOT?: ShipmentWhereInput | ShipmentWhereInput[]
    id?: IntFilter<"Shipment"> | number
    alias?: StringFilter<"Shipment"> | string
    status?: EnumShipmentStatusFilter<"Shipment"> | $Enums.ShipmentStatus
    declaration_number?: StringNullableFilter<"Shipment"> | string | null
    declaration_date?: DateTimeNullableFilter<"Shipment"> | Date | string | null
    userId?: IntFilter<"Shipment"> | number
    createdAt?: DateTimeFilter<"Shipment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Files?: ShipmentFileListRelationFilter
    Freights?: FreightListRelationFilter
    Invoices?: InvoiceListRelationFilter
  }

  export type ShipmentOrderByWithRelationInput = {
    id?: SortOrder
    alias?: SortOrder
    status?: SortOrder
    declaration_number?: SortOrderInput | SortOrder
    declaration_date?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    Files?: ShipmentFileOrderByRelationAggregateInput
    Freights?: FreightOrderByRelationAggregateInput
    Invoices?: InvoiceOrderByRelationAggregateInput
  }

  export type ShipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    alias?: string
    AND?: ShipmentWhereInput | ShipmentWhereInput[]
    OR?: ShipmentWhereInput[]
    NOT?: ShipmentWhereInput | ShipmentWhereInput[]
    status?: EnumShipmentStatusFilter<"Shipment"> | $Enums.ShipmentStatus
    declaration_number?: StringNullableFilter<"Shipment"> | string | null
    declaration_date?: DateTimeNullableFilter<"Shipment"> | Date | string | null
    userId?: IntFilter<"Shipment"> | number
    createdAt?: DateTimeFilter<"Shipment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Files?: ShipmentFileListRelationFilter
    Freights?: FreightListRelationFilter
    Invoices?: InvoiceListRelationFilter
  }, "id" | "alias">

  export type ShipmentOrderByWithAggregationInput = {
    id?: SortOrder
    alias?: SortOrder
    status?: SortOrder
    declaration_number?: SortOrderInput | SortOrder
    declaration_date?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: ShipmentCountOrderByAggregateInput
    _avg?: ShipmentAvgOrderByAggregateInput
    _max?: ShipmentMaxOrderByAggregateInput
    _min?: ShipmentMinOrderByAggregateInput
    _sum?: ShipmentSumOrderByAggregateInput
  }

  export type ShipmentScalarWhereWithAggregatesInput = {
    AND?: ShipmentScalarWhereWithAggregatesInput | ShipmentScalarWhereWithAggregatesInput[]
    OR?: ShipmentScalarWhereWithAggregatesInput[]
    NOT?: ShipmentScalarWhereWithAggregatesInput | ShipmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Shipment"> | number
    alias?: StringWithAggregatesFilter<"Shipment"> | string
    status?: EnumShipmentStatusWithAggregatesFilter<"Shipment"> | $Enums.ShipmentStatus
    declaration_number?: StringNullableWithAggregatesFilter<"Shipment"> | string | null
    declaration_date?: DateTimeNullableWithAggregatesFilter<"Shipment"> | Date | string | null
    userId?: IntWithAggregatesFilter<"Shipment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Shipment"> | Date | string
  }

  export type ShipmentFileWhereInput = {
    AND?: ShipmentFileWhereInput | ShipmentFileWhereInput[]
    OR?: ShipmentFileWhereInput[]
    NOT?: ShipmentFileWhereInput | ShipmentFileWhereInput[]
    id?: IntFilter<"ShipmentFile"> | number
    shipmentId?: IntFilter<"ShipmentFile"> | number
    fileName?: StringFilter<"ShipmentFile"> | string
    fileType?: StringNullableFilter<"ShipmentFile"> | string | null
    fileData?: BytesNullableFilter<"ShipmentFile"> | Uint8Array | null
    shipment?: XOR<ShipmentScalarRelationFilter, ShipmentWhereInput>
  }

  export type ShipmentFileOrderByWithRelationInput = {
    id?: SortOrder
    shipmentId?: SortOrder
    fileName?: SortOrder
    fileType?: SortOrderInput | SortOrder
    fileData?: SortOrderInput | SortOrder
    shipment?: ShipmentOrderByWithRelationInput
  }

  export type ShipmentFileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShipmentFileWhereInput | ShipmentFileWhereInput[]
    OR?: ShipmentFileWhereInput[]
    NOT?: ShipmentFileWhereInput | ShipmentFileWhereInput[]
    shipmentId?: IntFilter<"ShipmentFile"> | number
    fileName?: StringFilter<"ShipmentFile"> | string
    fileType?: StringNullableFilter<"ShipmentFile"> | string | null
    fileData?: BytesNullableFilter<"ShipmentFile"> | Uint8Array | null
    shipment?: XOR<ShipmentScalarRelationFilter, ShipmentWhereInput>
  }, "id">

  export type ShipmentFileOrderByWithAggregationInput = {
    id?: SortOrder
    shipmentId?: SortOrder
    fileName?: SortOrder
    fileType?: SortOrderInput | SortOrder
    fileData?: SortOrderInput | SortOrder
    _count?: ShipmentFileCountOrderByAggregateInput
    _avg?: ShipmentFileAvgOrderByAggregateInput
    _max?: ShipmentFileMaxOrderByAggregateInput
    _min?: ShipmentFileMinOrderByAggregateInput
    _sum?: ShipmentFileSumOrderByAggregateInput
  }

  export type ShipmentFileScalarWhereWithAggregatesInput = {
    AND?: ShipmentFileScalarWhereWithAggregatesInput | ShipmentFileScalarWhereWithAggregatesInput[]
    OR?: ShipmentFileScalarWhereWithAggregatesInput[]
    NOT?: ShipmentFileScalarWhereWithAggregatesInput | ShipmentFileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShipmentFile"> | number
    shipmentId?: IntWithAggregatesFilter<"ShipmentFile"> | number
    fileName?: StringWithAggregatesFilter<"ShipmentFile"> | string
    fileType?: StringNullableWithAggregatesFilter<"ShipmentFile"> | string | null
    fileData?: BytesNullableWithAggregatesFilter<"ShipmentFile"> | Uint8Array | null
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: IntFilter<"Invoice"> | number
    vendorId?: IntFilter<"Invoice"> | number
    invoiceNumber?: StringFilter<"Invoice"> | string
    invoiceDate?: DateTimeFilter<"Invoice"> | Date | string
    totalAmount?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    isArrived?: BoolNullableFilter<"Invoice"> | boolean | null
    userId?: IntFilter<"Invoice"> | number
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    currencyId?: IntFilter<"Invoice"> | number
    shipmentId?: IntFilter<"Invoice"> | number
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    shipment?: XOR<ShipmentScalarRelationFilter, ShipmentWhereInput>
    Items?: InvoiceItemListRelationFilter
    Freights?: FreightInvoiceListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    vendorId?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    totalAmount?: SortOrder
    isArrived?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
    vendor?: VendorOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    currency?: CurrencyOrderByWithRelationInput
    shipment?: ShipmentOrderByWithRelationInput
    Items?: InvoiceItemOrderByRelationAggregateInput
    Freights?: FreightInvoiceOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    vendorId?: IntFilter<"Invoice"> | number
    invoiceNumber?: StringFilter<"Invoice"> | string
    invoiceDate?: DateTimeFilter<"Invoice"> | Date | string
    totalAmount?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    isArrived?: BoolNullableFilter<"Invoice"> | boolean | null
    userId?: IntFilter<"Invoice"> | number
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    currencyId?: IntFilter<"Invoice"> | number
    shipmentId?: IntFilter<"Invoice"> | number
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    shipment?: XOR<ShipmentScalarRelationFilter, ShipmentWhereInput>
    Items?: InvoiceItemListRelationFilter
    Freights?: FreightInvoiceListRelationFilter
  }, "id">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    vendorId?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    totalAmount?: SortOrder
    isArrived?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invoice"> | number
    vendorId?: IntWithAggregatesFilter<"Invoice"> | number
    invoiceNumber?: StringWithAggregatesFilter<"Invoice"> | string
    invoiceDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    totalAmount?: DecimalWithAggregatesFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    isArrived?: BoolNullableWithAggregatesFilter<"Invoice"> | boolean | null
    userId?: IntWithAggregatesFilter<"Invoice"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    currencyId?: IntWithAggregatesFilter<"Invoice"> | number
    shipmentId?: IntWithAggregatesFilter<"Invoice"> | number
  }

  export type InvoiceItemWhereInput = {
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    id?: IntFilter<"InvoiceItem"> | number
    invoiceId?: IntFilter<"InvoiceItem"> | number
    productId?: IntFilter<"InvoiceItem"> | number
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitId?: IntFilter<"InvoiceItem"> | number
    unitPrice?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    total?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    product?: XOR<MaterialNameScalarRelationFilter, MaterialNameWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
  }

  export type InvoiceItemOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    productId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitId?: SortOrder
    unitPrice?: SortOrder
    total?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
    product?: MaterialNameOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
  }

  export type InvoiceItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    invoiceId?: IntFilter<"InvoiceItem"> | number
    productId?: IntFilter<"InvoiceItem"> | number
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitId?: IntFilter<"InvoiceItem"> | number
    unitPrice?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    total?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    product?: XOR<MaterialNameScalarRelationFilter, MaterialNameWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
  }, "id">

  export type InvoiceItemOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    productId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitId?: SortOrder
    unitPrice?: SortOrder
    total?: SortOrder
    _count?: InvoiceItemCountOrderByAggregateInput
    _avg?: InvoiceItemAvgOrderByAggregateInput
    _max?: InvoiceItemMaxOrderByAggregateInput
    _min?: InvoiceItemMinOrderByAggregateInput
    _sum?: InvoiceItemSumOrderByAggregateInput
  }

  export type InvoiceItemScalarWhereWithAggregatesInput = {
    AND?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    OR?: InvoiceItemScalarWhereWithAggregatesInput[]
    NOT?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InvoiceItem"> | number
    invoiceId?: IntWithAggregatesFilter<"InvoiceItem"> | number
    productId?: IntWithAggregatesFilter<"InvoiceItem"> | number
    description?: StringWithAggregatesFilter<"InvoiceItem"> | string
    quantity?: DecimalWithAggregatesFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitId?: IntWithAggregatesFilter<"InvoiceItem"> | number
    unitPrice?: DecimalWithAggregatesFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    total?: DecimalWithAggregatesFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
  }

  export type FreightWhereInput = {
    AND?: FreightWhereInput | FreightWhereInput[]
    OR?: FreightWhereInput[]
    NOT?: FreightWhereInput | FreightWhereInput[]
    id?: IntFilter<"Freight"> | number
    truckNumber?: StringFilter<"Freight"> | string
    forwarder?: StringNullableFilter<"Freight"> | string | null
    billNumber?: StringNullableFilter<"Freight"> | string | null
    billDate?: DateTimeNullableFilter<"Freight"> | Date | string | null
    freightRate?: DecimalNullableFilter<"Freight"> | Decimal | DecimalJsLike | number | string | null
    currencyId?: IntNullableFilter<"Freight"> | number | null
    shipmentId?: IntFilter<"Freight"> | number
    isArrived?: BoolFilter<"Freight"> | boolean
    userId?: IntFilter<"Freight"> | number
    currency?: XOR<CurrencyNullableScalarRelationFilter, CurrencyWhereInput> | null
    shipment?: XOR<ShipmentScalarRelationFilter, ShipmentWhereInput>
    invoices?: FreightInvoiceListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FreightOrderByWithRelationInput = {
    id?: SortOrder
    truckNumber?: SortOrder
    forwarder?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    billDate?: SortOrderInput | SortOrder
    freightRate?: SortOrderInput | SortOrder
    currencyId?: SortOrderInput | SortOrder
    shipmentId?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
    currency?: CurrencyOrderByWithRelationInput
    shipment?: ShipmentOrderByWithRelationInput
    invoices?: FreightInvoiceOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type FreightWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FreightWhereInput | FreightWhereInput[]
    OR?: FreightWhereInput[]
    NOT?: FreightWhereInput | FreightWhereInput[]
    truckNumber?: StringFilter<"Freight"> | string
    forwarder?: StringNullableFilter<"Freight"> | string | null
    billNumber?: StringNullableFilter<"Freight"> | string | null
    billDate?: DateTimeNullableFilter<"Freight"> | Date | string | null
    freightRate?: DecimalNullableFilter<"Freight"> | Decimal | DecimalJsLike | number | string | null
    currencyId?: IntNullableFilter<"Freight"> | number | null
    shipmentId?: IntFilter<"Freight"> | number
    isArrived?: BoolFilter<"Freight"> | boolean
    userId?: IntFilter<"Freight"> | number
    currency?: XOR<CurrencyNullableScalarRelationFilter, CurrencyWhereInput> | null
    shipment?: XOR<ShipmentScalarRelationFilter, ShipmentWhereInput>
    invoices?: FreightInvoiceListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FreightOrderByWithAggregationInput = {
    id?: SortOrder
    truckNumber?: SortOrder
    forwarder?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    billDate?: SortOrderInput | SortOrder
    freightRate?: SortOrderInput | SortOrder
    currencyId?: SortOrderInput | SortOrder
    shipmentId?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
    _count?: FreightCountOrderByAggregateInput
    _avg?: FreightAvgOrderByAggregateInput
    _max?: FreightMaxOrderByAggregateInput
    _min?: FreightMinOrderByAggregateInput
    _sum?: FreightSumOrderByAggregateInput
  }

  export type FreightScalarWhereWithAggregatesInput = {
    AND?: FreightScalarWhereWithAggregatesInput | FreightScalarWhereWithAggregatesInput[]
    OR?: FreightScalarWhereWithAggregatesInput[]
    NOT?: FreightScalarWhereWithAggregatesInput | FreightScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Freight"> | number
    truckNumber?: StringWithAggregatesFilter<"Freight"> | string
    forwarder?: StringNullableWithAggregatesFilter<"Freight"> | string | null
    billNumber?: StringNullableWithAggregatesFilter<"Freight"> | string | null
    billDate?: DateTimeNullableWithAggregatesFilter<"Freight"> | Date | string | null
    freightRate?: DecimalNullableWithAggregatesFilter<"Freight"> | Decimal | DecimalJsLike | number | string | null
    currencyId?: IntNullableWithAggregatesFilter<"Freight"> | number | null
    shipmentId?: IntWithAggregatesFilter<"Freight"> | number
    isArrived?: BoolWithAggregatesFilter<"Freight"> | boolean
    userId?: IntWithAggregatesFilter<"Freight"> | number
  }

  export type FreightInvoiceWhereInput = {
    AND?: FreightInvoiceWhereInput | FreightInvoiceWhereInput[]
    OR?: FreightInvoiceWhereInput[]
    NOT?: FreightInvoiceWhereInput | FreightInvoiceWhereInput[]
    freightId?: IntFilter<"FreightInvoice"> | number
    invoiceId?: IntFilter<"FreightInvoice"> | number
    freight?: XOR<FreightScalarRelationFilter, FreightWhereInput>
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }

  export type FreightInvoiceOrderByWithRelationInput = {
    freightId?: SortOrder
    invoiceId?: SortOrder
    freight?: FreightOrderByWithRelationInput
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type FreightInvoiceWhereUniqueInput = Prisma.AtLeast<{
    freightId_invoiceId?: FreightInvoiceFreightIdInvoiceIdCompoundUniqueInput
    AND?: FreightInvoiceWhereInput | FreightInvoiceWhereInput[]
    OR?: FreightInvoiceWhereInput[]
    NOT?: FreightInvoiceWhereInput | FreightInvoiceWhereInput[]
    freightId?: IntFilter<"FreightInvoice"> | number
    invoiceId?: IntFilter<"FreightInvoice"> | number
    freight?: XOR<FreightScalarRelationFilter, FreightWhereInput>
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }, "freightId_invoiceId">

  export type FreightInvoiceOrderByWithAggregationInput = {
    freightId?: SortOrder
    invoiceId?: SortOrder
    _count?: FreightInvoiceCountOrderByAggregateInput
    _avg?: FreightInvoiceAvgOrderByAggregateInput
    _max?: FreightInvoiceMaxOrderByAggregateInput
    _min?: FreightInvoiceMinOrderByAggregateInput
    _sum?: FreightInvoiceSumOrderByAggregateInput
  }

  export type FreightInvoiceScalarWhereWithAggregatesInput = {
    AND?: FreightInvoiceScalarWhereWithAggregatesInput | FreightInvoiceScalarWhereWithAggregatesInput[]
    OR?: FreightInvoiceScalarWhereWithAggregatesInput[]
    NOT?: FreightInvoiceScalarWhereWithAggregatesInput | FreightInvoiceScalarWhereWithAggregatesInput[]
    freightId?: IntWithAggregatesFilter<"FreightInvoice"> | number
    invoiceId?: IntWithAggregatesFilter<"FreightInvoice"> | number
  }

  export type VillageWhereInput = {
    AND?: VillageWhereInput | VillageWhereInput[]
    OR?: VillageWhereInput[]
    NOT?: VillageWhereInput | VillageWhereInput[]
    id?: IntFilter<"Village"> | number
    name_en?: StringFilter<"Village"> | string
    name_ge?: StringFilter<"Village"> | string
    municipality?: StringFilter<"Village"> | string
    latitude?: FloatFilter<"Village"> | number
    longitude?: FloatFilter<"Village"> | number
    PipelineProgress?: PipelineProgressListRelationFilter
    MaterialNeeds?: MaterialNeedListRelationFilter
  }

  export type VillageOrderByWithRelationInput = {
    id?: SortOrder
    name_en?: SortOrder
    name_ge?: SortOrder
    municipality?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    PipelineProgress?: PipelineProgressOrderByRelationAggregateInput
    MaterialNeeds?: MaterialNeedOrderByRelationAggregateInput
  }

  export type VillageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VillageWhereInput | VillageWhereInput[]
    OR?: VillageWhereInput[]
    NOT?: VillageWhereInput | VillageWhereInput[]
    name_en?: StringFilter<"Village"> | string
    name_ge?: StringFilter<"Village"> | string
    municipality?: StringFilter<"Village"> | string
    latitude?: FloatFilter<"Village"> | number
    longitude?: FloatFilter<"Village"> | number
    PipelineProgress?: PipelineProgressListRelationFilter
    MaterialNeeds?: MaterialNeedListRelationFilter
  }, "id">

  export type VillageOrderByWithAggregationInput = {
    id?: SortOrder
    name_en?: SortOrder
    name_ge?: SortOrder
    municipality?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    _count?: VillageCountOrderByAggregateInput
    _avg?: VillageAvgOrderByAggregateInput
    _max?: VillageMaxOrderByAggregateInput
    _min?: VillageMinOrderByAggregateInput
    _sum?: VillageSumOrderByAggregateInput
  }

  export type VillageScalarWhereWithAggregatesInput = {
    AND?: VillageScalarWhereWithAggregatesInput | VillageScalarWhereWithAggregatesInput[]
    OR?: VillageScalarWhereWithAggregatesInput[]
    NOT?: VillageScalarWhereWithAggregatesInput | VillageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Village"> | number
    name_en?: StringWithAggregatesFilter<"Village"> | string
    name_ge?: StringWithAggregatesFilter<"Village"> | string
    municipality?: StringWithAggregatesFilter<"Village"> | string
    latitude?: FloatWithAggregatesFilter<"Village"> | number
    longitude?: FloatWithAggregatesFilter<"Village"> | number
  }

  export type MaterialNeedWhereInput = {
    AND?: MaterialNeedWhereInput | MaterialNeedWhereInput[]
    OR?: MaterialNeedWhereInput[]
    NOT?: MaterialNeedWhereInput | MaterialNeedWhereInput[]
    id?: IntFilter<"MaterialNeed"> | number
    productId?: IntFilter<"MaterialNeed"> | number
    requiredAmount?: DecimalFilter<"MaterialNeed"> | Decimal | DecimalJsLike | number | string
    villageId?: IntFilter<"MaterialNeed"> | number
    product?: XOR<MaterialNameScalarRelationFilter, MaterialNameWhereInput>
    village?: XOR<VillageScalarRelationFilter, VillageWhereInput>
  }

  export type MaterialNeedOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    villageId?: SortOrder
    product?: MaterialNameOrderByWithRelationInput
    village?: VillageOrderByWithRelationInput
  }

  export type MaterialNeedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MaterialNeedWhereInput | MaterialNeedWhereInput[]
    OR?: MaterialNeedWhereInput[]
    NOT?: MaterialNeedWhereInput | MaterialNeedWhereInput[]
    productId?: IntFilter<"MaterialNeed"> | number
    requiredAmount?: DecimalFilter<"MaterialNeed"> | Decimal | DecimalJsLike | number | string
    villageId?: IntFilter<"MaterialNeed"> | number
    product?: XOR<MaterialNameScalarRelationFilter, MaterialNameWhereInput>
    village?: XOR<VillageScalarRelationFilter, VillageWhereInput>
  }, "id">

  export type MaterialNeedOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    villageId?: SortOrder
    _count?: MaterialNeedCountOrderByAggregateInput
    _avg?: MaterialNeedAvgOrderByAggregateInput
    _max?: MaterialNeedMaxOrderByAggregateInput
    _min?: MaterialNeedMinOrderByAggregateInput
    _sum?: MaterialNeedSumOrderByAggregateInput
  }

  export type MaterialNeedScalarWhereWithAggregatesInput = {
    AND?: MaterialNeedScalarWhereWithAggregatesInput | MaterialNeedScalarWhereWithAggregatesInput[]
    OR?: MaterialNeedScalarWhereWithAggregatesInput[]
    NOT?: MaterialNeedScalarWhereWithAggregatesInput | MaterialNeedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MaterialNeed"> | number
    productId?: IntWithAggregatesFilter<"MaterialNeed"> | number
    requiredAmount?: DecimalWithAggregatesFilter<"MaterialNeed"> | Decimal | DecimalJsLike | number | string
    villageId?: IntWithAggregatesFilter<"MaterialNeed"> | number
  }

  export type PipelineProgressWhereInput = {
    AND?: PipelineProgressWhereInput | PipelineProgressWhereInput[]
    OR?: PipelineProgressWhereInput[]
    NOT?: PipelineProgressWhereInput | PipelineProgressWhereInput[]
    id?: IntFilter<"PipelineProgress"> | number
    productId?: IntFilter<"PipelineProgress"> | number
    requiredAmount?: DecimalFilter<"PipelineProgress"> | Decimal | DecimalJsLike | number | string
    unitId?: IntFilter<"PipelineProgress"> | number
    villageId?: IntFilter<"PipelineProgress"> | number
    product?: XOR<MaterialNameScalarRelationFilter, MaterialNameWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
    village?: XOR<VillageScalarRelationFilter, VillageWhereInput>
  }

  export type PipelineProgressOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    unitId?: SortOrder
    villageId?: SortOrder
    product?: MaterialNameOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
    village?: VillageOrderByWithRelationInput
  }

  export type PipelineProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PipelineProgressWhereInput | PipelineProgressWhereInput[]
    OR?: PipelineProgressWhereInput[]
    NOT?: PipelineProgressWhereInput | PipelineProgressWhereInput[]
    productId?: IntFilter<"PipelineProgress"> | number
    requiredAmount?: DecimalFilter<"PipelineProgress"> | Decimal | DecimalJsLike | number | string
    unitId?: IntFilter<"PipelineProgress"> | number
    villageId?: IntFilter<"PipelineProgress"> | number
    product?: XOR<MaterialNameScalarRelationFilter, MaterialNameWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
    village?: XOR<VillageScalarRelationFilter, VillageWhereInput>
  }, "id">

  export type PipelineProgressOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    unitId?: SortOrder
    villageId?: SortOrder
    _count?: PipelineProgressCountOrderByAggregateInput
    _avg?: PipelineProgressAvgOrderByAggregateInput
    _max?: PipelineProgressMaxOrderByAggregateInput
    _min?: PipelineProgressMinOrderByAggregateInput
    _sum?: PipelineProgressSumOrderByAggregateInput
  }

  export type PipelineProgressScalarWhereWithAggregatesInput = {
    AND?: PipelineProgressScalarWhereWithAggregatesInput | PipelineProgressScalarWhereWithAggregatesInput[]
    OR?: PipelineProgressScalarWhereWithAggregatesInput[]
    NOT?: PipelineProgressScalarWhereWithAggregatesInput | PipelineProgressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PipelineProgress"> | number
    productId?: IntWithAggregatesFilter<"PipelineProgress"> | number
    requiredAmount?: DecimalWithAggregatesFilter<"PipelineProgress"> | Decimal | DecimalJsLike | number | string
    unitId?: IntWithAggregatesFilter<"PipelineProgress"> | number
    villageId?: IntWithAggregatesFilter<"PipelineProgress"> | number
  }

  export type UserCreateInput = {
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorCreateNestedManyWithoutUserInput
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    Shipment?: ShipmentCreateNestedManyWithoutUserInput
    Freight?: FreightCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorUncheckedCreateNestedManyWithoutUserInput
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    Shipment?: ShipmentUncheckedCreateNestedManyWithoutUserInput
    Freight?: FreightUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUpdateManyWithoutUserNestedInput
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUpdateManyWithoutUserNestedInput
    Freight?: FreightUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUncheckedUpdateManyWithoutUserNestedInput
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUncheckedUpdateManyWithoutUserNestedInput
    Freight?: FreightUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorCreateInput = {
    alias: string
    name: string
    address: string
    country: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutVendorInput
    Invoice?: InvoiceCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: number
    alias: string
    name: string
    address: string
    country: string
    userId: number
    createdAt?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVendorNestedInput
    Invoice?: InvoiceUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: number
    alias: string
    name: string
    address: string
    country: string
    userId: number
    createdAt?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitCreateInput = {
    unit: string
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUnitInput
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutUnitInput
  }

  export type UnitUncheckedCreateInput = {
    id?: number
    unit: string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUnitInput
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutUnitInput
  }

  export type UnitUpdateInput = {
    unit?: StringFieldUpdateOperationsInput | string
    InvoiceItem?: InvoiceItemUpdateManyWithoutUnitNestedInput
    PipelineProgress?: PipelineProgressUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUnitNestedInput
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutUnitNestedInput
  }

  export type UnitCreateManyInput = {
    id?: number
    unit: string
  }

  export type UnitUpdateManyMutationInput = {
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type CurrencyCreateInput = {
    code: string
    name: string
    Invoice?: InvoiceCreateNestedManyWithoutCurrencyInput
    Freight?: FreightCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutCurrencyInput
    Freight?: FreightUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Invoice?: InvoiceUpdateManyWithoutCurrencyNestedInput
    Freight?: FreightUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutCurrencyNestedInput
    Freight?: FreightUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyCreateManyInput = {
    id?: number
    code: string
    name: string
  }

  export type CurrencyUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CurrencyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialGroupCreateInput = {
    name: string
    description: string
    MaterialType?: MaterialTypeCreateNestedManyWithoutGroupInput
  }

  export type MaterialGroupUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    MaterialType?: MaterialTypeUncheckedCreateNestedManyWithoutGroupInput
  }

  export type MaterialGroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    MaterialType?: MaterialTypeUpdateManyWithoutGroupNestedInput
  }

  export type MaterialGroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    MaterialType?: MaterialTypeUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type MaterialGroupCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type MaterialGroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialGroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialTypeCreateInput = {
    type: string
    group: MaterialGroupCreateNestedOneWithoutMaterialTypeInput
    MaterialName?: MaterialNameCreateNestedManyWithoutTypeInput
  }

  export type MaterialTypeUncheckedCreateInput = {
    id?: number
    type: string
    groupId: number
    MaterialName?: MaterialNameUncheckedCreateNestedManyWithoutTypeInput
  }

  export type MaterialTypeUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    group?: MaterialGroupUpdateOneRequiredWithoutMaterialTypeNestedInput
    MaterialName?: MaterialNameUpdateManyWithoutTypeNestedInput
  }

  export type MaterialTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    groupId?: IntFieldUpdateOperationsInput | number
    MaterialName?: MaterialNameUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type MaterialTypeCreateManyInput = {
    id?: number
    type: string
    groupId: number
  }

  export type MaterialTypeUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type MaterialNameCreateInput = {
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    type: MaterialTypeCreateNestedOneWithoutMaterialNameInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutProductInput
    MaterialNeed?: MaterialNeedCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutProductInput
  }

  export type MaterialNameUncheckedCreateInput = {
    id?: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    typeId: number
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutProductInput
    MaterialNeed?: MaterialNeedUncheckedCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutProductInput
  }

  export type MaterialNameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: MaterialTypeUpdateOneRequiredWithoutMaterialNameNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutProductNestedInput
    MaterialNeed?: MaterialNeedUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUpdateManyWithoutProductNestedInput
  }

  export type MaterialNameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutProductNestedInput
    MaterialNeed?: MaterialNeedUncheckedUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutProductNestedInput
  }

  export type MaterialNameCreateManyInput = {
    id?: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    typeId: number
  }

  export type MaterialNameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialNameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type ShipmentCreateInput = {
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutShipmentInput
    Files?: ShipmentFileCreateNestedManyWithoutShipmentInput
    Freights?: FreightCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentUncheckedCreateInput = {
    id?: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    userId: number
    createdAt?: Date | string
    Files?: ShipmentFileUncheckedCreateNestedManyWithoutShipmentInput
    Freights?: FreightUncheckedCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentUpdateInput = {
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShipmentNestedInput
    Files?: ShipmentFileUpdateManyWithoutShipmentNestedInput
    Freights?: FreightUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Files?: ShipmentFileUncheckedUpdateManyWithoutShipmentNestedInput
    Freights?: FreightUncheckedUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentCreateManyInput = {
    id?: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    userId: number
    createdAt?: Date | string
  }

  export type ShipmentUpdateManyMutationInput = {
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShipmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShipmentFileCreateInput = {
    fileName: string
    fileType?: string | null
    fileData?: Uint8Array | null
    shipment: ShipmentCreateNestedOneWithoutFilesInput
  }

  export type ShipmentFileUncheckedCreateInput = {
    id?: number
    shipmentId: number
    fileName: string
    fileType?: string | null
    fileData?: Uint8Array | null
  }

  export type ShipmentFileUpdateInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    shipment?: ShipmentUpdateOneRequiredWithoutFilesNestedInput
  }

  export type ShipmentFileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ShipmentFileCreateManyInput = {
    id?: number
    shipmentId: number
    fileName: string
    fileType?: string | null
    fileData?: Uint8Array | null
  }

  export type ShipmentFileUpdateManyMutationInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ShipmentFileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type InvoiceCreateInput = {
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    vendor: VendorCreateNestedOneWithoutInvoiceInput
    user: UserCreateNestedOneWithoutInvoiceInput
    currency: CurrencyCreateNestedOneWithoutInvoiceInput
    shipment: ShipmentCreateNestedOneWithoutInvoicesInput
    Items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
    Items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutInvoiceNestedInput
    user?: UserUpdateOneRequiredWithoutInvoiceNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutInvoiceNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutInvoicesNestedInput
    Items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
    Items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
  }

  export type InvoiceUpdateManyMutationInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceItemCreateInput = {
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
    invoice: InvoiceCreateNestedOneWithoutItemsInput
    product: MaterialNameCreateNestedOneWithoutInvoiceItemInput
    unit: UnitCreateNestedOneWithoutInvoiceItemInput
  }

  export type InvoiceItemUncheckedCreateInput = {
    id?: number
    invoiceId: number
    productId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitId: number
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    invoice?: InvoiceUpdateOneRequiredWithoutItemsNestedInput
    product?: MaterialNameUpdateOneRequiredWithoutInvoiceItemNestedInput
    unit?: UnitUpdateOneRequiredWithoutInvoiceItemNestedInput
  }

  export type InvoiceItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemCreateManyInput = {
    id?: number
    invoiceId: number
    productId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitId: number
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FreightCreateInput = {
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    isArrived?: boolean
    currency?: CurrencyCreateNestedOneWithoutFreightInput
    shipment: ShipmentCreateNestedOneWithoutFreightsInput
    invoices?: FreightInvoiceCreateNestedManyWithoutFreightInput
    user: UserCreateNestedOneWithoutFreightInput
  }

  export type FreightUncheckedCreateInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    currencyId?: number | null
    shipmentId: number
    isArrived?: boolean
    userId: number
    invoices?: FreightInvoiceUncheckedCreateNestedManyWithoutFreightInput
  }

  export type FreightUpdateInput = {
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    currency?: CurrencyUpdateOneWithoutFreightNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutFreightsNestedInput
    invoices?: FreightInvoiceUpdateManyWithoutFreightNestedInput
    user?: UserUpdateOneRequiredWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currencyId?: NullableIntFieldUpdateOperationsInput | number | null
    shipmentId?: IntFieldUpdateOperationsInput | number
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    invoices?: FreightInvoiceUncheckedUpdateManyWithoutFreightNestedInput
  }

  export type FreightCreateManyInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    currencyId?: number | null
    shipmentId: number
    isArrived?: boolean
    userId: number
  }

  export type FreightUpdateManyMutationInput = {
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FreightUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currencyId?: NullableIntFieldUpdateOperationsInput | number | null
    shipmentId?: IntFieldUpdateOperationsInput | number
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FreightInvoiceCreateInput = {
    freight: FreightCreateNestedOneWithoutInvoicesInput
    invoice: InvoiceCreateNestedOneWithoutFreightsInput
  }

  export type FreightInvoiceUncheckedCreateInput = {
    freightId: number
    invoiceId: number
  }

  export type FreightInvoiceUpdateInput = {
    freight?: FreightUpdateOneRequiredWithoutInvoicesNestedInput
    invoice?: InvoiceUpdateOneRequiredWithoutFreightsNestedInput
  }

  export type FreightInvoiceUncheckedUpdateInput = {
    freightId?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type FreightInvoiceCreateManyInput = {
    freightId: number
    invoiceId: number
  }

  export type FreightInvoiceUpdateManyMutationInput = {

  }

  export type FreightInvoiceUncheckedUpdateManyInput = {
    freightId?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type VillageCreateInput = {
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutVillageInput
    MaterialNeeds?: MaterialNeedCreateNestedManyWithoutVillageInput
  }

  export type VillageUncheckedCreateInput = {
    id?: number
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutVillageInput
    MaterialNeeds?: MaterialNeedUncheckedCreateNestedManyWithoutVillageInput
  }

  export type VillageUpdateInput = {
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    PipelineProgress?: PipelineProgressUpdateManyWithoutVillageNestedInput
    MaterialNeeds?: MaterialNeedUpdateManyWithoutVillageNestedInput
  }

  export type VillageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutVillageNestedInput
    MaterialNeeds?: MaterialNeedUncheckedUpdateManyWithoutVillageNestedInput
  }

  export type VillageCreateManyInput = {
    id?: number
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
  }

  export type VillageUpdateManyMutationInput = {
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type VillageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type MaterialNeedCreateInput = {
    requiredAmount: Decimal | DecimalJsLike | number | string
    product: MaterialNameCreateNestedOneWithoutMaterialNeedInput
    village: VillageCreateNestedOneWithoutMaterialNeedsInput
  }

  export type MaterialNeedUncheckedCreateInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    villageId: number
  }

  export type MaterialNeedUpdateInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: MaterialNameUpdateOneRequiredWithoutMaterialNeedNestedInput
    village?: VillageUpdateOneRequiredWithoutMaterialNeedsNestedInput
  }

  export type MaterialNeedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type MaterialNeedCreateManyInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    villageId: number
  }

  export type MaterialNeedUpdateManyMutationInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MaterialNeedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineProgressCreateInput = {
    requiredAmount: Decimal | DecimalJsLike | number | string
    product: MaterialNameCreateNestedOneWithoutPipelineProgressInput
    unit: UnitCreateNestedOneWithoutPipelineProgressInput
    village: VillageCreateNestedOneWithoutPipelineProgressInput
  }

  export type PipelineProgressUncheckedCreateInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    unitId: number
    villageId: number
  }

  export type PipelineProgressUpdateInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: MaterialNameUpdateOneRequiredWithoutPipelineProgressNestedInput
    unit?: UnitUpdateOneRequiredWithoutPipelineProgressNestedInput
    village?: VillageUpdateOneRequiredWithoutPipelineProgressNestedInput
  }

  export type PipelineProgressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineProgressCreateManyInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    unitId: number
    villageId: number
  }

  export type PipelineProgressUpdateManyMutationInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PipelineProgressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type VendorListRelationFilter = {
    every?: VendorWhereInput
    some?: VendorWhereInput
    none?: VendorWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type ShipmentListRelationFilter = {
    every?: ShipmentWhereInput
    some?: ShipmentWhereInput
    none?: ShipmentWhereInput
  }

  export type FreightListRelationFilter = {
    every?: FreightWhereInput
    some?: FreightWhereInput
    none?: FreightWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type VendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShipmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FreightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firebaseUid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    name?: SortOrder
    address?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    name?: SortOrder
    address?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    name?: SortOrder
    address?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceItemListRelationFilter = {
    every?: InvoiceItemWhereInput
    some?: InvoiceItemWhereInput
    none?: InvoiceItemWhereInput
  }

  export type PipelineProgressListRelationFilter = {
    every?: PipelineProgressWhereInput
    some?: PipelineProgressWhereInput
    none?: PipelineProgressWhereInput
  }

  export type InvoiceItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PipelineProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnitCountOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
  }

  export type UnitAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UnitMaxOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
  }

  export type UnitMinOrderByAggregateInput = {
    id?: SortOrder
    unit?: SortOrder
  }

  export type UnitSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CurrencyCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type CurrencyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CurrencyMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type CurrencyMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type CurrencySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MaterialTypeListRelationFilter = {
    every?: MaterialTypeWhereInput
    some?: MaterialTypeWhereInput
    none?: MaterialTypeWhereInput
  }

  export type MaterialTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialGroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type MaterialGroupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MaterialGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type MaterialGroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type MaterialGroupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MaterialGroupScalarRelationFilter = {
    is?: MaterialGroupWhereInput
    isNot?: MaterialGroupWhereInput
  }

  export type MaterialNameListRelationFilter = {
    every?: MaterialNameWhereInput
    some?: MaterialNameWhereInput
    none?: MaterialNameWhereInput
  }

  export type MaterialNameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialTypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    groupId?: SortOrder
  }

  export type MaterialTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type MaterialTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    groupId?: SortOrder
  }

  export type MaterialTypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    groupId?: SortOrder
  }

  export type MaterialTypeSumOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type MaterialTypeScalarRelationFilter = {
    is?: MaterialTypeWhereInput
    isNot?: MaterialTypeWhereInput
  }

  export type MaterialNeedListRelationFilter = {
    every?: MaterialNeedWhereInput
    some?: MaterialNeedWhereInput
    none?: MaterialNeedWhereInput
  }

  export type MaterialNeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialNameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dn?: SortOrder
    pn?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
  }

  export type MaterialNameAvgOrderByAggregateInput = {
    id?: SortOrder
    degree?: SortOrder
    typeId?: SortOrder
  }

  export type MaterialNameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dn?: SortOrder
    pn?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
  }

  export type MaterialNameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dn?: SortOrder
    pn?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
  }

  export type MaterialNameSumOrderByAggregateInput = {
    id?: SortOrder
    degree?: SortOrder
    typeId?: SortOrder
  }

  export type EnumShipmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipmentStatus | EnumShipmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipmentStatusFilter<$PrismaModel> | $Enums.ShipmentStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ShipmentFileListRelationFilter = {
    every?: ShipmentFileWhereInput
    some?: ShipmentFileWhereInput
    none?: ShipmentFileWhereInput
  }

  export type ShipmentFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShipmentCountOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    status?: SortOrder
    declaration_number?: SortOrder
    declaration_date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ShipmentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    status?: SortOrder
    declaration_number?: SortOrder
    declaration_date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ShipmentMinOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    status?: SortOrder
    declaration_number?: SortOrder
    declaration_date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ShipmentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumShipmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipmentStatus | EnumShipmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShipmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShipmentStatusFilter<$PrismaModel>
    _max?: NestedEnumShipmentStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type ShipmentScalarRelationFilter = {
    is?: ShipmentWhereInput
    isNot?: ShipmentWhereInput
  }

  export type ShipmentFileCountOrderByAggregateInput = {
    id?: SortOrder
    shipmentId?: SortOrder
    fileName?: SortOrder
    fileType?: SortOrder
    fileData?: SortOrder
  }

  export type ShipmentFileAvgOrderByAggregateInput = {
    id?: SortOrder
    shipmentId?: SortOrder
  }

  export type ShipmentFileMaxOrderByAggregateInput = {
    id?: SortOrder
    shipmentId?: SortOrder
    fileName?: SortOrder
    fileType?: SortOrder
    fileData?: SortOrder
  }

  export type ShipmentFileMinOrderByAggregateInput = {
    id?: SortOrder
    shipmentId?: SortOrder
    fileName?: SortOrder
    fileType?: SortOrder
    fileData?: SortOrder
  }

  export type ShipmentFileSumOrderByAggregateInput = {
    id?: SortOrder
    shipmentId?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type VendorScalarRelationFilter = {
    is?: VendorWhereInput
    isNot?: VendorWhereInput
  }

  export type CurrencyScalarRelationFilter = {
    is?: CurrencyWhereInput
    isNot?: CurrencyWhereInput
  }

  export type FreightInvoiceListRelationFilter = {
    every?: FreightInvoiceWhereInput
    some?: FreightInvoiceWhereInput
    none?: FreightInvoiceWhereInput
  }

  export type FreightInvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    totalAmount?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    totalAmount?: SortOrder
    userId?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    totalAmount?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    invoiceNumber?: SortOrder
    invoiceDate?: SortOrder
    totalAmount?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    totalAmount?: SortOrder
    userId?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type InvoiceScalarRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type MaterialNameScalarRelationFilter = {
    is?: MaterialNameWhereInput
    isNot?: MaterialNameWhereInput
  }

  export type UnitScalarRelationFilter = {
    is?: UnitWhereInput
    isNot?: UnitWhereInput
  }

  export type InvoiceItemCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    productId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitId?: SortOrder
    unitPrice?: SortOrder
    total?: SortOrder
  }

  export type InvoiceItemAvgOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitId?: SortOrder
    unitPrice?: SortOrder
    total?: SortOrder
  }

  export type InvoiceItemMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    productId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitId?: SortOrder
    unitPrice?: SortOrder
    total?: SortOrder
  }

  export type InvoiceItemMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    productId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitId?: SortOrder
    unitPrice?: SortOrder
    total?: SortOrder
  }

  export type InvoiceItemSumOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitId?: SortOrder
    unitPrice?: SortOrder
    total?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CurrencyNullableScalarRelationFilter = {
    is?: CurrencyWhereInput | null
    isNot?: CurrencyWhereInput | null
  }

  export type FreightCountOrderByAggregateInput = {
    id?: SortOrder
    truckNumber?: SortOrder
    forwarder?: SortOrder
    billNumber?: SortOrder
    billDate?: SortOrder
    freightRate?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
  }

  export type FreightAvgOrderByAggregateInput = {
    id?: SortOrder
    freightRate?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
    userId?: SortOrder
  }

  export type FreightMaxOrderByAggregateInput = {
    id?: SortOrder
    truckNumber?: SortOrder
    forwarder?: SortOrder
    billNumber?: SortOrder
    billDate?: SortOrder
    freightRate?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
  }

  export type FreightMinOrderByAggregateInput = {
    id?: SortOrder
    truckNumber?: SortOrder
    forwarder?: SortOrder
    billNumber?: SortOrder
    billDate?: SortOrder
    freightRate?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
    isArrived?: SortOrder
    userId?: SortOrder
  }

  export type FreightSumOrderByAggregateInput = {
    id?: SortOrder
    freightRate?: SortOrder
    currencyId?: SortOrder
    shipmentId?: SortOrder
    userId?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FreightScalarRelationFilter = {
    is?: FreightWhereInput
    isNot?: FreightWhereInput
  }

  export type FreightInvoiceFreightIdInvoiceIdCompoundUniqueInput = {
    freightId: number
    invoiceId: number
  }

  export type FreightInvoiceCountOrderByAggregateInput = {
    freightId?: SortOrder
    invoiceId?: SortOrder
  }

  export type FreightInvoiceAvgOrderByAggregateInput = {
    freightId?: SortOrder
    invoiceId?: SortOrder
  }

  export type FreightInvoiceMaxOrderByAggregateInput = {
    freightId?: SortOrder
    invoiceId?: SortOrder
  }

  export type FreightInvoiceMinOrderByAggregateInput = {
    freightId?: SortOrder
    invoiceId?: SortOrder
  }

  export type FreightInvoiceSumOrderByAggregateInput = {
    freightId?: SortOrder
    invoiceId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type VillageCountOrderByAggregateInput = {
    id?: SortOrder
    name_en?: SortOrder
    name_ge?: SortOrder
    municipality?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type VillageAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type VillageMaxOrderByAggregateInput = {
    id?: SortOrder
    name_en?: SortOrder
    name_ge?: SortOrder
    municipality?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type VillageMinOrderByAggregateInput = {
    id?: SortOrder
    name_en?: SortOrder
    name_ge?: SortOrder
    municipality?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type VillageSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type VillageScalarRelationFilter = {
    is?: VillageWhereInput
    isNot?: VillageWhereInput
  }

  export type MaterialNeedCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    villageId?: SortOrder
  }

  export type MaterialNeedAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    villageId?: SortOrder
  }

  export type MaterialNeedMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    villageId?: SortOrder
  }

  export type MaterialNeedMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    villageId?: SortOrder
  }

  export type MaterialNeedSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    villageId?: SortOrder
  }

  export type PipelineProgressCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    unitId?: SortOrder
    villageId?: SortOrder
  }

  export type PipelineProgressAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    unitId?: SortOrder
    villageId?: SortOrder
  }

  export type PipelineProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    unitId?: SortOrder
    villageId?: SortOrder
  }

  export type PipelineProgressMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    unitId?: SortOrder
    villageId?: SortOrder
  }

  export type PipelineProgressSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requiredAmount?: SortOrder
    unitId?: SortOrder
    villageId?: SortOrder
  }

  export type VendorCreateNestedManyWithoutUserInput = {
    create?: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput> | VendorCreateWithoutUserInput[] | VendorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutUserInput | VendorCreateOrConnectWithoutUserInput[]
    createMany?: VendorCreateManyUserInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutUserInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type ShipmentCreateNestedManyWithoutUserInput = {
    create?: XOR<ShipmentCreateWithoutUserInput, ShipmentUncheckedCreateWithoutUserInput> | ShipmentCreateWithoutUserInput[] | ShipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutUserInput | ShipmentCreateOrConnectWithoutUserInput[]
    createMany?: ShipmentCreateManyUserInputEnvelope
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
  }

  export type FreightCreateNestedManyWithoutUserInput = {
    create?: XOR<FreightCreateWithoutUserInput, FreightUncheckedCreateWithoutUserInput> | FreightCreateWithoutUserInput[] | FreightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutUserInput | FreightCreateOrConnectWithoutUserInput[]
    createMany?: FreightCreateManyUserInputEnvelope
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
  }

  export type VendorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput> | VendorCreateWithoutUserInput[] | VendorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutUserInput | VendorCreateOrConnectWithoutUserInput[]
    createMany?: VendorCreateManyUserInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type ShipmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShipmentCreateWithoutUserInput, ShipmentUncheckedCreateWithoutUserInput> | ShipmentCreateWithoutUserInput[] | ShipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutUserInput | ShipmentCreateOrConnectWithoutUserInput[]
    createMany?: ShipmentCreateManyUserInputEnvelope
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
  }

  export type FreightUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FreightCreateWithoutUserInput, FreightUncheckedCreateWithoutUserInput> | FreightCreateWithoutUserInput[] | FreightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutUserInput | FreightCreateOrConnectWithoutUserInput[]
    createMany?: FreightCreateManyUserInputEnvelope
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type VendorUpdateManyWithoutUserNestedInput = {
    create?: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput> | VendorCreateWithoutUserInput[] | VendorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutUserInput | VendorCreateOrConnectWithoutUserInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutUserInput | VendorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VendorCreateManyUserInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutUserInput | VendorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutUserInput | VendorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutUserInput | InvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutUserInput | InvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutUserInput | InvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ShipmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShipmentCreateWithoutUserInput, ShipmentUncheckedCreateWithoutUserInput> | ShipmentCreateWithoutUserInput[] | ShipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutUserInput | ShipmentCreateOrConnectWithoutUserInput[]
    upsert?: ShipmentUpsertWithWhereUniqueWithoutUserInput | ShipmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShipmentCreateManyUserInputEnvelope
    set?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    disconnect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    delete?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    update?: ShipmentUpdateWithWhereUniqueWithoutUserInput | ShipmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShipmentUpdateManyWithWhereWithoutUserInput | ShipmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
  }

  export type FreightUpdateManyWithoutUserNestedInput = {
    create?: XOR<FreightCreateWithoutUserInput, FreightUncheckedCreateWithoutUserInput> | FreightCreateWithoutUserInput[] | FreightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutUserInput | FreightCreateOrConnectWithoutUserInput[]
    upsert?: FreightUpsertWithWhereUniqueWithoutUserInput | FreightUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FreightCreateManyUserInputEnvelope
    set?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    disconnect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    delete?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    update?: FreightUpdateWithWhereUniqueWithoutUserInput | FreightUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FreightUpdateManyWithWhereWithoutUserInput | FreightUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FreightScalarWhereInput | FreightScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VendorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput> | VendorCreateWithoutUserInput[] | VendorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutUserInput | VendorCreateOrConnectWithoutUserInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutUserInput | VendorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VendorCreateManyUserInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutUserInput | VendorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutUserInput | VendorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutUserInput | InvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutUserInput | InvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutUserInput | InvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ShipmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShipmentCreateWithoutUserInput, ShipmentUncheckedCreateWithoutUserInput> | ShipmentCreateWithoutUserInput[] | ShipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShipmentCreateOrConnectWithoutUserInput | ShipmentCreateOrConnectWithoutUserInput[]
    upsert?: ShipmentUpsertWithWhereUniqueWithoutUserInput | ShipmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShipmentCreateManyUserInputEnvelope
    set?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    disconnect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    delete?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    connect?: ShipmentWhereUniqueInput | ShipmentWhereUniqueInput[]
    update?: ShipmentUpdateWithWhereUniqueWithoutUserInput | ShipmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShipmentUpdateManyWithWhereWithoutUserInput | ShipmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
  }

  export type FreightUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FreightCreateWithoutUserInput, FreightUncheckedCreateWithoutUserInput> | FreightCreateWithoutUserInput[] | FreightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutUserInput | FreightCreateOrConnectWithoutUserInput[]
    upsert?: FreightUpsertWithWhereUniqueWithoutUserInput | FreightUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FreightCreateManyUserInputEnvelope
    set?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    disconnect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    delete?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    update?: FreightUpdateWithWhereUniqueWithoutUserInput | FreightUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FreightUpdateManyWithWhereWithoutUserInput | FreightUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FreightScalarWhereInput | FreightScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutVendorInput = {
    create?: XOR<UserCreateWithoutVendorInput, UserUncheckedCreateWithoutVendorInput>
    connectOrCreate?: UserCreateOrConnectWithoutVendorInput
    connect?: UserWhereUniqueInput
  }

  export type InvoiceCreateNestedManyWithoutVendorInput = {
    create?: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput> | InvoiceCreateWithoutVendorInput[] | InvoiceUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutVendorInput | InvoiceCreateOrConnectWithoutVendorInput[]
    createMany?: InvoiceCreateManyVendorInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput> | InvoiceCreateWithoutVendorInput[] | InvoiceUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutVendorInput | InvoiceCreateOrConnectWithoutVendorInput[]
    createMany?: InvoiceCreateManyVendorInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutVendorNestedInput = {
    create?: XOR<UserCreateWithoutVendorInput, UserUncheckedCreateWithoutVendorInput>
    connectOrCreate?: UserCreateOrConnectWithoutVendorInput
    upsert?: UserUpsertWithoutVendorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVendorInput, UserUpdateWithoutVendorInput>, UserUncheckedUpdateWithoutVendorInput>
  }

  export type InvoiceUpdateManyWithoutVendorNestedInput = {
    create?: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput> | InvoiceCreateWithoutVendorInput[] | InvoiceUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutVendorInput | InvoiceCreateOrConnectWithoutVendorInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutVendorInput | InvoiceUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: InvoiceCreateManyVendorInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutVendorInput | InvoiceUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutVendorInput | InvoiceUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput> | InvoiceCreateWithoutVendorInput[] | InvoiceUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutVendorInput | InvoiceCreateOrConnectWithoutVendorInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutVendorInput | InvoiceUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: InvoiceCreateManyVendorInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutVendorInput | InvoiceUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutVendorInput | InvoiceUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceItemCreateNestedManyWithoutUnitInput = {
    create?: XOR<InvoiceItemCreateWithoutUnitInput, InvoiceItemUncheckedCreateWithoutUnitInput> | InvoiceItemCreateWithoutUnitInput[] | InvoiceItemUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutUnitInput | InvoiceItemCreateOrConnectWithoutUnitInput[]
    createMany?: InvoiceItemCreateManyUnitInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type PipelineProgressCreateNestedManyWithoutUnitInput = {
    create?: XOR<PipelineProgressCreateWithoutUnitInput, PipelineProgressUncheckedCreateWithoutUnitInput> | PipelineProgressCreateWithoutUnitInput[] | PipelineProgressUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutUnitInput | PipelineProgressCreateOrConnectWithoutUnitInput[]
    createMany?: PipelineProgressCreateManyUnitInputEnvelope
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<InvoiceItemCreateWithoutUnitInput, InvoiceItemUncheckedCreateWithoutUnitInput> | InvoiceItemCreateWithoutUnitInput[] | InvoiceItemUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutUnitInput | InvoiceItemCreateOrConnectWithoutUnitInput[]
    createMany?: InvoiceItemCreateManyUnitInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type PipelineProgressUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<PipelineProgressCreateWithoutUnitInput, PipelineProgressUncheckedCreateWithoutUnitInput> | PipelineProgressCreateWithoutUnitInput[] | PipelineProgressUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutUnitInput | PipelineProgressCreateOrConnectWithoutUnitInput[]
    createMany?: PipelineProgressCreateManyUnitInputEnvelope
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
  }

  export type InvoiceItemUpdateManyWithoutUnitNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutUnitInput, InvoiceItemUncheckedCreateWithoutUnitInput> | InvoiceItemCreateWithoutUnitInput[] | InvoiceItemUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutUnitInput | InvoiceItemCreateOrConnectWithoutUnitInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutUnitInput | InvoiceItemUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: InvoiceItemCreateManyUnitInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutUnitInput | InvoiceItemUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutUnitInput | InvoiceItemUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type PipelineProgressUpdateManyWithoutUnitNestedInput = {
    create?: XOR<PipelineProgressCreateWithoutUnitInput, PipelineProgressUncheckedCreateWithoutUnitInput> | PipelineProgressCreateWithoutUnitInput[] | PipelineProgressUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutUnitInput | PipelineProgressCreateOrConnectWithoutUnitInput[]
    upsert?: PipelineProgressUpsertWithWhereUniqueWithoutUnitInput | PipelineProgressUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: PipelineProgressCreateManyUnitInputEnvelope
    set?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    disconnect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    delete?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    update?: PipelineProgressUpdateWithWhereUniqueWithoutUnitInput | PipelineProgressUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: PipelineProgressUpdateManyWithWhereWithoutUnitInput | PipelineProgressUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
  }

  export type InvoiceItemUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutUnitInput, InvoiceItemUncheckedCreateWithoutUnitInput> | InvoiceItemCreateWithoutUnitInput[] | InvoiceItemUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutUnitInput | InvoiceItemCreateOrConnectWithoutUnitInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutUnitInput | InvoiceItemUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: InvoiceItemCreateManyUnitInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutUnitInput | InvoiceItemUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutUnitInput | InvoiceItemUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type PipelineProgressUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<PipelineProgressCreateWithoutUnitInput, PipelineProgressUncheckedCreateWithoutUnitInput> | PipelineProgressCreateWithoutUnitInput[] | PipelineProgressUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutUnitInput | PipelineProgressCreateOrConnectWithoutUnitInput[]
    upsert?: PipelineProgressUpsertWithWhereUniqueWithoutUnitInput | PipelineProgressUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: PipelineProgressCreateManyUnitInputEnvelope
    set?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    disconnect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    delete?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    update?: PipelineProgressUpdateWithWhereUniqueWithoutUnitInput | PipelineProgressUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: PipelineProgressUpdateManyWithWhereWithoutUnitInput | PipelineProgressUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
  }

  export type InvoiceCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<InvoiceCreateWithoutCurrencyInput, InvoiceUncheckedCreateWithoutCurrencyInput> | InvoiceCreateWithoutCurrencyInput[] | InvoiceUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCurrencyInput | InvoiceCreateOrConnectWithoutCurrencyInput[]
    createMany?: InvoiceCreateManyCurrencyInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type FreightCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<FreightCreateWithoutCurrencyInput, FreightUncheckedCreateWithoutCurrencyInput> | FreightCreateWithoutCurrencyInput[] | FreightUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutCurrencyInput | FreightCreateOrConnectWithoutCurrencyInput[]
    createMany?: FreightCreateManyCurrencyInputEnvelope
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<InvoiceCreateWithoutCurrencyInput, InvoiceUncheckedCreateWithoutCurrencyInput> | InvoiceCreateWithoutCurrencyInput[] | InvoiceUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCurrencyInput | InvoiceCreateOrConnectWithoutCurrencyInput[]
    createMany?: InvoiceCreateManyCurrencyInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type FreightUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<FreightCreateWithoutCurrencyInput, FreightUncheckedCreateWithoutCurrencyInput> | FreightCreateWithoutCurrencyInput[] | FreightUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutCurrencyInput | FreightCreateOrConnectWithoutCurrencyInput[]
    createMany?: FreightCreateManyCurrencyInputEnvelope
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
  }

  export type InvoiceUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<InvoiceCreateWithoutCurrencyInput, InvoiceUncheckedCreateWithoutCurrencyInput> | InvoiceCreateWithoutCurrencyInput[] | InvoiceUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCurrencyInput | InvoiceCreateOrConnectWithoutCurrencyInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCurrencyInput | InvoiceUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: InvoiceCreateManyCurrencyInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCurrencyInput | InvoiceUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCurrencyInput | InvoiceUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type FreightUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<FreightCreateWithoutCurrencyInput, FreightUncheckedCreateWithoutCurrencyInput> | FreightCreateWithoutCurrencyInput[] | FreightUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutCurrencyInput | FreightCreateOrConnectWithoutCurrencyInput[]
    upsert?: FreightUpsertWithWhereUniqueWithoutCurrencyInput | FreightUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: FreightCreateManyCurrencyInputEnvelope
    set?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    disconnect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    delete?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    update?: FreightUpdateWithWhereUniqueWithoutCurrencyInput | FreightUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: FreightUpdateManyWithWhereWithoutCurrencyInput | FreightUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: FreightScalarWhereInput | FreightScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<InvoiceCreateWithoutCurrencyInput, InvoiceUncheckedCreateWithoutCurrencyInput> | InvoiceCreateWithoutCurrencyInput[] | InvoiceUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCurrencyInput | InvoiceCreateOrConnectWithoutCurrencyInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCurrencyInput | InvoiceUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: InvoiceCreateManyCurrencyInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCurrencyInput | InvoiceUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCurrencyInput | InvoiceUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type FreightUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<FreightCreateWithoutCurrencyInput, FreightUncheckedCreateWithoutCurrencyInput> | FreightCreateWithoutCurrencyInput[] | FreightUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutCurrencyInput | FreightCreateOrConnectWithoutCurrencyInput[]
    upsert?: FreightUpsertWithWhereUniqueWithoutCurrencyInput | FreightUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: FreightCreateManyCurrencyInputEnvelope
    set?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    disconnect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    delete?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    update?: FreightUpdateWithWhereUniqueWithoutCurrencyInput | FreightUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: FreightUpdateManyWithWhereWithoutCurrencyInput | FreightUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: FreightScalarWhereInput | FreightScalarWhereInput[]
  }

  export type MaterialTypeCreateNestedManyWithoutGroupInput = {
    create?: XOR<MaterialTypeCreateWithoutGroupInput, MaterialTypeUncheckedCreateWithoutGroupInput> | MaterialTypeCreateWithoutGroupInput[] | MaterialTypeUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MaterialTypeCreateOrConnectWithoutGroupInput | MaterialTypeCreateOrConnectWithoutGroupInput[]
    createMany?: MaterialTypeCreateManyGroupInputEnvelope
    connect?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
  }

  export type MaterialTypeUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<MaterialTypeCreateWithoutGroupInput, MaterialTypeUncheckedCreateWithoutGroupInput> | MaterialTypeCreateWithoutGroupInput[] | MaterialTypeUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MaterialTypeCreateOrConnectWithoutGroupInput | MaterialTypeCreateOrConnectWithoutGroupInput[]
    createMany?: MaterialTypeCreateManyGroupInputEnvelope
    connect?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
  }

  export type MaterialTypeUpdateManyWithoutGroupNestedInput = {
    create?: XOR<MaterialTypeCreateWithoutGroupInput, MaterialTypeUncheckedCreateWithoutGroupInput> | MaterialTypeCreateWithoutGroupInput[] | MaterialTypeUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MaterialTypeCreateOrConnectWithoutGroupInput | MaterialTypeCreateOrConnectWithoutGroupInput[]
    upsert?: MaterialTypeUpsertWithWhereUniqueWithoutGroupInput | MaterialTypeUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: MaterialTypeCreateManyGroupInputEnvelope
    set?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    disconnect?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    delete?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    connect?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    update?: MaterialTypeUpdateWithWhereUniqueWithoutGroupInput | MaterialTypeUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: MaterialTypeUpdateManyWithWhereWithoutGroupInput | MaterialTypeUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: MaterialTypeScalarWhereInput | MaterialTypeScalarWhereInput[]
  }

  export type MaterialTypeUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<MaterialTypeCreateWithoutGroupInput, MaterialTypeUncheckedCreateWithoutGroupInput> | MaterialTypeCreateWithoutGroupInput[] | MaterialTypeUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: MaterialTypeCreateOrConnectWithoutGroupInput | MaterialTypeCreateOrConnectWithoutGroupInput[]
    upsert?: MaterialTypeUpsertWithWhereUniqueWithoutGroupInput | MaterialTypeUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: MaterialTypeCreateManyGroupInputEnvelope
    set?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    disconnect?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    delete?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    connect?: MaterialTypeWhereUniqueInput | MaterialTypeWhereUniqueInput[]
    update?: MaterialTypeUpdateWithWhereUniqueWithoutGroupInput | MaterialTypeUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: MaterialTypeUpdateManyWithWhereWithoutGroupInput | MaterialTypeUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: MaterialTypeScalarWhereInput | MaterialTypeScalarWhereInput[]
  }

  export type MaterialGroupCreateNestedOneWithoutMaterialTypeInput = {
    create?: XOR<MaterialGroupCreateWithoutMaterialTypeInput, MaterialGroupUncheckedCreateWithoutMaterialTypeInput>
    connectOrCreate?: MaterialGroupCreateOrConnectWithoutMaterialTypeInput
    connect?: MaterialGroupWhereUniqueInput
  }

  export type MaterialNameCreateNestedManyWithoutTypeInput = {
    create?: XOR<MaterialNameCreateWithoutTypeInput, MaterialNameUncheckedCreateWithoutTypeInput> | MaterialNameCreateWithoutTypeInput[] | MaterialNameUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: MaterialNameCreateOrConnectWithoutTypeInput | MaterialNameCreateOrConnectWithoutTypeInput[]
    createMany?: MaterialNameCreateManyTypeInputEnvelope
    connect?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
  }

  export type MaterialNameUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<MaterialNameCreateWithoutTypeInput, MaterialNameUncheckedCreateWithoutTypeInput> | MaterialNameCreateWithoutTypeInput[] | MaterialNameUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: MaterialNameCreateOrConnectWithoutTypeInput | MaterialNameCreateOrConnectWithoutTypeInput[]
    createMany?: MaterialNameCreateManyTypeInputEnvelope
    connect?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
  }

  export type MaterialGroupUpdateOneRequiredWithoutMaterialTypeNestedInput = {
    create?: XOR<MaterialGroupCreateWithoutMaterialTypeInput, MaterialGroupUncheckedCreateWithoutMaterialTypeInput>
    connectOrCreate?: MaterialGroupCreateOrConnectWithoutMaterialTypeInput
    upsert?: MaterialGroupUpsertWithoutMaterialTypeInput
    connect?: MaterialGroupWhereUniqueInput
    update?: XOR<XOR<MaterialGroupUpdateToOneWithWhereWithoutMaterialTypeInput, MaterialGroupUpdateWithoutMaterialTypeInput>, MaterialGroupUncheckedUpdateWithoutMaterialTypeInput>
  }

  export type MaterialNameUpdateManyWithoutTypeNestedInput = {
    create?: XOR<MaterialNameCreateWithoutTypeInput, MaterialNameUncheckedCreateWithoutTypeInput> | MaterialNameCreateWithoutTypeInput[] | MaterialNameUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: MaterialNameCreateOrConnectWithoutTypeInput | MaterialNameCreateOrConnectWithoutTypeInput[]
    upsert?: MaterialNameUpsertWithWhereUniqueWithoutTypeInput | MaterialNameUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: MaterialNameCreateManyTypeInputEnvelope
    set?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    disconnect?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    delete?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    connect?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    update?: MaterialNameUpdateWithWhereUniqueWithoutTypeInput | MaterialNameUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: MaterialNameUpdateManyWithWhereWithoutTypeInput | MaterialNameUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: MaterialNameScalarWhereInput | MaterialNameScalarWhereInput[]
  }

  export type MaterialNameUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<MaterialNameCreateWithoutTypeInput, MaterialNameUncheckedCreateWithoutTypeInput> | MaterialNameCreateWithoutTypeInput[] | MaterialNameUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: MaterialNameCreateOrConnectWithoutTypeInput | MaterialNameCreateOrConnectWithoutTypeInput[]
    upsert?: MaterialNameUpsertWithWhereUniqueWithoutTypeInput | MaterialNameUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: MaterialNameCreateManyTypeInputEnvelope
    set?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    disconnect?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    delete?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    connect?: MaterialNameWhereUniqueInput | MaterialNameWhereUniqueInput[]
    update?: MaterialNameUpdateWithWhereUniqueWithoutTypeInput | MaterialNameUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: MaterialNameUpdateManyWithWhereWithoutTypeInput | MaterialNameUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: MaterialNameScalarWhereInput | MaterialNameScalarWhereInput[]
  }

  export type MaterialTypeCreateNestedOneWithoutMaterialNameInput = {
    create?: XOR<MaterialTypeCreateWithoutMaterialNameInput, MaterialTypeUncheckedCreateWithoutMaterialNameInput>
    connectOrCreate?: MaterialTypeCreateOrConnectWithoutMaterialNameInput
    connect?: MaterialTypeWhereUniqueInput
  }

  export type InvoiceItemCreateNestedManyWithoutProductInput = {
    create?: XOR<InvoiceItemCreateWithoutProductInput, InvoiceItemUncheckedCreateWithoutProductInput> | InvoiceItemCreateWithoutProductInput[] | InvoiceItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutProductInput | InvoiceItemCreateOrConnectWithoutProductInput[]
    createMany?: InvoiceItemCreateManyProductInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type MaterialNeedCreateNestedManyWithoutProductInput = {
    create?: XOR<MaterialNeedCreateWithoutProductInput, MaterialNeedUncheckedCreateWithoutProductInput> | MaterialNeedCreateWithoutProductInput[] | MaterialNeedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutProductInput | MaterialNeedCreateOrConnectWithoutProductInput[]
    createMany?: MaterialNeedCreateManyProductInputEnvelope
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
  }

  export type PipelineProgressCreateNestedManyWithoutProductInput = {
    create?: XOR<PipelineProgressCreateWithoutProductInput, PipelineProgressUncheckedCreateWithoutProductInput> | PipelineProgressCreateWithoutProductInput[] | PipelineProgressUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutProductInput | PipelineProgressCreateOrConnectWithoutProductInput[]
    createMany?: PipelineProgressCreateManyProductInputEnvelope
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<InvoiceItemCreateWithoutProductInput, InvoiceItemUncheckedCreateWithoutProductInput> | InvoiceItemCreateWithoutProductInput[] | InvoiceItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutProductInput | InvoiceItemCreateOrConnectWithoutProductInput[]
    createMany?: InvoiceItemCreateManyProductInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type MaterialNeedUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<MaterialNeedCreateWithoutProductInput, MaterialNeedUncheckedCreateWithoutProductInput> | MaterialNeedCreateWithoutProductInput[] | MaterialNeedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutProductInput | MaterialNeedCreateOrConnectWithoutProductInput[]
    createMany?: MaterialNeedCreateManyProductInputEnvelope
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
  }

  export type PipelineProgressUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<PipelineProgressCreateWithoutProductInput, PipelineProgressUncheckedCreateWithoutProductInput> | PipelineProgressCreateWithoutProductInput[] | PipelineProgressUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutProductInput | PipelineProgressCreateOrConnectWithoutProductInput[]
    createMany?: PipelineProgressCreateManyProductInputEnvelope
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
  }

  export type MaterialTypeUpdateOneRequiredWithoutMaterialNameNestedInput = {
    create?: XOR<MaterialTypeCreateWithoutMaterialNameInput, MaterialTypeUncheckedCreateWithoutMaterialNameInput>
    connectOrCreate?: MaterialTypeCreateOrConnectWithoutMaterialNameInput
    upsert?: MaterialTypeUpsertWithoutMaterialNameInput
    connect?: MaterialTypeWhereUniqueInput
    update?: XOR<XOR<MaterialTypeUpdateToOneWithWhereWithoutMaterialNameInput, MaterialTypeUpdateWithoutMaterialNameInput>, MaterialTypeUncheckedUpdateWithoutMaterialNameInput>
  }

  export type InvoiceItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutProductInput, InvoiceItemUncheckedCreateWithoutProductInput> | InvoiceItemCreateWithoutProductInput[] | InvoiceItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutProductInput | InvoiceItemCreateOrConnectWithoutProductInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutProductInput | InvoiceItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: InvoiceItemCreateManyProductInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutProductInput | InvoiceItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutProductInput | InvoiceItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type MaterialNeedUpdateManyWithoutProductNestedInput = {
    create?: XOR<MaterialNeedCreateWithoutProductInput, MaterialNeedUncheckedCreateWithoutProductInput> | MaterialNeedCreateWithoutProductInput[] | MaterialNeedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutProductInput | MaterialNeedCreateOrConnectWithoutProductInput[]
    upsert?: MaterialNeedUpsertWithWhereUniqueWithoutProductInput | MaterialNeedUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MaterialNeedCreateManyProductInputEnvelope
    set?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    disconnect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    delete?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    update?: MaterialNeedUpdateWithWhereUniqueWithoutProductInput | MaterialNeedUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MaterialNeedUpdateManyWithWhereWithoutProductInput | MaterialNeedUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MaterialNeedScalarWhereInput | MaterialNeedScalarWhereInput[]
  }

  export type PipelineProgressUpdateManyWithoutProductNestedInput = {
    create?: XOR<PipelineProgressCreateWithoutProductInput, PipelineProgressUncheckedCreateWithoutProductInput> | PipelineProgressCreateWithoutProductInput[] | PipelineProgressUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutProductInput | PipelineProgressCreateOrConnectWithoutProductInput[]
    upsert?: PipelineProgressUpsertWithWhereUniqueWithoutProductInput | PipelineProgressUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PipelineProgressCreateManyProductInputEnvelope
    set?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    disconnect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    delete?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    update?: PipelineProgressUpdateWithWhereUniqueWithoutProductInput | PipelineProgressUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PipelineProgressUpdateManyWithWhereWithoutProductInput | PipelineProgressUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
  }

  export type InvoiceItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutProductInput, InvoiceItemUncheckedCreateWithoutProductInput> | InvoiceItemCreateWithoutProductInput[] | InvoiceItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutProductInput | InvoiceItemCreateOrConnectWithoutProductInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutProductInput | InvoiceItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: InvoiceItemCreateManyProductInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutProductInput | InvoiceItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutProductInput | InvoiceItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type MaterialNeedUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<MaterialNeedCreateWithoutProductInput, MaterialNeedUncheckedCreateWithoutProductInput> | MaterialNeedCreateWithoutProductInput[] | MaterialNeedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutProductInput | MaterialNeedCreateOrConnectWithoutProductInput[]
    upsert?: MaterialNeedUpsertWithWhereUniqueWithoutProductInput | MaterialNeedUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MaterialNeedCreateManyProductInputEnvelope
    set?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    disconnect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    delete?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    update?: MaterialNeedUpdateWithWhereUniqueWithoutProductInput | MaterialNeedUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MaterialNeedUpdateManyWithWhereWithoutProductInput | MaterialNeedUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MaterialNeedScalarWhereInput | MaterialNeedScalarWhereInput[]
  }

  export type PipelineProgressUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<PipelineProgressCreateWithoutProductInput, PipelineProgressUncheckedCreateWithoutProductInput> | PipelineProgressCreateWithoutProductInput[] | PipelineProgressUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutProductInput | PipelineProgressCreateOrConnectWithoutProductInput[]
    upsert?: PipelineProgressUpsertWithWhereUniqueWithoutProductInput | PipelineProgressUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PipelineProgressCreateManyProductInputEnvelope
    set?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    disconnect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    delete?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    update?: PipelineProgressUpdateWithWhereUniqueWithoutProductInput | PipelineProgressUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PipelineProgressUpdateManyWithWhereWithoutProductInput | PipelineProgressUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutShipmentInput = {
    create?: XOR<UserCreateWithoutShipmentInput, UserUncheckedCreateWithoutShipmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutShipmentInput
    connect?: UserWhereUniqueInput
  }

  export type ShipmentFileCreateNestedManyWithoutShipmentInput = {
    create?: XOR<ShipmentFileCreateWithoutShipmentInput, ShipmentFileUncheckedCreateWithoutShipmentInput> | ShipmentFileCreateWithoutShipmentInput[] | ShipmentFileUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: ShipmentFileCreateOrConnectWithoutShipmentInput | ShipmentFileCreateOrConnectWithoutShipmentInput[]
    createMany?: ShipmentFileCreateManyShipmentInputEnvelope
    connect?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
  }

  export type FreightCreateNestedManyWithoutShipmentInput = {
    create?: XOR<FreightCreateWithoutShipmentInput, FreightUncheckedCreateWithoutShipmentInput> | FreightCreateWithoutShipmentInput[] | FreightUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutShipmentInput | FreightCreateOrConnectWithoutShipmentInput[]
    createMany?: FreightCreateManyShipmentInputEnvelope
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutShipmentInput = {
    create?: XOR<InvoiceCreateWithoutShipmentInput, InvoiceUncheckedCreateWithoutShipmentInput> | InvoiceCreateWithoutShipmentInput[] | InvoiceUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipmentInput | InvoiceCreateOrConnectWithoutShipmentInput[]
    createMany?: InvoiceCreateManyShipmentInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type ShipmentFileUncheckedCreateNestedManyWithoutShipmentInput = {
    create?: XOR<ShipmentFileCreateWithoutShipmentInput, ShipmentFileUncheckedCreateWithoutShipmentInput> | ShipmentFileCreateWithoutShipmentInput[] | ShipmentFileUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: ShipmentFileCreateOrConnectWithoutShipmentInput | ShipmentFileCreateOrConnectWithoutShipmentInput[]
    createMany?: ShipmentFileCreateManyShipmentInputEnvelope
    connect?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
  }

  export type FreightUncheckedCreateNestedManyWithoutShipmentInput = {
    create?: XOR<FreightCreateWithoutShipmentInput, FreightUncheckedCreateWithoutShipmentInput> | FreightCreateWithoutShipmentInput[] | FreightUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutShipmentInput | FreightCreateOrConnectWithoutShipmentInput[]
    createMany?: FreightCreateManyShipmentInputEnvelope
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutShipmentInput = {
    create?: XOR<InvoiceCreateWithoutShipmentInput, InvoiceUncheckedCreateWithoutShipmentInput> | InvoiceCreateWithoutShipmentInput[] | InvoiceUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipmentInput | InvoiceCreateOrConnectWithoutShipmentInput[]
    createMany?: InvoiceCreateManyShipmentInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type EnumShipmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.ShipmentStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutShipmentNestedInput = {
    create?: XOR<UserCreateWithoutShipmentInput, UserUncheckedCreateWithoutShipmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutShipmentInput
    upsert?: UserUpsertWithoutShipmentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShipmentInput, UserUpdateWithoutShipmentInput>, UserUncheckedUpdateWithoutShipmentInput>
  }

  export type ShipmentFileUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<ShipmentFileCreateWithoutShipmentInput, ShipmentFileUncheckedCreateWithoutShipmentInput> | ShipmentFileCreateWithoutShipmentInput[] | ShipmentFileUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: ShipmentFileCreateOrConnectWithoutShipmentInput | ShipmentFileCreateOrConnectWithoutShipmentInput[]
    upsert?: ShipmentFileUpsertWithWhereUniqueWithoutShipmentInput | ShipmentFileUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: ShipmentFileCreateManyShipmentInputEnvelope
    set?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    disconnect?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    delete?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    connect?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    update?: ShipmentFileUpdateWithWhereUniqueWithoutShipmentInput | ShipmentFileUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: ShipmentFileUpdateManyWithWhereWithoutShipmentInput | ShipmentFileUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: ShipmentFileScalarWhereInput | ShipmentFileScalarWhereInput[]
  }

  export type FreightUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<FreightCreateWithoutShipmentInput, FreightUncheckedCreateWithoutShipmentInput> | FreightCreateWithoutShipmentInput[] | FreightUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutShipmentInput | FreightCreateOrConnectWithoutShipmentInput[]
    upsert?: FreightUpsertWithWhereUniqueWithoutShipmentInput | FreightUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: FreightCreateManyShipmentInputEnvelope
    set?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    disconnect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    delete?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    update?: FreightUpdateWithWhereUniqueWithoutShipmentInput | FreightUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: FreightUpdateManyWithWhereWithoutShipmentInput | FreightUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: FreightScalarWhereInput | FreightScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<InvoiceCreateWithoutShipmentInput, InvoiceUncheckedCreateWithoutShipmentInput> | InvoiceCreateWithoutShipmentInput[] | InvoiceUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipmentInput | InvoiceCreateOrConnectWithoutShipmentInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutShipmentInput | InvoiceUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: InvoiceCreateManyShipmentInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutShipmentInput | InvoiceUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutShipmentInput | InvoiceUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ShipmentFileUncheckedUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<ShipmentFileCreateWithoutShipmentInput, ShipmentFileUncheckedCreateWithoutShipmentInput> | ShipmentFileCreateWithoutShipmentInput[] | ShipmentFileUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: ShipmentFileCreateOrConnectWithoutShipmentInput | ShipmentFileCreateOrConnectWithoutShipmentInput[]
    upsert?: ShipmentFileUpsertWithWhereUniqueWithoutShipmentInput | ShipmentFileUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: ShipmentFileCreateManyShipmentInputEnvelope
    set?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    disconnect?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    delete?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    connect?: ShipmentFileWhereUniqueInput | ShipmentFileWhereUniqueInput[]
    update?: ShipmentFileUpdateWithWhereUniqueWithoutShipmentInput | ShipmentFileUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: ShipmentFileUpdateManyWithWhereWithoutShipmentInput | ShipmentFileUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: ShipmentFileScalarWhereInput | ShipmentFileScalarWhereInput[]
  }

  export type FreightUncheckedUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<FreightCreateWithoutShipmentInput, FreightUncheckedCreateWithoutShipmentInput> | FreightCreateWithoutShipmentInput[] | FreightUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: FreightCreateOrConnectWithoutShipmentInput | FreightCreateOrConnectWithoutShipmentInput[]
    upsert?: FreightUpsertWithWhereUniqueWithoutShipmentInput | FreightUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: FreightCreateManyShipmentInputEnvelope
    set?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    disconnect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    delete?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    connect?: FreightWhereUniqueInput | FreightWhereUniqueInput[]
    update?: FreightUpdateWithWhereUniqueWithoutShipmentInput | FreightUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: FreightUpdateManyWithWhereWithoutShipmentInput | FreightUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: FreightScalarWhereInput | FreightScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutShipmentNestedInput = {
    create?: XOR<InvoiceCreateWithoutShipmentInput, InvoiceUncheckedCreateWithoutShipmentInput> | InvoiceCreateWithoutShipmentInput[] | InvoiceUncheckedCreateWithoutShipmentInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipmentInput | InvoiceCreateOrConnectWithoutShipmentInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutShipmentInput | InvoiceUpsertWithWhereUniqueWithoutShipmentInput[]
    createMany?: InvoiceCreateManyShipmentInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutShipmentInput | InvoiceUpdateWithWhereUniqueWithoutShipmentInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutShipmentInput | InvoiceUpdateManyWithWhereWithoutShipmentInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ShipmentCreateNestedOneWithoutFilesInput = {
    create?: XOR<ShipmentCreateWithoutFilesInput, ShipmentUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutFilesInput
    connect?: ShipmentWhereUniqueInput
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type ShipmentUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<ShipmentCreateWithoutFilesInput, ShipmentUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutFilesInput
    upsert?: ShipmentUpsertWithoutFilesInput
    connect?: ShipmentWhereUniqueInput
    update?: XOR<XOR<ShipmentUpdateToOneWithWhereWithoutFilesInput, ShipmentUpdateWithoutFilesInput>, ShipmentUncheckedUpdateWithoutFilesInput>
  }

  export type VendorCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: VendorCreateOrConnectWithoutInvoiceInput
    connect?: VendorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoiceInput
    connect?: UserWhereUniqueInput
  }

  export type CurrencyCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<CurrencyCreateWithoutInvoiceInput, CurrencyUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutInvoiceInput
    connect?: CurrencyWhereUniqueInput
  }

  export type ShipmentCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<ShipmentCreateWithoutInvoicesInput, ShipmentUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutInvoicesInput
    connect?: ShipmentWhereUniqueInput
  }

  export type InvoiceItemCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type FreightInvoiceCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<FreightInvoiceCreateWithoutInvoiceInput, FreightInvoiceUncheckedCreateWithoutInvoiceInput> | FreightInvoiceCreateWithoutInvoiceInput[] | FreightInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutInvoiceInput | FreightInvoiceCreateOrConnectWithoutInvoiceInput[]
    createMany?: FreightInvoiceCreateManyInvoiceInputEnvelope
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type FreightInvoiceUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<FreightInvoiceCreateWithoutInvoiceInput, FreightInvoiceUncheckedCreateWithoutInvoiceInput> | FreightInvoiceCreateWithoutInvoiceInput[] | FreightInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutInvoiceInput | FreightInvoiceCreateOrConnectWithoutInvoiceInput[]
    createMany?: FreightInvoiceCreateManyInvoiceInputEnvelope
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type VendorUpdateOneRequiredWithoutInvoiceNestedInput = {
    create?: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: VendorCreateOrConnectWithoutInvoiceInput
    upsert?: VendorUpsertWithoutInvoiceInput
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutInvoiceInput, VendorUpdateWithoutInvoiceInput>, VendorUncheckedUpdateWithoutInvoiceInput>
  }

  export type UserUpdateOneRequiredWithoutInvoiceNestedInput = {
    create?: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoiceInput
    upsert?: UserUpsertWithoutInvoiceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvoiceInput, UserUpdateWithoutInvoiceInput>, UserUncheckedUpdateWithoutInvoiceInput>
  }

  export type CurrencyUpdateOneRequiredWithoutInvoiceNestedInput = {
    create?: XOR<CurrencyCreateWithoutInvoiceInput, CurrencyUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutInvoiceInput
    upsert?: CurrencyUpsertWithoutInvoiceInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutInvoiceInput, CurrencyUpdateWithoutInvoiceInput>, CurrencyUncheckedUpdateWithoutInvoiceInput>
  }

  export type ShipmentUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<ShipmentCreateWithoutInvoicesInput, ShipmentUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutInvoicesInput
    upsert?: ShipmentUpsertWithoutInvoicesInput
    connect?: ShipmentWhereUniqueInput
    update?: XOR<XOR<ShipmentUpdateToOneWithWhereWithoutInvoicesInput, ShipmentUpdateWithoutInvoicesInput>, ShipmentUncheckedUpdateWithoutInvoicesInput>
  }

  export type InvoiceItemUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type FreightInvoiceUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<FreightInvoiceCreateWithoutInvoiceInput, FreightInvoiceUncheckedCreateWithoutInvoiceInput> | FreightInvoiceCreateWithoutInvoiceInput[] | FreightInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutInvoiceInput | FreightInvoiceCreateOrConnectWithoutInvoiceInput[]
    upsert?: FreightInvoiceUpsertWithWhereUniqueWithoutInvoiceInput | FreightInvoiceUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: FreightInvoiceCreateManyInvoiceInputEnvelope
    set?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    disconnect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    delete?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    update?: FreightInvoiceUpdateWithWhereUniqueWithoutInvoiceInput | FreightInvoiceUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: FreightInvoiceUpdateManyWithWhereWithoutInvoiceInput | FreightInvoiceUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: FreightInvoiceScalarWhereInput | FreightInvoiceScalarWhereInput[]
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type FreightInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<FreightInvoiceCreateWithoutInvoiceInput, FreightInvoiceUncheckedCreateWithoutInvoiceInput> | FreightInvoiceCreateWithoutInvoiceInput[] | FreightInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutInvoiceInput | FreightInvoiceCreateOrConnectWithoutInvoiceInput[]
    upsert?: FreightInvoiceUpsertWithWhereUniqueWithoutInvoiceInput | FreightInvoiceUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: FreightInvoiceCreateManyInvoiceInputEnvelope
    set?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    disconnect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    delete?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    update?: FreightInvoiceUpdateWithWhereUniqueWithoutInvoiceInput | FreightInvoiceUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: FreightInvoiceUpdateManyWithWhereWithoutInvoiceInput | FreightInvoiceUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: FreightInvoiceScalarWhereInput | FreightInvoiceScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutItemsInput = {
    create?: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItemsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type MaterialNameCreateNestedOneWithoutInvoiceItemInput = {
    create?: XOR<MaterialNameCreateWithoutInvoiceItemInput, MaterialNameUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: MaterialNameCreateOrConnectWithoutInvoiceItemInput
    connect?: MaterialNameWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutInvoiceItemInput = {
    create?: XOR<UnitCreateWithoutInvoiceItemInput, UnitUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: UnitCreateOrConnectWithoutInvoiceItemInput
    connect?: UnitWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItemsInput
    upsert?: InvoiceUpsertWithoutItemsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutItemsInput, InvoiceUpdateWithoutItemsInput>, InvoiceUncheckedUpdateWithoutItemsInput>
  }

  export type MaterialNameUpdateOneRequiredWithoutInvoiceItemNestedInput = {
    create?: XOR<MaterialNameCreateWithoutInvoiceItemInput, MaterialNameUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: MaterialNameCreateOrConnectWithoutInvoiceItemInput
    upsert?: MaterialNameUpsertWithoutInvoiceItemInput
    connect?: MaterialNameWhereUniqueInput
    update?: XOR<XOR<MaterialNameUpdateToOneWithWhereWithoutInvoiceItemInput, MaterialNameUpdateWithoutInvoiceItemInput>, MaterialNameUncheckedUpdateWithoutInvoiceItemInput>
  }

  export type UnitUpdateOneRequiredWithoutInvoiceItemNestedInput = {
    create?: XOR<UnitCreateWithoutInvoiceItemInput, UnitUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: UnitCreateOrConnectWithoutInvoiceItemInput
    upsert?: UnitUpsertWithoutInvoiceItemInput
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutInvoiceItemInput, UnitUpdateWithoutInvoiceItemInput>, UnitUncheckedUpdateWithoutInvoiceItemInput>
  }

  export type CurrencyCreateNestedOneWithoutFreightInput = {
    create?: XOR<CurrencyCreateWithoutFreightInput, CurrencyUncheckedCreateWithoutFreightInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutFreightInput
    connect?: CurrencyWhereUniqueInput
  }

  export type ShipmentCreateNestedOneWithoutFreightsInput = {
    create?: XOR<ShipmentCreateWithoutFreightsInput, ShipmentUncheckedCreateWithoutFreightsInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutFreightsInput
    connect?: ShipmentWhereUniqueInput
  }

  export type FreightInvoiceCreateNestedManyWithoutFreightInput = {
    create?: XOR<FreightInvoiceCreateWithoutFreightInput, FreightInvoiceUncheckedCreateWithoutFreightInput> | FreightInvoiceCreateWithoutFreightInput[] | FreightInvoiceUncheckedCreateWithoutFreightInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutFreightInput | FreightInvoiceCreateOrConnectWithoutFreightInput[]
    createMany?: FreightInvoiceCreateManyFreightInputEnvelope
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutFreightInput = {
    create?: XOR<UserCreateWithoutFreightInput, UserUncheckedCreateWithoutFreightInput>
    connectOrCreate?: UserCreateOrConnectWithoutFreightInput
    connect?: UserWhereUniqueInput
  }

  export type FreightInvoiceUncheckedCreateNestedManyWithoutFreightInput = {
    create?: XOR<FreightInvoiceCreateWithoutFreightInput, FreightInvoiceUncheckedCreateWithoutFreightInput> | FreightInvoiceCreateWithoutFreightInput[] | FreightInvoiceUncheckedCreateWithoutFreightInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutFreightInput | FreightInvoiceCreateOrConnectWithoutFreightInput[]
    createMany?: FreightInvoiceCreateManyFreightInputEnvelope
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CurrencyUpdateOneWithoutFreightNestedInput = {
    create?: XOR<CurrencyCreateWithoutFreightInput, CurrencyUncheckedCreateWithoutFreightInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutFreightInput
    upsert?: CurrencyUpsertWithoutFreightInput
    disconnect?: CurrencyWhereInput | boolean
    delete?: CurrencyWhereInput | boolean
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutFreightInput, CurrencyUpdateWithoutFreightInput>, CurrencyUncheckedUpdateWithoutFreightInput>
  }

  export type ShipmentUpdateOneRequiredWithoutFreightsNestedInput = {
    create?: XOR<ShipmentCreateWithoutFreightsInput, ShipmentUncheckedCreateWithoutFreightsInput>
    connectOrCreate?: ShipmentCreateOrConnectWithoutFreightsInput
    upsert?: ShipmentUpsertWithoutFreightsInput
    connect?: ShipmentWhereUniqueInput
    update?: XOR<XOR<ShipmentUpdateToOneWithWhereWithoutFreightsInput, ShipmentUpdateWithoutFreightsInput>, ShipmentUncheckedUpdateWithoutFreightsInput>
  }

  export type FreightInvoiceUpdateManyWithoutFreightNestedInput = {
    create?: XOR<FreightInvoiceCreateWithoutFreightInput, FreightInvoiceUncheckedCreateWithoutFreightInput> | FreightInvoiceCreateWithoutFreightInput[] | FreightInvoiceUncheckedCreateWithoutFreightInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutFreightInput | FreightInvoiceCreateOrConnectWithoutFreightInput[]
    upsert?: FreightInvoiceUpsertWithWhereUniqueWithoutFreightInput | FreightInvoiceUpsertWithWhereUniqueWithoutFreightInput[]
    createMany?: FreightInvoiceCreateManyFreightInputEnvelope
    set?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    disconnect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    delete?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    update?: FreightInvoiceUpdateWithWhereUniqueWithoutFreightInput | FreightInvoiceUpdateWithWhereUniqueWithoutFreightInput[]
    updateMany?: FreightInvoiceUpdateManyWithWhereWithoutFreightInput | FreightInvoiceUpdateManyWithWhereWithoutFreightInput[]
    deleteMany?: FreightInvoiceScalarWhereInput | FreightInvoiceScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutFreightNestedInput = {
    create?: XOR<UserCreateWithoutFreightInput, UserUncheckedCreateWithoutFreightInput>
    connectOrCreate?: UserCreateOrConnectWithoutFreightInput
    upsert?: UserUpsertWithoutFreightInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFreightInput, UserUpdateWithoutFreightInput>, UserUncheckedUpdateWithoutFreightInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FreightInvoiceUncheckedUpdateManyWithoutFreightNestedInput = {
    create?: XOR<FreightInvoiceCreateWithoutFreightInput, FreightInvoiceUncheckedCreateWithoutFreightInput> | FreightInvoiceCreateWithoutFreightInput[] | FreightInvoiceUncheckedCreateWithoutFreightInput[]
    connectOrCreate?: FreightInvoiceCreateOrConnectWithoutFreightInput | FreightInvoiceCreateOrConnectWithoutFreightInput[]
    upsert?: FreightInvoiceUpsertWithWhereUniqueWithoutFreightInput | FreightInvoiceUpsertWithWhereUniqueWithoutFreightInput[]
    createMany?: FreightInvoiceCreateManyFreightInputEnvelope
    set?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    disconnect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    delete?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    connect?: FreightInvoiceWhereUniqueInput | FreightInvoiceWhereUniqueInput[]
    update?: FreightInvoiceUpdateWithWhereUniqueWithoutFreightInput | FreightInvoiceUpdateWithWhereUniqueWithoutFreightInput[]
    updateMany?: FreightInvoiceUpdateManyWithWhereWithoutFreightInput | FreightInvoiceUpdateManyWithWhereWithoutFreightInput[]
    deleteMany?: FreightInvoiceScalarWhereInput | FreightInvoiceScalarWhereInput[]
  }

  export type FreightCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<FreightCreateWithoutInvoicesInput, FreightUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: FreightCreateOrConnectWithoutInvoicesInput
    connect?: FreightWhereUniqueInput
  }

  export type InvoiceCreateNestedOneWithoutFreightsInput = {
    create?: XOR<InvoiceCreateWithoutFreightsInput, InvoiceUncheckedCreateWithoutFreightsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutFreightsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type FreightUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<FreightCreateWithoutInvoicesInput, FreightUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: FreightCreateOrConnectWithoutInvoicesInput
    upsert?: FreightUpsertWithoutInvoicesInput
    connect?: FreightWhereUniqueInput
    update?: XOR<XOR<FreightUpdateToOneWithWhereWithoutInvoicesInput, FreightUpdateWithoutInvoicesInput>, FreightUncheckedUpdateWithoutInvoicesInput>
  }

  export type InvoiceUpdateOneRequiredWithoutFreightsNestedInput = {
    create?: XOR<InvoiceCreateWithoutFreightsInput, InvoiceUncheckedCreateWithoutFreightsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutFreightsInput
    upsert?: InvoiceUpsertWithoutFreightsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutFreightsInput, InvoiceUpdateWithoutFreightsInput>, InvoiceUncheckedUpdateWithoutFreightsInput>
  }

  export type PipelineProgressCreateNestedManyWithoutVillageInput = {
    create?: XOR<PipelineProgressCreateWithoutVillageInput, PipelineProgressUncheckedCreateWithoutVillageInput> | PipelineProgressCreateWithoutVillageInput[] | PipelineProgressUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutVillageInput | PipelineProgressCreateOrConnectWithoutVillageInput[]
    createMany?: PipelineProgressCreateManyVillageInputEnvelope
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
  }

  export type MaterialNeedCreateNestedManyWithoutVillageInput = {
    create?: XOR<MaterialNeedCreateWithoutVillageInput, MaterialNeedUncheckedCreateWithoutVillageInput> | MaterialNeedCreateWithoutVillageInput[] | MaterialNeedUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutVillageInput | MaterialNeedCreateOrConnectWithoutVillageInput[]
    createMany?: MaterialNeedCreateManyVillageInputEnvelope
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
  }

  export type PipelineProgressUncheckedCreateNestedManyWithoutVillageInput = {
    create?: XOR<PipelineProgressCreateWithoutVillageInput, PipelineProgressUncheckedCreateWithoutVillageInput> | PipelineProgressCreateWithoutVillageInput[] | PipelineProgressUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutVillageInput | PipelineProgressCreateOrConnectWithoutVillageInput[]
    createMany?: PipelineProgressCreateManyVillageInputEnvelope
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
  }

  export type MaterialNeedUncheckedCreateNestedManyWithoutVillageInput = {
    create?: XOR<MaterialNeedCreateWithoutVillageInput, MaterialNeedUncheckedCreateWithoutVillageInput> | MaterialNeedCreateWithoutVillageInput[] | MaterialNeedUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutVillageInput | MaterialNeedCreateOrConnectWithoutVillageInput[]
    createMany?: MaterialNeedCreateManyVillageInputEnvelope
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PipelineProgressUpdateManyWithoutVillageNestedInput = {
    create?: XOR<PipelineProgressCreateWithoutVillageInput, PipelineProgressUncheckedCreateWithoutVillageInput> | PipelineProgressCreateWithoutVillageInput[] | PipelineProgressUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutVillageInput | PipelineProgressCreateOrConnectWithoutVillageInput[]
    upsert?: PipelineProgressUpsertWithWhereUniqueWithoutVillageInput | PipelineProgressUpsertWithWhereUniqueWithoutVillageInput[]
    createMany?: PipelineProgressCreateManyVillageInputEnvelope
    set?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    disconnect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    delete?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    update?: PipelineProgressUpdateWithWhereUniqueWithoutVillageInput | PipelineProgressUpdateWithWhereUniqueWithoutVillageInput[]
    updateMany?: PipelineProgressUpdateManyWithWhereWithoutVillageInput | PipelineProgressUpdateManyWithWhereWithoutVillageInput[]
    deleteMany?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
  }

  export type MaterialNeedUpdateManyWithoutVillageNestedInput = {
    create?: XOR<MaterialNeedCreateWithoutVillageInput, MaterialNeedUncheckedCreateWithoutVillageInput> | MaterialNeedCreateWithoutVillageInput[] | MaterialNeedUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutVillageInput | MaterialNeedCreateOrConnectWithoutVillageInput[]
    upsert?: MaterialNeedUpsertWithWhereUniqueWithoutVillageInput | MaterialNeedUpsertWithWhereUniqueWithoutVillageInput[]
    createMany?: MaterialNeedCreateManyVillageInputEnvelope
    set?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    disconnect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    delete?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    update?: MaterialNeedUpdateWithWhereUniqueWithoutVillageInput | MaterialNeedUpdateWithWhereUniqueWithoutVillageInput[]
    updateMany?: MaterialNeedUpdateManyWithWhereWithoutVillageInput | MaterialNeedUpdateManyWithWhereWithoutVillageInput[]
    deleteMany?: MaterialNeedScalarWhereInput | MaterialNeedScalarWhereInput[]
  }

  export type PipelineProgressUncheckedUpdateManyWithoutVillageNestedInput = {
    create?: XOR<PipelineProgressCreateWithoutVillageInput, PipelineProgressUncheckedCreateWithoutVillageInput> | PipelineProgressCreateWithoutVillageInput[] | PipelineProgressUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: PipelineProgressCreateOrConnectWithoutVillageInput | PipelineProgressCreateOrConnectWithoutVillageInput[]
    upsert?: PipelineProgressUpsertWithWhereUniqueWithoutVillageInput | PipelineProgressUpsertWithWhereUniqueWithoutVillageInput[]
    createMany?: PipelineProgressCreateManyVillageInputEnvelope
    set?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    disconnect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    delete?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    connect?: PipelineProgressWhereUniqueInput | PipelineProgressWhereUniqueInput[]
    update?: PipelineProgressUpdateWithWhereUniqueWithoutVillageInput | PipelineProgressUpdateWithWhereUniqueWithoutVillageInput[]
    updateMany?: PipelineProgressUpdateManyWithWhereWithoutVillageInput | PipelineProgressUpdateManyWithWhereWithoutVillageInput[]
    deleteMany?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
  }

  export type MaterialNeedUncheckedUpdateManyWithoutVillageNestedInput = {
    create?: XOR<MaterialNeedCreateWithoutVillageInput, MaterialNeedUncheckedCreateWithoutVillageInput> | MaterialNeedCreateWithoutVillageInput[] | MaterialNeedUncheckedCreateWithoutVillageInput[]
    connectOrCreate?: MaterialNeedCreateOrConnectWithoutVillageInput | MaterialNeedCreateOrConnectWithoutVillageInput[]
    upsert?: MaterialNeedUpsertWithWhereUniqueWithoutVillageInput | MaterialNeedUpsertWithWhereUniqueWithoutVillageInput[]
    createMany?: MaterialNeedCreateManyVillageInputEnvelope
    set?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    disconnect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    delete?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    connect?: MaterialNeedWhereUniqueInput | MaterialNeedWhereUniqueInput[]
    update?: MaterialNeedUpdateWithWhereUniqueWithoutVillageInput | MaterialNeedUpdateWithWhereUniqueWithoutVillageInput[]
    updateMany?: MaterialNeedUpdateManyWithWhereWithoutVillageInput | MaterialNeedUpdateManyWithWhereWithoutVillageInput[]
    deleteMany?: MaterialNeedScalarWhereInput | MaterialNeedScalarWhereInput[]
  }

  export type MaterialNameCreateNestedOneWithoutMaterialNeedInput = {
    create?: XOR<MaterialNameCreateWithoutMaterialNeedInput, MaterialNameUncheckedCreateWithoutMaterialNeedInput>
    connectOrCreate?: MaterialNameCreateOrConnectWithoutMaterialNeedInput
    connect?: MaterialNameWhereUniqueInput
  }

  export type VillageCreateNestedOneWithoutMaterialNeedsInput = {
    create?: XOR<VillageCreateWithoutMaterialNeedsInput, VillageUncheckedCreateWithoutMaterialNeedsInput>
    connectOrCreate?: VillageCreateOrConnectWithoutMaterialNeedsInput
    connect?: VillageWhereUniqueInput
  }

  export type MaterialNameUpdateOneRequiredWithoutMaterialNeedNestedInput = {
    create?: XOR<MaterialNameCreateWithoutMaterialNeedInput, MaterialNameUncheckedCreateWithoutMaterialNeedInput>
    connectOrCreate?: MaterialNameCreateOrConnectWithoutMaterialNeedInput
    upsert?: MaterialNameUpsertWithoutMaterialNeedInput
    connect?: MaterialNameWhereUniqueInput
    update?: XOR<XOR<MaterialNameUpdateToOneWithWhereWithoutMaterialNeedInput, MaterialNameUpdateWithoutMaterialNeedInput>, MaterialNameUncheckedUpdateWithoutMaterialNeedInput>
  }

  export type VillageUpdateOneRequiredWithoutMaterialNeedsNestedInput = {
    create?: XOR<VillageCreateWithoutMaterialNeedsInput, VillageUncheckedCreateWithoutMaterialNeedsInput>
    connectOrCreate?: VillageCreateOrConnectWithoutMaterialNeedsInput
    upsert?: VillageUpsertWithoutMaterialNeedsInput
    connect?: VillageWhereUniqueInput
    update?: XOR<XOR<VillageUpdateToOneWithWhereWithoutMaterialNeedsInput, VillageUpdateWithoutMaterialNeedsInput>, VillageUncheckedUpdateWithoutMaterialNeedsInput>
  }

  export type MaterialNameCreateNestedOneWithoutPipelineProgressInput = {
    create?: XOR<MaterialNameCreateWithoutPipelineProgressInput, MaterialNameUncheckedCreateWithoutPipelineProgressInput>
    connectOrCreate?: MaterialNameCreateOrConnectWithoutPipelineProgressInput
    connect?: MaterialNameWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutPipelineProgressInput = {
    create?: XOR<UnitCreateWithoutPipelineProgressInput, UnitUncheckedCreateWithoutPipelineProgressInput>
    connectOrCreate?: UnitCreateOrConnectWithoutPipelineProgressInput
    connect?: UnitWhereUniqueInput
  }

  export type VillageCreateNestedOneWithoutPipelineProgressInput = {
    create?: XOR<VillageCreateWithoutPipelineProgressInput, VillageUncheckedCreateWithoutPipelineProgressInput>
    connectOrCreate?: VillageCreateOrConnectWithoutPipelineProgressInput
    connect?: VillageWhereUniqueInput
  }

  export type MaterialNameUpdateOneRequiredWithoutPipelineProgressNestedInput = {
    create?: XOR<MaterialNameCreateWithoutPipelineProgressInput, MaterialNameUncheckedCreateWithoutPipelineProgressInput>
    connectOrCreate?: MaterialNameCreateOrConnectWithoutPipelineProgressInput
    upsert?: MaterialNameUpsertWithoutPipelineProgressInput
    connect?: MaterialNameWhereUniqueInput
    update?: XOR<XOR<MaterialNameUpdateToOneWithWhereWithoutPipelineProgressInput, MaterialNameUpdateWithoutPipelineProgressInput>, MaterialNameUncheckedUpdateWithoutPipelineProgressInput>
  }

  export type UnitUpdateOneRequiredWithoutPipelineProgressNestedInput = {
    create?: XOR<UnitCreateWithoutPipelineProgressInput, UnitUncheckedCreateWithoutPipelineProgressInput>
    connectOrCreate?: UnitCreateOrConnectWithoutPipelineProgressInput
    upsert?: UnitUpsertWithoutPipelineProgressInput
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutPipelineProgressInput, UnitUpdateWithoutPipelineProgressInput>, UnitUncheckedUpdateWithoutPipelineProgressInput>
  }

  export type VillageUpdateOneRequiredWithoutPipelineProgressNestedInput = {
    create?: XOR<VillageCreateWithoutPipelineProgressInput, VillageUncheckedCreateWithoutPipelineProgressInput>
    connectOrCreate?: VillageCreateOrConnectWithoutPipelineProgressInput
    upsert?: VillageUpsertWithoutPipelineProgressInput
    connect?: VillageWhereUniqueInput
    update?: XOR<XOR<VillageUpdateToOneWithWhereWithoutPipelineProgressInput, VillageUpdateWithoutPipelineProgressInput>, VillageUncheckedUpdateWithoutPipelineProgressInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumShipmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipmentStatus | EnumShipmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipmentStatusFilter<$PrismaModel> | $Enums.ShipmentStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumShipmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipmentStatus | EnumShipmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipmentStatus[] | ListEnumShipmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShipmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShipmentStatusFilter<$PrismaModel>
    _max?: NestedEnumShipmentStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type VendorCreateWithoutUserInput = {
    alias: string
    name: string
    address: string
    country: string
    createdAt?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutUserInput = {
    id?: number
    alias: string
    name: string
    address: string
    country: string
    createdAt?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutUserInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput>
  }

  export type VendorCreateManyUserInputEnvelope = {
    data: VendorCreateManyUserInput | VendorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutUserInput = {
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    vendor: VendorCreateNestedOneWithoutInvoiceInput
    currency: CurrencyCreateNestedOneWithoutInvoiceInput
    shipment: ShipmentCreateNestedOneWithoutInvoicesInput
    Items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutUserInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
    Items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceCreateManyUserInputEnvelope = {
    data: InvoiceCreateManyUserInput | InvoiceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShipmentCreateWithoutUserInput = {
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    createdAt?: Date | string
    Files?: ShipmentFileCreateNestedManyWithoutShipmentInput
    Freights?: FreightCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentUncheckedCreateWithoutUserInput = {
    id?: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    createdAt?: Date | string
    Files?: ShipmentFileUncheckedCreateNestedManyWithoutShipmentInput
    Freights?: FreightUncheckedCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentCreateOrConnectWithoutUserInput = {
    where: ShipmentWhereUniqueInput
    create: XOR<ShipmentCreateWithoutUserInput, ShipmentUncheckedCreateWithoutUserInput>
  }

  export type ShipmentCreateManyUserInputEnvelope = {
    data: ShipmentCreateManyUserInput | ShipmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FreightCreateWithoutUserInput = {
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    isArrived?: boolean
    currency?: CurrencyCreateNestedOneWithoutFreightInput
    shipment: ShipmentCreateNestedOneWithoutFreightsInput
    invoices?: FreightInvoiceCreateNestedManyWithoutFreightInput
  }

  export type FreightUncheckedCreateWithoutUserInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    currencyId?: number | null
    shipmentId: number
    isArrived?: boolean
    invoices?: FreightInvoiceUncheckedCreateNestedManyWithoutFreightInput
  }

  export type FreightCreateOrConnectWithoutUserInput = {
    where: FreightWhereUniqueInput
    create: XOR<FreightCreateWithoutUserInput, FreightUncheckedCreateWithoutUserInput>
  }

  export type FreightCreateManyUserInputEnvelope = {
    data: FreightCreateManyUserInput | FreightCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VendorUpsertWithWhereUniqueWithoutUserInput = {
    where: VendorWhereUniqueInput
    update: XOR<VendorUpdateWithoutUserInput, VendorUncheckedUpdateWithoutUserInput>
    create: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput>
  }

  export type VendorUpdateWithWhereUniqueWithoutUserInput = {
    where: VendorWhereUniqueInput
    data: XOR<VendorUpdateWithoutUserInput, VendorUncheckedUpdateWithoutUserInput>
  }

  export type VendorUpdateManyWithWhereWithoutUserInput = {
    where: VendorScalarWhereInput
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyWithoutUserInput>
  }

  export type VendorScalarWhereInput = {
    AND?: VendorScalarWhereInput | VendorScalarWhereInput[]
    OR?: VendorScalarWhereInput[]
    NOT?: VendorScalarWhereInput | VendorScalarWhereInput[]
    id?: IntFilter<"Vendor"> | number
    alias?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    address?: StringFilter<"Vendor"> | string
    country?: StringFilter<"Vendor"> | string
    userId?: IntFilter<"Vendor"> | number
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutUserInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutUserInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: IntFilter<"Invoice"> | number
    vendorId?: IntFilter<"Invoice"> | number
    invoiceNumber?: StringFilter<"Invoice"> | string
    invoiceDate?: DateTimeFilter<"Invoice"> | Date | string
    totalAmount?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    isArrived?: BoolNullableFilter<"Invoice"> | boolean | null
    userId?: IntFilter<"Invoice"> | number
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    currencyId?: IntFilter<"Invoice"> | number
    shipmentId?: IntFilter<"Invoice"> | number
  }

  export type ShipmentUpsertWithWhereUniqueWithoutUserInput = {
    where: ShipmentWhereUniqueInput
    update: XOR<ShipmentUpdateWithoutUserInput, ShipmentUncheckedUpdateWithoutUserInput>
    create: XOR<ShipmentCreateWithoutUserInput, ShipmentUncheckedCreateWithoutUserInput>
  }

  export type ShipmentUpdateWithWhereUniqueWithoutUserInput = {
    where: ShipmentWhereUniqueInput
    data: XOR<ShipmentUpdateWithoutUserInput, ShipmentUncheckedUpdateWithoutUserInput>
  }

  export type ShipmentUpdateManyWithWhereWithoutUserInput = {
    where: ShipmentScalarWhereInput
    data: XOR<ShipmentUpdateManyMutationInput, ShipmentUncheckedUpdateManyWithoutUserInput>
  }

  export type ShipmentScalarWhereInput = {
    AND?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
    OR?: ShipmentScalarWhereInput[]
    NOT?: ShipmentScalarWhereInput | ShipmentScalarWhereInput[]
    id?: IntFilter<"Shipment"> | number
    alias?: StringFilter<"Shipment"> | string
    status?: EnumShipmentStatusFilter<"Shipment"> | $Enums.ShipmentStatus
    declaration_number?: StringNullableFilter<"Shipment"> | string | null
    declaration_date?: DateTimeNullableFilter<"Shipment"> | Date | string | null
    userId?: IntFilter<"Shipment"> | number
    createdAt?: DateTimeFilter<"Shipment"> | Date | string
  }

  export type FreightUpsertWithWhereUniqueWithoutUserInput = {
    where: FreightWhereUniqueInput
    update: XOR<FreightUpdateWithoutUserInput, FreightUncheckedUpdateWithoutUserInput>
    create: XOR<FreightCreateWithoutUserInput, FreightUncheckedCreateWithoutUserInput>
  }

  export type FreightUpdateWithWhereUniqueWithoutUserInput = {
    where: FreightWhereUniqueInput
    data: XOR<FreightUpdateWithoutUserInput, FreightUncheckedUpdateWithoutUserInput>
  }

  export type FreightUpdateManyWithWhereWithoutUserInput = {
    where: FreightScalarWhereInput
    data: XOR<FreightUpdateManyMutationInput, FreightUncheckedUpdateManyWithoutUserInput>
  }

  export type FreightScalarWhereInput = {
    AND?: FreightScalarWhereInput | FreightScalarWhereInput[]
    OR?: FreightScalarWhereInput[]
    NOT?: FreightScalarWhereInput | FreightScalarWhereInput[]
    id?: IntFilter<"Freight"> | number
    truckNumber?: StringFilter<"Freight"> | string
    forwarder?: StringNullableFilter<"Freight"> | string | null
    billNumber?: StringNullableFilter<"Freight"> | string | null
    billDate?: DateTimeNullableFilter<"Freight"> | Date | string | null
    freightRate?: DecimalNullableFilter<"Freight"> | Decimal | DecimalJsLike | number | string | null
    currencyId?: IntNullableFilter<"Freight"> | number | null
    shipmentId?: IntFilter<"Freight"> | number
    isArrived?: BoolFilter<"Freight"> | boolean
    userId?: IntFilter<"Freight"> | number
  }

  export type UserCreateWithoutVendorInput = {
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    Shipment?: ShipmentCreateNestedManyWithoutUserInput
    Freight?: FreightCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVendorInput = {
    id?: number
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    Shipment?: ShipmentUncheckedCreateNestedManyWithoutUserInput
    Freight?: FreightUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVendorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVendorInput, UserUncheckedCreateWithoutVendorInput>
  }

  export type InvoiceCreateWithoutVendorInput = {
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutInvoiceInput
    currency: CurrencyCreateNestedOneWithoutInvoiceInput
    shipment: ShipmentCreateNestedOneWithoutInvoicesInput
    Items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutVendorInput = {
    id?: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
    Items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutVendorInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput>
  }

  export type InvoiceCreateManyVendorInputEnvelope = {
    data: InvoiceCreateManyVendorInput | InvoiceCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVendorInput = {
    update: XOR<UserUpdateWithoutVendorInput, UserUncheckedUpdateWithoutVendorInput>
    create: XOR<UserCreateWithoutVendorInput, UserUncheckedCreateWithoutVendorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVendorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVendorInput, UserUncheckedUpdateWithoutVendorInput>
  }

  export type UserUpdateWithoutVendorInput = {
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUpdateManyWithoutUserNestedInput
    Freight?: FreightUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUncheckedUpdateManyWithoutUserNestedInput
    Freight?: FreightUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InvoiceUpsertWithWhereUniqueWithoutVendorInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutVendorInput, InvoiceUncheckedUpdateWithoutVendorInput>
    create: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutVendorInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutVendorInput, InvoiceUncheckedUpdateWithoutVendorInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutVendorInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutVendorInput>
  }

  export type InvoiceItemCreateWithoutUnitInput = {
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
    invoice: InvoiceCreateNestedOneWithoutItemsInput
    product: MaterialNameCreateNestedOneWithoutInvoiceItemInput
  }

  export type InvoiceItemUncheckedCreateWithoutUnitInput = {
    id?: number
    invoiceId: number
    productId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemCreateOrConnectWithoutUnitInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutUnitInput, InvoiceItemUncheckedCreateWithoutUnitInput>
  }

  export type InvoiceItemCreateManyUnitInputEnvelope = {
    data: InvoiceItemCreateManyUnitInput | InvoiceItemCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type PipelineProgressCreateWithoutUnitInput = {
    requiredAmount: Decimal | DecimalJsLike | number | string
    product: MaterialNameCreateNestedOneWithoutPipelineProgressInput
    village: VillageCreateNestedOneWithoutPipelineProgressInput
  }

  export type PipelineProgressUncheckedCreateWithoutUnitInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    villageId: number
  }

  export type PipelineProgressCreateOrConnectWithoutUnitInput = {
    where: PipelineProgressWhereUniqueInput
    create: XOR<PipelineProgressCreateWithoutUnitInput, PipelineProgressUncheckedCreateWithoutUnitInput>
  }

  export type PipelineProgressCreateManyUnitInputEnvelope = {
    data: PipelineProgressCreateManyUnitInput | PipelineProgressCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutUnitInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutUnitInput, InvoiceItemUncheckedUpdateWithoutUnitInput>
    create: XOR<InvoiceItemCreateWithoutUnitInput, InvoiceItemUncheckedCreateWithoutUnitInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutUnitInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutUnitInput, InvoiceItemUncheckedUpdateWithoutUnitInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutUnitInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutUnitInput>
  }

  export type InvoiceItemScalarWhereInput = {
    AND?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    OR?: InvoiceItemScalarWhereInput[]
    NOT?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    id?: IntFilter<"InvoiceItem"> | number
    invoiceId?: IntFilter<"InvoiceItem"> | number
    productId?: IntFilter<"InvoiceItem"> | number
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitId?: IntFilter<"InvoiceItem"> | number
    unitPrice?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    total?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
  }

  export type PipelineProgressUpsertWithWhereUniqueWithoutUnitInput = {
    where: PipelineProgressWhereUniqueInput
    update: XOR<PipelineProgressUpdateWithoutUnitInput, PipelineProgressUncheckedUpdateWithoutUnitInput>
    create: XOR<PipelineProgressCreateWithoutUnitInput, PipelineProgressUncheckedCreateWithoutUnitInput>
  }

  export type PipelineProgressUpdateWithWhereUniqueWithoutUnitInput = {
    where: PipelineProgressWhereUniqueInput
    data: XOR<PipelineProgressUpdateWithoutUnitInput, PipelineProgressUncheckedUpdateWithoutUnitInput>
  }

  export type PipelineProgressUpdateManyWithWhereWithoutUnitInput = {
    where: PipelineProgressScalarWhereInput
    data: XOR<PipelineProgressUpdateManyMutationInput, PipelineProgressUncheckedUpdateManyWithoutUnitInput>
  }

  export type PipelineProgressScalarWhereInput = {
    AND?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
    OR?: PipelineProgressScalarWhereInput[]
    NOT?: PipelineProgressScalarWhereInput | PipelineProgressScalarWhereInput[]
    id?: IntFilter<"PipelineProgress"> | number
    productId?: IntFilter<"PipelineProgress"> | number
    requiredAmount?: DecimalFilter<"PipelineProgress"> | Decimal | DecimalJsLike | number | string
    unitId?: IntFilter<"PipelineProgress"> | number
    villageId?: IntFilter<"PipelineProgress"> | number
  }

  export type InvoiceCreateWithoutCurrencyInput = {
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    vendor: VendorCreateNestedOneWithoutInvoiceInput
    user: UserCreateNestedOneWithoutInvoiceInput
    shipment: ShipmentCreateNestedOneWithoutInvoicesInput
    Items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutCurrencyInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    shipmentId: number
    Items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutCurrencyInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCurrencyInput, InvoiceUncheckedCreateWithoutCurrencyInput>
  }

  export type InvoiceCreateManyCurrencyInputEnvelope = {
    data: InvoiceCreateManyCurrencyInput | InvoiceCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type FreightCreateWithoutCurrencyInput = {
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    isArrived?: boolean
    shipment: ShipmentCreateNestedOneWithoutFreightsInput
    invoices?: FreightInvoiceCreateNestedManyWithoutFreightInput
    user: UserCreateNestedOneWithoutFreightInput
  }

  export type FreightUncheckedCreateWithoutCurrencyInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    shipmentId: number
    isArrived?: boolean
    userId: number
    invoices?: FreightInvoiceUncheckedCreateNestedManyWithoutFreightInput
  }

  export type FreightCreateOrConnectWithoutCurrencyInput = {
    where: FreightWhereUniqueInput
    create: XOR<FreightCreateWithoutCurrencyInput, FreightUncheckedCreateWithoutCurrencyInput>
  }

  export type FreightCreateManyCurrencyInputEnvelope = {
    data: FreightCreateManyCurrencyInput | FreightCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutCurrencyInput, InvoiceUncheckedUpdateWithoutCurrencyInput>
    create: XOR<InvoiceCreateWithoutCurrencyInput, InvoiceUncheckedCreateWithoutCurrencyInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutCurrencyInput, InvoiceUncheckedUpdateWithoutCurrencyInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutCurrencyInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type FreightUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: FreightWhereUniqueInput
    update: XOR<FreightUpdateWithoutCurrencyInput, FreightUncheckedUpdateWithoutCurrencyInput>
    create: XOR<FreightCreateWithoutCurrencyInput, FreightUncheckedCreateWithoutCurrencyInput>
  }

  export type FreightUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: FreightWhereUniqueInput
    data: XOR<FreightUpdateWithoutCurrencyInput, FreightUncheckedUpdateWithoutCurrencyInput>
  }

  export type FreightUpdateManyWithWhereWithoutCurrencyInput = {
    where: FreightScalarWhereInput
    data: XOR<FreightUpdateManyMutationInput, FreightUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type MaterialTypeCreateWithoutGroupInput = {
    type: string
    MaterialName?: MaterialNameCreateNestedManyWithoutTypeInput
  }

  export type MaterialTypeUncheckedCreateWithoutGroupInput = {
    id?: number
    type: string
    MaterialName?: MaterialNameUncheckedCreateNestedManyWithoutTypeInput
  }

  export type MaterialTypeCreateOrConnectWithoutGroupInput = {
    where: MaterialTypeWhereUniqueInput
    create: XOR<MaterialTypeCreateWithoutGroupInput, MaterialTypeUncheckedCreateWithoutGroupInput>
  }

  export type MaterialTypeCreateManyGroupInputEnvelope = {
    data: MaterialTypeCreateManyGroupInput | MaterialTypeCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type MaterialTypeUpsertWithWhereUniqueWithoutGroupInput = {
    where: MaterialTypeWhereUniqueInput
    update: XOR<MaterialTypeUpdateWithoutGroupInput, MaterialTypeUncheckedUpdateWithoutGroupInput>
    create: XOR<MaterialTypeCreateWithoutGroupInput, MaterialTypeUncheckedCreateWithoutGroupInput>
  }

  export type MaterialTypeUpdateWithWhereUniqueWithoutGroupInput = {
    where: MaterialTypeWhereUniqueInput
    data: XOR<MaterialTypeUpdateWithoutGroupInput, MaterialTypeUncheckedUpdateWithoutGroupInput>
  }

  export type MaterialTypeUpdateManyWithWhereWithoutGroupInput = {
    where: MaterialTypeScalarWhereInput
    data: XOR<MaterialTypeUpdateManyMutationInput, MaterialTypeUncheckedUpdateManyWithoutGroupInput>
  }

  export type MaterialTypeScalarWhereInput = {
    AND?: MaterialTypeScalarWhereInput | MaterialTypeScalarWhereInput[]
    OR?: MaterialTypeScalarWhereInput[]
    NOT?: MaterialTypeScalarWhereInput | MaterialTypeScalarWhereInput[]
    id?: IntFilter<"MaterialType"> | number
    type?: StringFilter<"MaterialType"> | string
    groupId?: IntFilter<"MaterialType"> | number
  }

  export type MaterialGroupCreateWithoutMaterialTypeInput = {
    name: string
    description: string
  }

  export type MaterialGroupUncheckedCreateWithoutMaterialTypeInput = {
    id?: number
    name: string
    description: string
  }

  export type MaterialGroupCreateOrConnectWithoutMaterialTypeInput = {
    where: MaterialGroupWhereUniqueInput
    create: XOR<MaterialGroupCreateWithoutMaterialTypeInput, MaterialGroupUncheckedCreateWithoutMaterialTypeInput>
  }

  export type MaterialNameCreateWithoutTypeInput = {
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutProductInput
    MaterialNeed?: MaterialNeedCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutProductInput
  }

  export type MaterialNameUncheckedCreateWithoutTypeInput = {
    id?: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutProductInput
    MaterialNeed?: MaterialNeedUncheckedCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutProductInput
  }

  export type MaterialNameCreateOrConnectWithoutTypeInput = {
    where: MaterialNameWhereUniqueInput
    create: XOR<MaterialNameCreateWithoutTypeInput, MaterialNameUncheckedCreateWithoutTypeInput>
  }

  export type MaterialNameCreateManyTypeInputEnvelope = {
    data: MaterialNameCreateManyTypeInput | MaterialNameCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type MaterialGroupUpsertWithoutMaterialTypeInput = {
    update: XOR<MaterialGroupUpdateWithoutMaterialTypeInput, MaterialGroupUncheckedUpdateWithoutMaterialTypeInput>
    create: XOR<MaterialGroupCreateWithoutMaterialTypeInput, MaterialGroupUncheckedCreateWithoutMaterialTypeInput>
    where?: MaterialGroupWhereInput
  }

  export type MaterialGroupUpdateToOneWithWhereWithoutMaterialTypeInput = {
    where?: MaterialGroupWhereInput
    data: XOR<MaterialGroupUpdateWithoutMaterialTypeInput, MaterialGroupUncheckedUpdateWithoutMaterialTypeInput>
  }

  export type MaterialGroupUpdateWithoutMaterialTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialGroupUncheckedUpdateWithoutMaterialTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialNameUpsertWithWhereUniqueWithoutTypeInput = {
    where: MaterialNameWhereUniqueInput
    update: XOR<MaterialNameUpdateWithoutTypeInput, MaterialNameUncheckedUpdateWithoutTypeInput>
    create: XOR<MaterialNameCreateWithoutTypeInput, MaterialNameUncheckedCreateWithoutTypeInput>
  }

  export type MaterialNameUpdateWithWhereUniqueWithoutTypeInput = {
    where: MaterialNameWhereUniqueInput
    data: XOR<MaterialNameUpdateWithoutTypeInput, MaterialNameUncheckedUpdateWithoutTypeInput>
  }

  export type MaterialNameUpdateManyWithWhereWithoutTypeInput = {
    where: MaterialNameScalarWhereInput
    data: XOR<MaterialNameUpdateManyMutationInput, MaterialNameUncheckedUpdateManyWithoutTypeInput>
  }

  export type MaterialNameScalarWhereInput = {
    AND?: MaterialNameScalarWhereInput | MaterialNameScalarWhereInput[]
    OR?: MaterialNameScalarWhereInput[]
    NOT?: MaterialNameScalarWhereInput | MaterialNameScalarWhereInput[]
    id?: IntFilter<"MaterialName"> | number
    name?: StringFilter<"MaterialName"> | string
    dn?: StringFilter<"MaterialName"> | string
    pn?: StringFilter<"MaterialName"> | string
    degree?: IntFilter<"MaterialName"> | number
    description?: StringFilter<"MaterialName"> | string
    typeId?: IntFilter<"MaterialName"> | number
  }

  export type MaterialTypeCreateWithoutMaterialNameInput = {
    type: string
    group: MaterialGroupCreateNestedOneWithoutMaterialTypeInput
  }

  export type MaterialTypeUncheckedCreateWithoutMaterialNameInput = {
    id?: number
    type: string
    groupId: number
  }

  export type MaterialTypeCreateOrConnectWithoutMaterialNameInput = {
    where: MaterialTypeWhereUniqueInput
    create: XOR<MaterialTypeCreateWithoutMaterialNameInput, MaterialTypeUncheckedCreateWithoutMaterialNameInput>
  }

  export type InvoiceItemCreateWithoutProductInput = {
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
    invoice: InvoiceCreateNestedOneWithoutItemsInput
    unit: UnitCreateNestedOneWithoutInvoiceItemInput
  }

  export type InvoiceItemUncheckedCreateWithoutProductInput = {
    id?: number
    invoiceId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitId: number
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemCreateOrConnectWithoutProductInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutProductInput, InvoiceItemUncheckedCreateWithoutProductInput>
  }

  export type InvoiceItemCreateManyProductInputEnvelope = {
    data: InvoiceItemCreateManyProductInput | InvoiceItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type MaterialNeedCreateWithoutProductInput = {
    requiredAmount: Decimal | DecimalJsLike | number | string
    village: VillageCreateNestedOneWithoutMaterialNeedsInput
  }

  export type MaterialNeedUncheckedCreateWithoutProductInput = {
    id?: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    villageId: number
  }

  export type MaterialNeedCreateOrConnectWithoutProductInput = {
    where: MaterialNeedWhereUniqueInput
    create: XOR<MaterialNeedCreateWithoutProductInput, MaterialNeedUncheckedCreateWithoutProductInput>
  }

  export type MaterialNeedCreateManyProductInputEnvelope = {
    data: MaterialNeedCreateManyProductInput | MaterialNeedCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type PipelineProgressCreateWithoutProductInput = {
    requiredAmount: Decimal | DecimalJsLike | number | string
    unit: UnitCreateNestedOneWithoutPipelineProgressInput
    village: VillageCreateNestedOneWithoutPipelineProgressInput
  }

  export type PipelineProgressUncheckedCreateWithoutProductInput = {
    id?: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    unitId: number
    villageId: number
  }

  export type PipelineProgressCreateOrConnectWithoutProductInput = {
    where: PipelineProgressWhereUniqueInput
    create: XOR<PipelineProgressCreateWithoutProductInput, PipelineProgressUncheckedCreateWithoutProductInput>
  }

  export type PipelineProgressCreateManyProductInputEnvelope = {
    data: PipelineProgressCreateManyProductInput | PipelineProgressCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type MaterialTypeUpsertWithoutMaterialNameInput = {
    update: XOR<MaterialTypeUpdateWithoutMaterialNameInput, MaterialTypeUncheckedUpdateWithoutMaterialNameInput>
    create: XOR<MaterialTypeCreateWithoutMaterialNameInput, MaterialTypeUncheckedCreateWithoutMaterialNameInput>
    where?: MaterialTypeWhereInput
  }

  export type MaterialTypeUpdateToOneWithWhereWithoutMaterialNameInput = {
    where?: MaterialTypeWhereInput
    data: XOR<MaterialTypeUpdateWithoutMaterialNameInput, MaterialTypeUncheckedUpdateWithoutMaterialNameInput>
  }

  export type MaterialTypeUpdateWithoutMaterialNameInput = {
    type?: StringFieldUpdateOperationsInput | string
    group?: MaterialGroupUpdateOneRequiredWithoutMaterialTypeNestedInput
  }

  export type MaterialTypeUncheckedUpdateWithoutMaterialNameInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutProductInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutProductInput, InvoiceItemUncheckedUpdateWithoutProductInput>
    create: XOR<InvoiceItemCreateWithoutProductInput, InvoiceItemUncheckedCreateWithoutProductInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutProductInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutProductInput, InvoiceItemUncheckedUpdateWithoutProductInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutProductInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutProductInput>
  }

  export type MaterialNeedUpsertWithWhereUniqueWithoutProductInput = {
    where: MaterialNeedWhereUniqueInput
    update: XOR<MaterialNeedUpdateWithoutProductInput, MaterialNeedUncheckedUpdateWithoutProductInput>
    create: XOR<MaterialNeedCreateWithoutProductInput, MaterialNeedUncheckedCreateWithoutProductInput>
  }

  export type MaterialNeedUpdateWithWhereUniqueWithoutProductInput = {
    where: MaterialNeedWhereUniqueInput
    data: XOR<MaterialNeedUpdateWithoutProductInput, MaterialNeedUncheckedUpdateWithoutProductInput>
  }

  export type MaterialNeedUpdateManyWithWhereWithoutProductInput = {
    where: MaterialNeedScalarWhereInput
    data: XOR<MaterialNeedUpdateManyMutationInput, MaterialNeedUncheckedUpdateManyWithoutProductInput>
  }

  export type MaterialNeedScalarWhereInput = {
    AND?: MaterialNeedScalarWhereInput | MaterialNeedScalarWhereInput[]
    OR?: MaterialNeedScalarWhereInput[]
    NOT?: MaterialNeedScalarWhereInput | MaterialNeedScalarWhereInput[]
    id?: IntFilter<"MaterialNeed"> | number
    productId?: IntFilter<"MaterialNeed"> | number
    requiredAmount?: DecimalFilter<"MaterialNeed"> | Decimal | DecimalJsLike | number | string
    villageId?: IntFilter<"MaterialNeed"> | number
  }

  export type PipelineProgressUpsertWithWhereUniqueWithoutProductInput = {
    where: PipelineProgressWhereUniqueInput
    update: XOR<PipelineProgressUpdateWithoutProductInput, PipelineProgressUncheckedUpdateWithoutProductInput>
    create: XOR<PipelineProgressCreateWithoutProductInput, PipelineProgressUncheckedCreateWithoutProductInput>
  }

  export type PipelineProgressUpdateWithWhereUniqueWithoutProductInput = {
    where: PipelineProgressWhereUniqueInput
    data: XOR<PipelineProgressUpdateWithoutProductInput, PipelineProgressUncheckedUpdateWithoutProductInput>
  }

  export type PipelineProgressUpdateManyWithWhereWithoutProductInput = {
    where: PipelineProgressScalarWhereInput
    data: XOR<PipelineProgressUpdateManyMutationInput, PipelineProgressUncheckedUpdateManyWithoutProductInput>
  }

  export type UserCreateWithoutShipmentInput = {
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorCreateNestedManyWithoutUserInput
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    Freight?: FreightCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShipmentInput = {
    id?: number
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorUncheckedCreateNestedManyWithoutUserInput
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    Freight?: FreightUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShipmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShipmentInput, UserUncheckedCreateWithoutShipmentInput>
  }

  export type ShipmentFileCreateWithoutShipmentInput = {
    fileName: string
    fileType?: string | null
    fileData?: Uint8Array | null
  }

  export type ShipmentFileUncheckedCreateWithoutShipmentInput = {
    id?: number
    fileName: string
    fileType?: string | null
    fileData?: Uint8Array | null
  }

  export type ShipmentFileCreateOrConnectWithoutShipmentInput = {
    where: ShipmentFileWhereUniqueInput
    create: XOR<ShipmentFileCreateWithoutShipmentInput, ShipmentFileUncheckedCreateWithoutShipmentInput>
  }

  export type ShipmentFileCreateManyShipmentInputEnvelope = {
    data: ShipmentFileCreateManyShipmentInput | ShipmentFileCreateManyShipmentInput[]
    skipDuplicates?: boolean
  }

  export type FreightCreateWithoutShipmentInput = {
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    isArrived?: boolean
    currency?: CurrencyCreateNestedOneWithoutFreightInput
    invoices?: FreightInvoiceCreateNestedManyWithoutFreightInput
    user: UserCreateNestedOneWithoutFreightInput
  }

  export type FreightUncheckedCreateWithoutShipmentInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    currencyId?: number | null
    isArrived?: boolean
    userId: number
    invoices?: FreightInvoiceUncheckedCreateNestedManyWithoutFreightInput
  }

  export type FreightCreateOrConnectWithoutShipmentInput = {
    where: FreightWhereUniqueInput
    create: XOR<FreightCreateWithoutShipmentInput, FreightUncheckedCreateWithoutShipmentInput>
  }

  export type FreightCreateManyShipmentInputEnvelope = {
    data: FreightCreateManyShipmentInput | FreightCreateManyShipmentInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutShipmentInput = {
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    vendor: VendorCreateNestedOneWithoutInvoiceInput
    user: UserCreateNestedOneWithoutInvoiceInput
    currency: CurrencyCreateNestedOneWithoutInvoiceInput
    Items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutShipmentInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
    Items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    Freights?: FreightInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutShipmentInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutShipmentInput, InvoiceUncheckedCreateWithoutShipmentInput>
  }

  export type InvoiceCreateManyShipmentInputEnvelope = {
    data: InvoiceCreateManyShipmentInput | InvoiceCreateManyShipmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutShipmentInput = {
    update: XOR<UserUpdateWithoutShipmentInput, UserUncheckedUpdateWithoutShipmentInput>
    create: XOR<UserCreateWithoutShipmentInput, UserUncheckedCreateWithoutShipmentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShipmentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShipmentInput, UserUncheckedUpdateWithoutShipmentInput>
  }

  export type UserUpdateWithoutShipmentInput = {
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUpdateManyWithoutUserNestedInput
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    Freight?: FreightUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUncheckedUpdateManyWithoutUserNestedInput
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    Freight?: FreightUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShipmentFileUpsertWithWhereUniqueWithoutShipmentInput = {
    where: ShipmentFileWhereUniqueInput
    update: XOR<ShipmentFileUpdateWithoutShipmentInput, ShipmentFileUncheckedUpdateWithoutShipmentInput>
    create: XOR<ShipmentFileCreateWithoutShipmentInput, ShipmentFileUncheckedCreateWithoutShipmentInput>
  }

  export type ShipmentFileUpdateWithWhereUniqueWithoutShipmentInput = {
    where: ShipmentFileWhereUniqueInput
    data: XOR<ShipmentFileUpdateWithoutShipmentInput, ShipmentFileUncheckedUpdateWithoutShipmentInput>
  }

  export type ShipmentFileUpdateManyWithWhereWithoutShipmentInput = {
    where: ShipmentFileScalarWhereInput
    data: XOR<ShipmentFileUpdateManyMutationInput, ShipmentFileUncheckedUpdateManyWithoutShipmentInput>
  }

  export type ShipmentFileScalarWhereInput = {
    AND?: ShipmentFileScalarWhereInput | ShipmentFileScalarWhereInput[]
    OR?: ShipmentFileScalarWhereInput[]
    NOT?: ShipmentFileScalarWhereInput | ShipmentFileScalarWhereInput[]
    id?: IntFilter<"ShipmentFile"> | number
    shipmentId?: IntFilter<"ShipmentFile"> | number
    fileName?: StringFilter<"ShipmentFile"> | string
    fileType?: StringNullableFilter<"ShipmentFile"> | string | null
    fileData?: BytesNullableFilter<"ShipmentFile"> | Uint8Array | null
  }

  export type FreightUpsertWithWhereUniqueWithoutShipmentInput = {
    where: FreightWhereUniqueInput
    update: XOR<FreightUpdateWithoutShipmentInput, FreightUncheckedUpdateWithoutShipmentInput>
    create: XOR<FreightCreateWithoutShipmentInput, FreightUncheckedCreateWithoutShipmentInput>
  }

  export type FreightUpdateWithWhereUniqueWithoutShipmentInput = {
    where: FreightWhereUniqueInput
    data: XOR<FreightUpdateWithoutShipmentInput, FreightUncheckedUpdateWithoutShipmentInput>
  }

  export type FreightUpdateManyWithWhereWithoutShipmentInput = {
    where: FreightScalarWhereInput
    data: XOR<FreightUpdateManyMutationInput, FreightUncheckedUpdateManyWithoutShipmentInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutShipmentInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutShipmentInput, InvoiceUncheckedUpdateWithoutShipmentInput>
    create: XOR<InvoiceCreateWithoutShipmentInput, InvoiceUncheckedCreateWithoutShipmentInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutShipmentInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutShipmentInput, InvoiceUncheckedUpdateWithoutShipmentInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutShipmentInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutShipmentInput>
  }

  export type ShipmentCreateWithoutFilesInput = {
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutShipmentInput
    Freights?: FreightCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentUncheckedCreateWithoutFilesInput = {
    id?: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    userId: number
    createdAt?: Date | string
    Freights?: FreightUncheckedCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentCreateOrConnectWithoutFilesInput = {
    where: ShipmentWhereUniqueInput
    create: XOR<ShipmentCreateWithoutFilesInput, ShipmentUncheckedCreateWithoutFilesInput>
  }

  export type ShipmentUpsertWithoutFilesInput = {
    update: XOR<ShipmentUpdateWithoutFilesInput, ShipmentUncheckedUpdateWithoutFilesInput>
    create: XOR<ShipmentCreateWithoutFilesInput, ShipmentUncheckedCreateWithoutFilesInput>
    where?: ShipmentWhereInput
  }

  export type ShipmentUpdateToOneWithWhereWithoutFilesInput = {
    where?: ShipmentWhereInput
    data: XOR<ShipmentUpdateWithoutFilesInput, ShipmentUncheckedUpdateWithoutFilesInput>
  }

  export type ShipmentUpdateWithoutFilesInput = {
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShipmentNestedInput
    Freights?: FreightUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateWithoutFilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Freights?: FreightUncheckedUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type VendorCreateWithoutInvoiceInput = {
    alias: string
    name: string
    address: string
    country: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutInvoiceInput = {
    id?: number
    alias: string
    name: string
    address: string
    country: string
    userId: number
    createdAt?: Date | string
  }

  export type VendorCreateOrConnectWithoutInvoiceInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
  }

  export type UserCreateWithoutInvoiceInput = {
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorCreateNestedManyWithoutUserInput
    Shipment?: ShipmentCreateNestedManyWithoutUserInput
    Freight?: FreightCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvoiceInput = {
    id?: number
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorUncheckedCreateNestedManyWithoutUserInput
    Shipment?: ShipmentUncheckedCreateNestedManyWithoutUserInput
    Freight?: FreightUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvoiceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
  }

  export type CurrencyCreateWithoutInvoiceInput = {
    code: string
    name: string
    Freight?: FreightCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutInvoiceInput = {
    id?: number
    code: string
    name: string
    Freight?: FreightUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutInvoiceInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutInvoiceInput, CurrencyUncheckedCreateWithoutInvoiceInput>
  }

  export type ShipmentCreateWithoutInvoicesInput = {
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutShipmentInput
    Files?: ShipmentFileCreateNestedManyWithoutShipmentInput
    Freights?: FreightCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentUncheckedCreateWithoutInvoicesInput = {
    id?: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    userId: number
    createdAt?: Date | string
    Files?: ShipmentFileUncheckedCreateNestedManyWithoutShipmentInput
    Freights?: FreightUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentCreateOrConnectWithoutInvoicesInput = {
    where: ShipmentWhereUniqueInput
    create: XOR<ShipmentCreateWithoutInvoicesInput, ShipmentUncheckedCreateWithoutInvoicesInput>
  }

  export type InvoiceItemCreateWithoutInvoiceInput = {
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
    product: MaterialNameCreateNestedOneWithoutInvoiceItemInput
    unit: UnitCreateNestedOneWithoutInvoiceItemInput
  }

  export type InvoiceItemUncheckedCreateWithoutInvoiceInput = {
    id?: number
    productId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitId: number
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemCreateManyInvoiceInputEnvelope = {
    data: InvoiceItemCreateManyInvoiceInput | InvoiceItemCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type FreightInvoiceCreateWithoutInvoiceInput = {
    freight: FreightCreateNestedOneWithoutInvoicesInput
  }

  export type FreightInvoiceUncheckedCreateWithoutInvoiceInput = {
    freightId: number
  }

  export type FreightInvoiceCreateOrConnectWithoutInvoiceInput = {
    where: FreightInvoiceWhereUniqueInput
    create: XOR<FreightInvoiceCreateWithoutInvoiceInput, FreightInvoiceUncheckedCreateWithoutInvoiceInput>
  }

  export type FreightInvoiceCreateManyInvoiceInputEnvelope = {
    data: FreightInvoiceCreateManyInvoiceInput | FreightInvoiceCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type VendorUpsertWithoutInvoiceInput = {
    update: XOR<VendorUpdateWithoutInvoiceInput, VendorUncheckedUpdateWithoutInvoiceInput>
    create: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutInvoiceInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutInvoiceInput, VendorUncheckedUpdateWithoutInvoiceInput>
  }

  export type VendorUpdateWithoutInvoiceInput = {
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutInvoiceInput = {
    update: XOR<UserUpdateWithoutInvoiceInput, UserUncheckedUpdateWithoutInvoiceInput>
    create: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvoiceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvoiceInput, UserUncheckedUpdateWithoutInvoiceInput>
  }

  export type UserUpdateWithoutInvoiceInput = {
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUpdateManyWithoutUserNestedInput
    Freight?: FreightUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUncheckedUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUncheckedUpdateManyWithoutUserNestedInput
    Freight?: FreightUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CurrencyUpsertWithoutInvoiceInput = {
    update: XOR<CurrencyUpdateWithoutInvoiceInput, CurrencyUncheckedUpdateWithoutInvoiceInput>
    create: XOR<CurrencyCreateWithoutInvoiceInput, CurrencyUncheckedCreateWithoutInvoiceInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutInvoiceInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutInvoiceInput, CurrencyUncheckedUpdateWithoutInvoiceInput>
  }

  export type CurrencyUpdateWithoutInvoiceInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Freight?: FreightUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Freight?: FreightUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type ShipmentUpsertWithoutInvoicesInput = {
    update: XOR<ShipmentUpdateWithoutInvoicesInput, ShipmentUncheckedUpdateWithoutInvoicesInput>
    create: XOR<ShipmentCreateWithoutInvoicesInput, ShipmentUncheckedCreateWithoutInvoicesInput>
    where?: ShipmentWhereInput
  }

  export type ShipmentUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: ShipmentWhereInput
    data: XOR<ShipmentUpdateWithoutInvoicesInput, ShipmentUncheckedUpdateWithoutInvoicesInput>
  }

  export type ShipmentUpdateWithoutInvoicesInput = {
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShipmentNestedInput
    Files?: ShipmentFileUpdateManyWithoutShipmentNestedInput
    Freights?: FreightUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Files?: ShipmentFileUncheckedUpdateManyWithoutShipmentNestedInput
    Freights?: FreightUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type FreightInvoiceUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: FreightInvoiceWhereUniqueInput
    update: XOR<FreightInvoiceUpdateWithoutInvoiceInput, FreightInvoiceUncheckedUpdateWithoutInvoiceInput>
    create: XOR<FreightInvoiceCreateWithoutInvoiceInput, FreightInvoiceUncheckedCreateWithoutInvoiceInput>
  }

  export type FreightInvoiceUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: FreightInvoiceWhereUniqueInput
    data: XOR<FreightInvoiceUpdateWithoutInvoiceInput, FreightInvoiceUncheckedUpdateWithoutInvoiceInput>
  }

  export type FreightInvoiceUpdateManyWithWhereWithoutInvoiceInput = {
    where: FreightInvoiceScalarWhereInput
    data: XOR<FreightInvoiceUpdateManyMutationInput, FreightInvoiceUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type FreightInvoiceScalarWhereInput = {
    AND?: FreightInvoiceScalarWhereInput | FreightInvoiceScalarWhereInput[]
    OR?: FreightInvoiceScalarWhereInput[]
    NOT?: FreightInvoiceScalarWhereInput | FreightInvoiceScalarWhereInput[]
    freightId?: IntFilter<"FreightInvoice"> | number
    invoiceId?: IntFilter<"FreightInvoice"> | number
  }

  export type InvoiceCreateWithoutItemsInput = {
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    vendor: VendorCreateNestedOneWithoutInvoiceInput
    user: UserCreateNestedOneWithoutInvoiceInput
    currency: CurrencyCreateNestedOneWithoutInvoiceInput
    shipment: ShipmentCreateNestedOneWithoutInvoicesInput
    Freights?: FreightInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutItemsInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
    Freights?: FreightInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutItemsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
  }

  export type MaterialNameCreateWithoutInvoiceItemInput = {
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    type: MaterialTypeCreateNestedOneWithoutMaterialNameInput
    MaterialNeed?: MaterialNeedCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutProductInput
  }

  export type MaterialNameUncheckedCreateWithoutInvoiceItemInput = {
    id?: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    typeId: number
    MaterialNeed?: MaterialNeedUncheckedCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutProductInput
  }

  export type MaterialNameCreateOrConnectWithoutInvoiceItemInput = {
    where: MaterialNameWhereUniqueInput
    create: XOR<MaterialNameCreateWithoutInvoiceItemInput, MaterialNameUncheckedCreateWithoutInvoiceItemInput>
  }

  export type UnitCreateWithoutInvoiceItemInput = {
    unit: string
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutUnitInput
  }

  export type UnitUncheckedCreateWithoutInvoiceItemInput = {
    id?: number
    unit: string
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutUnitInput
  }

  export type UnitCreateOrConnectWithoutInvoiceItemInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutInvoiceItemInput, UnitUncheckedCreateWithoutInvoiceItemInput>
  }

  export type InvoiceUpsertWithoutItemsInput = {
    update: XOR<InvoiceUpdateWithoutItemsInput, InvoiceUncheckedUpdateWithoutItemsInput>
    create: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutItemsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutItemsInput, InvoiceUncheckedUpdateWithoutItemsInput>
  }

  export type InvoiceUpdateWithoutItemsInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutInvoiceNestedInput
    user?: UserUpdateOneRequiredWithoutInvoiceNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutInvoiceNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutInvoicesNestedInput
    Freights?: FreightInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
    Freights?: FreightInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type MaterialNameUpsertWithoutInvoiceItemInput = {
    update: XOR<MaterialNameUpdateWithoutInvoiceItemInput, MaterialNameUncheckedUpdateWithoutInvoiceItemInput>
    create: XOR<MaterialNameCreateWithoutInvoiceItemInput, MaterialNameUncheckedCreateWithoutInvoiceItemInput>
    where?: MaterialNameWhereInput
  }

  export type MaterialNameUpdateToOneWithWhereWithoutInvoiceItemInput = {
    where?: MaterialNameWhereInput
    data: XOR<MaterialNameUpdateWithoutInvoiceItemInput, MaterialNameUncheckedUpdateWithoutInvoiceItemInput>
  }

  export type MaterialNameUpdateWithoutInvoiceItemInput = {
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: MaterialTypeUpdateOneRequiredWithoutMaterialNameNestedInput
    MaterialNeed?: MaterialNeedUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUpdateManyWithoutProductNestedInput
  }

  export type MaterialNameUncheckedUpdateWithoutInvoiceItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    MaterialNeed?: MaterialNeedUncheckedUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UnitUpsertWithoutInvoiceItemInput = {
    update: XOR<UnitUpdateWithoutInvoiceItemInput, UnitUncheckedUpdateWithoutInvoiceItemInput>
    create: XOR<UnitCreateWithoutInvoiceItemInput, UnitUncheckedCreateWithoutInvoiceItemInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutInvoiceItemInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutInvoiceItemInput, UnitUncheckedUpdateWithoutInvoiceItemInput>
  }

  export type UnitUpdateWithoutInvoiceItemInput = {
    unit?: StringFieldUpdateOperationsInput | string
    PipelineProgress?: PipelineProgressUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateWithoutInvoiceItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutUnitNestedInput
  }

  export type CurrencyCreateWithoutFreightInput = {
    code: string
    name: string
    Invoice?: InvoiceCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutFreightInput = {
    id?: number
    code: string
    name: string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutFreightInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutFreightInput, CurrencyUncheckedCreateWithoutFreightInput>
  }

  export type ShipmentCreateWithoutFreightsInput = {
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutShipmentInput
    Files?: ShipmentFileCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentUncheckedCreateWithoutFreightsInput = {
    id?: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    userId: number
    createdAt?: Date | string
    Files?: ShipmentFileUncheckedCreateNestedManyWithoutShipmentInput
    Invoices?: InvoiceUncheckedCreateNestedManyWithoutShipmentInput
  }

  export type ShipmentCreateOrConnectWithoutFreightsInput = {
    where: ShipmentWhereUniqueInput
    create: XOR<ShipmentCreateWithoutFreightsInput, ShipmentUncheckedCreateWithoutFreightsInput>
  }

  export type FreightInvoiceCreateWithoutFreightInput = {
    invoice: InvoiceCreateNestedOneWithoutFreightsInput
  }

  export type FreightInvoiceUncheckedCreateWithoutFreightInput = {
    invoiceId: number
  }

  export type FreightInvoiceCreateOrConnectWithoutFreightInput = {
    where: FreightInvoiceWhereUniqueInput
    create: XOR<FreightInvoiceCreateWithoutFreightInput, FreightInvoiceUncheckedCreateWithoutFreightInput>
  }

  export type FreightInvoiceCreateManyFreightInputEnvelope = {
    data: FreightInvoiceCreateManyFreightInput | FreightInvoiceCreateManyFreightInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutFreightInput = {
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorCreateNestedManyWithoutUserInput
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    Shipment?: ShipmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFreightInput = {
    id?: number
    firebaseUid: string
    email: string
    name?: string | null
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor?: VendorUncheckedCreateNestedManyWithoutUserInput
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    Shipment?: ShipmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFreightInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFreightInput, UserUncheckedCreateWithoutFreightInput>
  }

  export type CurrencyUpsertWithoutFreightInput = {
    update: XOR<CurrencyUpdateWithoutFreightInput, CurrencyUncheckedUpdateWithoutFreightInput>
    create: XOR<CurrencyCreateWithoutFreightInput, CurrencyUncheckedCreateWithoutFreightInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutFreightInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutFreightInput, CurrencyUncheckedUpdateWithoutFreightInput>
  }

  export type CurrencyUpdateWithoutFreightInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Invoice?: InvoiceUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutFreightInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type ShipmentUpsertWithoutFreightsInput = {
    update: XOR<ShipmentUpdateWithoutFreightsInput, ShipmentUncheckedUpdateWithoutFreightsInput>
    create: XOR<ShipmentCreateWithoutFreightsInput, ShipmentUncheckedCreateWithoutFreightsInput>
    where?: ShipmentWhereInput
  }

  export type ShipmentUpdateToOneWithWhereWithoutFreightsInput = {
    where?: ShipmentWhereInput
    data: XOR<ShipmentUpdateWithoutFreightsInput, ShipmentUncheckedUpdateWithoutFreightsInput>
  }

  export type ShipmentUpdateWithoutFreightsInput = {
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShipmentNestedInput
    Files?: ShipmentFileUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateWithoutFreightsInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Files?: ShipmentFileUncheckedUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type FreightInvoiceUpsertWithWhereUniqueWithoutFreightInput = {
    where: FreightInvoiceWhereUniqueInput
    update: XOR<FreightInvoiceUpdateWithoutFreightInput, FreightInvoiceUncheckedUpdateWithoutFreightInput>
    create: XOR<FreightInvoiceCreateWithoutFreightInput, FreightInvoiceUncheckedCreateWithoutFreightInput>
  }

  export type FreightInvoiceUpdateWithWhereUniqueWithoutFreightInput = {
    where: FreightInvoiceWhereUniqueInput
    data: XOR<FreightInvoiceUpdateWithoutFreightInput, FreightInvoiceUncheckedUpdateWithoutFreightInput>
  }

  export type FreightInvoiceUpdateManyWithWhereWithoutFreightInput = {
    where: FreightInvoiceScalarWhereInput
    data: XOR<FreightInvoiceUpdateManyMutationInput, FreightInvoiceUncheckedUpdateManyWithoutFreightInput>
  }

  export type UserUpsertWithoutFreightInput = {
    update: XOR<UserUpdateWithoutFreightInput, UserUncheckedUpdateWithoutFreightInput>
    create: XOR<UserCreateWithoutFreightInput, UserUncheckedCreateWithoutFreightInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFreightInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFreightInput, UserUncheckedUpdateWithoutFreightInput>
  }

  export type UserUpdateWithoutFreightInput = {
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUpdateManyWithoutUserNestedInput
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFreightInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebaseUid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUncheckedUpdateManyWithoutUserNestedInput
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    Shipment?: ShipmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FreightCreateWithoutInvoicesInput = {
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    isArrived?: boolean
    currency?: CurrencyCreateNestedOneWithoutFreightInput
    shipment: ShipmentCreateNestedOneWithoutFreightsInput
    user: UserCreateNestedOneWithoutFreightInput
  }

  export type FreightUncheckedCreateWithoutInvoicesInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    currencyId?: number | null
    shipmentId: number
    isArrived?: boolean
    userId: number
  }

  export type FreightCreateOrConnectWithoutInvoicesInput = {
    where: FreightWhereUniqueInput
    create: XOR<FreightCreateWithoutInvoicesInput, FreightUncheckedCreateWithoutInvoicesInput>
  }

  export type InvoiceCreateWithoutFreightsInput = {
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    vendor: VendorCreateNestedOneWithoutInvoiceInput
    user: UserCreateNestedOneWithoutInvoiceInput
    currency: CurrencyCreateNestedOneWithoutInvoiceInput
    shipment: ShipmentCreateNestedOneWithoutInvoicesInput
    Items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutFreightsInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
    Items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutFreightsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutFreightsInput, InvoiceUncheckedCreateWithoutFreightsInput>
  }

  export type FreightUpsertWithoutInvoicesInput = {
    update: XOR<FreightUpdateWithoutInvoicesInput, FreightUncheckedUpdateWithoutInvoicesInput>
    create: XOR<FreightCreateWithoutInvoicesInput, FreightUncheckedCreateWithoutInvoicesInput>
    where?: FreightWhereInput
  }

  export type FreightUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: FreightWhereInput
    data: XOR<FreightUpdateWithoutInvoicesInput, FreightUncheckedUpdateWithoutInvoicesInput>
  }

  export type FreightUpdateWithoutInvoicesInput = {
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    currency?: CurrencyUpdateOneWithoutFreightNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutFreightsNestedInput
    user?: UserUpdateOneRequiredWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currencyId?: NullableIntFieldUpdateOperationsInput | number | null
    shipmentId?: IntFieldUpdateOperationsInput | number
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceUpsertWithoutFreightsInput = {
    update: XOR<InvoiceUpdateWithoutFreightsInput, InvoiceUncheckedUpdateWithoutFreightsInput>
    create: XOR<InvoiceCreateWithoutFreightsInput, InvoiceUncheckedCreateWithoutFreightsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutFreightsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutFreightsInput, InvoiceUncheckedUpdateWithoutFreightsInput>
  }

  export type InvoiceUpdateWithoutFreightsInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutInvoiceNestedInput
    user?: UserUpdateOneRequiredWithoutInvoiceNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutInvoiceNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutInvoicesNestedInput
    Items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutFreightsInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
    Items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type PipelineProgressCreateWithoutVillageInput = {
    requiredAmount: Decimal | DecimalJsLike | number | string
    product: MaterialNameCreateNestedOneWithoutPipelineProgressInput
    unit: UnitCreateNestedOneWithoutPipelineProgressInput
  }

  export type PipelineProgressUncheckedCreateWithoutVillageInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    unitId: number
  }

  export type PipelineProgressCreateOrConnectWithoutVillageInput = {
    where: PipelineProgressWhereUniqueInput
    create: XOR<PipelineProgressCreateWithoutVillageInput, PipelineProgressUncheckedCreateWithoutVillageInput>
  }

  export type PipelineProgressCreateManyVillageInputEnvelope = {
    data: PipelineProgressCreateManyVillageInput | PipelineProgressCreateManyVillageInput[]
    skipDuplicates?: boolean
  }

  export type MaterialNeedCreateWithoutVillageInput = {
    requiredAmount: Decimal | DecimalJsLike | number | string
    product: MaterialNameCreateNestedOneWithoutMaterialNeedInput
  }

  export type MaterialNeedUncheckedCreateWithoutVillageInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
  }

  export type MaterialNeedCreateOrConnectWithoutVillageInput = {
    where: MaterialNeedWhereUniqueInput
    create: XOR<MaterialNeedCreateWithoutVillageInput, MaterialNeedUncheckedCreateWithoutVillageInput>
  }

  export type MaterialNeedCreateManyVillageInputEnvelope = {
    data: MaterialNeedCreateManyVillageInput | MaterialNeedCreateManyVillageInput[]
    skipDuplicates?: boolean
  }

  export type PipelineProgressUpsertWithWhereUniqueWithoutVillageInput = {
    where: PipelineProgressWhereUniqueInput
    update: XOR<PipelineProgressUpdateWithoutVillageInput, PipelineProgressUncheckedUpdateWithoutVillageInput>
    create: XOR<PipelineProgressCreateWithoutVillageInput, PipelineProgressUncheckedCreateWithoutVillageInput>
  }

  export type PipelineProgressUpdateWithWhereUniqueWithoutVillageInput = {
    where: PipelineProgressWhereUniqueInput
    data: XOR<PipelineProgressUpdateWithoutVillageInput, PipelineProgressUncheckedUpdateWithoutVillageInput>
  }

  export type PipelineProgressUpdateManyWithWhereWithoutVillageInput = {
    where: PipelineProgressScalarWhereInput
    data: XOR<PipelineProgressUpdateManyMutationInput, PipelineProgressUncheckedUpdateManyWithoutVillageInput>
  }

  export type MaterialNeedUpsertWithWhereUniqueWithoutVillageInput = {
    where: MaterialNeedWhereUniqueInput
    update: XOR<MaterialNeedUpdateWithoutVillageInput, MaterialNeedUncheckedUpdateWithoutVillageInput>
    create: XOR<MaterialNeedCreateWithoutVillageInput, MaterialNeedUncheckedCreateWithoutVillageInput>
  }

  export type MaterialNeedUpdateWithWhereUniqueWithoutVillageInput = {
    where: MaterialNeedWhereUniqueInput
    data: XOR<MaterialNeedUpdateWithoutVillageInput, MaterialNeedUncheckedUpdateWithoutVillageInput>
  }

  export type MaterialNeedUpdateManyWithWhereWithoutVillageInput = {
    where: MaterialNeedScalarWhereInput
    data: XOR<MaterialNeedUpdateManyMutationInput, MaterialNeedUncheckedUpdateManyWithoutVillageInput>
  }

  export type MaterialNameCreateWithoutMaterialNeedInput = {
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    type: MaterialTypeCreateNestedOneWithoutMaterialNameInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutProductInput
  }

  export type MaterialNameUncheckedCreateWithoutMaterialNeedInput = {
    id?: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    typeId: number
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutProductInput
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutProductInput
  }

  export type MaterialNameCreateOrConnectWithoutMaterialNeedInput = {
    where: MaterialNameWhereUniqueInput
    create: XOR<MaterialNameCreateWithoutMaterialNeedInput, MaterialNameUncheckedCreateWithoutMaterialNeedInput>
  }

  export type VillageCreateWithoutMaterialNeedsInput = {
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
    PipelineProgress?: PipelineProgressCreateNestedManyWithoutVillageInput
  }

  export type VillageUncheckedCreateWithoutMaterialNeedsInput = {
    id?: number
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
    PipelineProgress?: PipelineProgressUncheckedCreateNestedManyWithoutVillageInput
  }

  export type VillageCreateOrConnectWithoutMaterialNeedsInput = {
    where: VillageWhereUniqueInput
    create: XOR<VillageCreateWithoutMaterialNeedsInput, VillageUncheckedCreateWithoutMaterialNeedsInput>
  }

  export type MaterialNameUpsertWithoutMaterialNeedInput = {
    update: XOR<MaterialNameUpdateWithoutMaterialNeedInput, MaterialNameUncheckedUpdateWithoutMaterialNeedInput>
    create: XOR<MaterialNameCreateWithoutMaterialNeedInput, MaterialNameUncheckedCreateWithoutMaterialNeedInput>
    where?: MaterialNameWhereInput
  }

  export type MaterialNameUpdateToOneWithWhereWithoutMaterialNeedInput = {
    where?: MaterialNameWhereInput
    data: XOR<MaterialNameUpdateWithoutMaterialNeedInput, MaterialNameUncheckedUpdateWithoutMaterialNeedInput>
  }

  export type MaterialNameUpdateWithoutMaterialNeedInput = {
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: MaterialTypeUpdateOneRequiredWithoutMaterialNameNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUpdateManyWithoutProductNestedInput
  }

  export type MaterialNameUncheckedUpdateWithoutMaterialNeedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutProductNestedInput
  }

  export type VillageUpsertWithoutMaterialNeedsInput = {
    update: XOR<VillageUpdateWithoutMaterialNeedsInput, VillageUncheckedUpdateWithoutMaterialNeedsInput>
    create: XOR<VillageCreateWithoutMaterialNeedsInput, VillageUncheckedCreateWithoutMaterialNeedsInput>
    where?: VillageWhereInput
  }

  export type VillageUpdateToOneWithWhereWithoutMaterialNeedsInput = {
    where?: VillageWhereInput
    data: XOR<VillageUpdateWithoutMaterialNeedsInput, VillageUncheckedUpdateWithoutMaterialNeedsInput>
  }

  export type VillageUpdateWithoutMaterialNeedsInput = {
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    PipelineProgress?: PipelineProgressUpdateManyWithoutVillageNestedInput
  }

  export type VillageUncheckedUpdateWithoutMaterialNeedsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutVillageNestedInput
  }

  export type MaterialNameCreateWithoutPipelineProgressInput = {
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    type: MaterialTypeCreateNestedOneWithoutMaterialNameInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutProductInput
    MaterialNeed?: MaterialNeedCreateNestedManyWithoutProductInput
  }

  export type MaterialNameUncheckedCreateWithoutPipelineProgressInput = {
    id?: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
    typeId: number
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutProductInput
    MaterialNeed?: MaterialNeedUncheckedCreateNestedManyWithoutProductInput
  }

  export type MaterialNameCreateOrConnectWithoutPipelineProgressInput = {
    where: MaterialNameWhereUniqueInput
    create: XOR<MaterialNameCreateWithoutPipelineProgressInput, MaterialNameUncheckedCreateWithoutPipelineProgressInput>
  }

  export type UnitCreateWithoutPipelineProgressInput = {
    unit: string
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUnitInput
  }

  export type UnitUncheckedCreateWithoutPipelineProgressInput = {
    id?: number
    unit: string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUnitInput
  }

  export type UnitCreateOrConnectWithoutPipelineProgressInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutPipelineProgressInput, UnitUncheckedCreateWithoutPipelineProgressInput>
  }

  export type VillageCreateWithoutPipelineProgressInput = {
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
    MaterialNeeds?: MaterialNeedCreateNestedManyWithoutVillageInput
  }

  export type VillageUncheckedCreateWithoutPipelineProgressInput = {
    id?: number
    name_en: string
    name_ge: string
    municipality: string
    latitude: number
    longitude: number
    MaterialNeeds?: MaterialNeedUncheckedCreateNestedManyWithoutVillageInput
  }

  export type VillageCreateOrConnectWithoutPipelineProgressInput = {
    where: VillageWhereUniqueInput
    create: XOR<VillageCreateWithoutPipelineProgressInput, VillageUncheckedCreateWithoutPipelineProgressInput>
  }

  export type MaterialNameUpsertWithoutPipelineProgressInput = {
    update: XOR<MaterialNameUpdateWithoutPipelineProgressInput, MaterialNameUncheckedUpdateWithoutPipelineProgressInput>
    create: XOR<MaterialNameCreateWithoutPipelineProgressInput, MaterialNameUncheckedCreateWithoutPipelineProgressInput>
    where?: MaterialNameWhereInput
  }

  export type MaterialNameUpdateToOneWithWhereWithoutPipelineProgressInput = {
    where?: MaterialNameWhereInput
    data: XOR<MaterialNameUpdateWithoutPipelineProgressInput, MaterialNameUncheckedUpdateWithoutPipelineProgressInput>
  }

  export type MaterialNameUpdateWithoutPipelineProgressInput = {
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: MaterialTypeUpdateOneRequiredWithoutMaterialNameNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutProductNestedInput
    MaterialNeed?: MaterialNeedUpdateManyWithoutProductNestedInput
  }

  export type MaterialNameUncheckedUpdateWithoutPipelineProgressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutProductNestedInput
    MaterialNeed?: MaterialNeedUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UnitUpsertWithoutPipelineProgressInput = {
    update: XOR<UnitUpdateWithoutPipelineProgressInput, UnitUncheckedUpdateWithoutPipelineProgressInput>
    create: XOR<UnitCreateWithoutPipelineProgressInput, UnitUncheckedCreateWithoutPipelineProgressInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutPipelineProgressInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutPipelineProgressInput, UnitUncheckedUpdateWithoutPipelineProgressInput>
  }

  export type UnitUpdateWithoutPipelineProgressInput = {
    unit?: StringFieldUpdateOperationsInput | string
    InvoiceItem?: InvoiceItemUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateWithoutPipelineProgressInput = {
    id?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUnitNestedInput
  }

  export type VillageUpsertWithoutPipelineProgressInput = {
    update: XOR<VillageUpdateWithoutPipelineProgressInput, VillageUncheckedUpdateWithoutPipelineProgressInput>
    create: XOR<VillageCreateWithoutPipelineProgressInput, VillageUncheckedCreateWithoutPipelineProgressInput>
    where?: VillageWhereInput
  }

  export type VillageUpdateToOneWithWhereWithoutPipelineProgressInput = {
    where?: VillageWhereInput
    data: XOR<VillageUpdateWithoutPipelineProgressInput, VillageUncheckedUpdateWithoutPipelineProgressInput>
  }

  export type VillageUpdateWithoutPipelineProgressInput = {
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    MaterialNeeds?: MaterialNeedUpdateManyWithoutVillageNestedInput
  }

  export type VillageUncheckedUpdateWithoutPipelineProgressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name_en?: StringFieldUpdateOperationsInput | string
    name_ge?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    MaterialNeeds?: MaterialNeedUncheckedUpdateManyWithoutVillageNestedInput
  }

  export type VendorCreateManyUserInput = {
    id?: number
    alias: string
    name: string
    address: string
    country: string
    createdAt?: Date | string
  }

  export type InvoiceCreateManyUserInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
  }

  export type ShipmentCreateManyUserInput = {
    id?: number
    alias: string
    status: $Enums.ShipmentStatus
    declaration_number?: string | null
    declaration_date?: Date | string | null
    createdAt?: Date | string
  }

  export type FreightCreateManyUserInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    currencyId?: number | null
    shipmentId: number
    isArrived?: boolean
  }

  export type VendorUpdateWithoutUserInput = {
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutUserInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutInvoiceNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutInvoiceNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutInvoicesNestedInput
    Items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
    Items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type ShipmentUpdateWithoutUserInput = {
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Files?: ShipmentFileUpdateManyWithoutShipmentNestedInput
    Freights?: FreightUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Files?: ShipmentFileUncheckedUpdateManyWithoutShipmentNestedInput
    Freights?: FreightUncheckedUpdateManyWithoutShipmentNestedInput
    Invoices?: InvoiceUncheckedUpdateManyWithoutShipmentNestedInput
  }

  export type ShipmentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    alias?: StringFieldUpdateOperationsInput | string
    status?: EnumShipmentStatusFieldUpdateOperationsInput | $Enums.ShipmentStatus
    declaration_number?: NullableStringFieldUpdateOperationsInput | string | null
    declaration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FreightUpdateWithoutUserInput = {
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    currency?: CurrencyUpdateOneWithoutFreightNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutFreightsNestedInput
    invoices?: FreightInvoiceUpdateManyWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currencyId?: NullableIntFieldUpdateOperationsInput | number | null
    shipmentId?: IntFieldUpdateOperationsInput | number
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    invoices?: FreightInvoiceUncheckedUpdateManyWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currencyId?: NullableIntFieldUpdateOperationsInput | number | null
    shipmentId?: IntFieldUpdateOperationsInput | number
    isArrived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvoiceCreateManyVendorInput = {
    id?: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
    shipmentId: number
  }

  export type InvoiceUpdateWithoutVendorInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvoiceNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutInvoiceNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutInvoicesNestedInput
    Items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
    Items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    shipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceItemCreateManyUnitInput = {
    id?: number
    invoiceId: number
    productId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type PipelineProgressCreateManyUnitInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    villageId: number
  }

  export type InvoiceItemUpdateWithoutUnitInput = {
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    invoice?: InvoiceUpdateOneRequiredWithoutItemsNestedInput
    product?: MaterialNameUpdateOneRequiredWithoutInvoiceItemNestedInput
  }

  export type InvoiceItemUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PipelineProgressUpdateWithoutUnitInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: MaterialNameUpdateOneRequiredWithoutPipelineProgressNestedInput
    village?: VillageUpdateOneRequiredWithoutPipelineProgressNestedInput
  }

  export type PipelineProgressUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineProgressUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceCreateManyCurrencyInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    shipmentId: number
  }

  export type FreightCreateManyCurrencyInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    shipmentId: number
    isArrived?: boolean
    userId: number
  }

  export type InvoiceUpdateWithoutCurrencyInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutInvoiceNestedInput
    user?: UserUpdateOneRequiredWithoutInvoiceNestedInput
    shipment?: ShipmentUpdateOneRequiredWithoutInvoicesNestedInput
    Items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutCurrencyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shipmentId?: IntFieldUpdateOperationsInput | number
    Items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutCurrencyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type FreightUpdateWithoutCurrencyInput = {
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    shipment?: ShipmentUpdateOneRequiredWithoutFreightsNestedInput
    invoices?: FreightInvoiceUpdateManyWithoutFreightNestedInput
    user?: UserUpdateOneRequiredWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateWithoutCurrencyInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    shipmentId?: IntFieldUpdateOperationsInput | number
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    invoices?: FreightInvoiceUncheckedUpdateManyWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateManyWithoutCurrencyInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    shipmentId?: IntFieldUpdateOperationsInput | number
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MaterialTypeCreateManyGroupInput = {
    id?: number
    type: string
  }

  export type MaterialTypeUpdateWithoutGroupInput = {
    type?: StringFieldUpdateOperationsInput | string
    MaterialName?: MaterialNameUpdateManyWithoutTypeNestedInput
  }

  export type MaterialTypeUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    MaterialName?: MaterialNameUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type MaterialTypeUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialNameCreateManyTypeInput = {
    id?: number
    name: string
    dn: string
    pn: string
    degree: number
    description: string
  }

  export type MaterialNameUpdateWithoutTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    InvoiceItem?: InvoiceItemUpdateManyWithoutProductNestedInput
    MaterialNeed?: MaterialNeedUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUpdateManyWithoutProductNestedInput
  }

  export type MaterialNameUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutProductNestedInput
    MaterialNeed?: MaterialNeedUncheckedUpdateManyWithoutProductNestedInput
    PipelineProgress?: PipelineProgressUncheckedUpdateManyWithoutProductNestedInput
  }

  export type MaterialNameUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dn?: StringFieldUpdateOperationsInput | string
    pn?: StringFieldUpdateOperationsInput | string
    degree?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceItemCreateManyProductInput = {
    id?: number
    invoiceId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitId: number
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type MaterialNeedCreateManyProductInput = {
    id?: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    villageId: number
  }

  export type PipelineProgressCreateManyProductInput = {
    id?: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    unitId: number
    villageId: number
  }

  export type InvoiceItemUpdateWithoutProductInput = {
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    invoice?: InvoiceUpdateOneRequiredWithoutItemsNestedInput
    unit?: UnitUpdateOneRequiredWithoutInvoiceItemNestedInput
  }

  export type InvoiceItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MaterialNeedUpdateWithoutProductInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    village?: VillageUpdateOneRequiredWithoutMaterialNeedsNestedInput
  }

  export type MaterialNeedUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type MaterialNeedUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineProgressUpdateWithoutProductInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: UnitUpdateOneRequiredWithoutPipelineProgressNestedInput
    village?: VillageUpdateOneRequiredWithoutPipelineProgressNestedInput
  }

  export type PipelineProgressUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineProgressUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    villageId?: IntFieldUpdateOperationsInput | number
  }

  export type ShipmentFileCreateManyShipmentInput = {
    id?: number
    fileName: string
    fileType?: string | null
    fileData?: Uint8Array | null
  }

  export type FreightCreateManyShipmentInput = {
    id?: number
    truckNumber: string
    forwarder?: string | null
    billNumber?: string | null
    billDate?: Date | string | null
    freightRate?: Decimal | DecimalJsLike | number | string | null
    currencyId?: number | null
    isArrived?: boolean
    userId: number
  }

  export type InvoiceCreateManyShipmentInput = {
    id?: number
    vendorId: number
    invoiceNumber: string
    invoiceDate: Date | string
    totalAmount: Decimal | DecimalJsLike | number | string
    isArrived?: boolean | null
    userId: number
    createdAt?: Date | string
    currencyId: number
  }

  export type ShipmentFileUpdateWithoutShipmentInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ShipmentFileUncheckedUpdateWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ShipmentFileUncheckedUpdateManyWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    fileData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type FreightUpdateWithoutShipmentInput = {
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    currency?: CurrencyUpdateOneWithoutFreightNestedInput
    invoices?: FreightInvoiceUpdateManyWithoutFreightNestedInput
    user?: UserUpdateOneRequiredWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currencyId?: NullableIntFieldUpdateOperationsInput | number | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    invoices?: FreightInvoiceUncheckedUpdateManyWithoutFreightNestedInput
  }

  export type FreightUncheckedUpdateManyWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    truckNumber?: StringFieldUpdateOperationsInput | string
    forwarder?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freightRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currencyId?: NullableIntFieldUpdateOperationsInput | number | null
    isArrived?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceUpdateWithoutShipmentInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutInvoiceNestedInput
    user?: UserUpdateOneRequiredWithoutInvoiceNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutInvoiceNestedInput
    Items?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
    Items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    Freights?: FreightInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutShipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArrived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currencyId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceItemCreateManyInvoiceInput = {
    id?: number
    productId: number
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitId: number
    unitPrice: Decimal | DecimalJsLike | number | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type FreightInvoiceCreateManyInvoiceInput = {
    freightId: number
  }

  export type InvoiceItemUpdateWithoutInvoiceInput = {
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: MaterialNameUpdateOneRequiredWithoutInvoiceItemNestedInput
    unit?: UnitUpdateOneRequiredWithoutInvoiceItemNestedInput
  }

  export type InvoiceItemUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FreightInvoiceUpdateWithoutInvoiceInput = {
    freight?: FreightUpdateOneRequiredWithoutInvoicesNestedInput
  }

  export type FreightInvoiceUncheckedUpdateWithoutInvoiceInput = {
    freightId?: IntFieldUpdateOperationsInput | number
  }

  export type FreightInvoiceUncheckedUpdateManyWithoutInvoiceInput = {
    freightId?: IntFieldUpdateOperationsInput | number
  }

  export type FreightInvoiceCreateManyFreightInput = {
    invoiceId: number
  }

  export type FreightInvoiceUpdateWithoutFreightInput = {
    invoice?: InvoiceUpdateOneRequiredWithoutFreightsNestedInput
  }

  export type FreightInvoiceUncheckedUpdateWithoutFreightInput = {
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type FreightInvoiceUncheckedUpdateManyWithoutFreightInput = {
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineProgressCreateManyVillageInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
    unitId: number
  }

  export type MaterialNeedCreateManyVillageInput = {
    id?: number
    productId: number
    requiredAmount: Decimal | DecimalJsLike | number | string
  }

  export type PipelineProgressUpdateWithoutVillageInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: MaterialNameUpdateOneRequiredWithoutPipelineProgressNestedInput
    unit?: UnitUpdateOneRequiredWithoutPipelineProgressNestedInput
  }

  export type PipelineProgressUncheckedUpdateWithoutVillageInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineProgressUncheckedUpdateManyWithoutVillageInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitId?: IntFieldUpdateOperationsInput | number
  }

  export type MaterialNeedUpdateWithoutVillageInput = {
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: MaterialNameUpdateOneRequiredWithoutMaterialNeedNestedInput
  }

  export type MaterialNeedUncheckedUpdateWithoutVillageInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MaterialNeedUncheckedUpdateManyWithoutVillageInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    requiredAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}