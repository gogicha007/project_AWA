// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  firebaseUid String     @unique
  email       String     @unique
  name        String?
  role        String     @default("user")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Vendor      Vendor[]
  Invoice     Invoice[]
  Shipment    Shipment[]
  Freight     Freight[]

  @@map("user")
}

model Vendor {
  id        Int       @id @default(autoincrement())
  alias     String    @unique
  name      String
  address   String
  country   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  Invoice   Invoice[]

  @@map("vendor")
}

model Unit {
  id          Int           @id @default(autoincrement())
  unit        String        @unique
  InvoiceItem InvoiceItem[]

  @@map("unit")
}

model Currency {
  id      Int       @id @default(autoincrement())
  code    String    @unique // e.g., "USD"
  name    String // e.g., "US Dollar"
  Invoice Invoice[]
  Freight Freight[]

  @@map("currency")
}

model MaterialGroup {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String
  MaterialType MaterialType[]

  @@map("material_group")
}

model MaterialType {
  id           Int            @id @default(autoincrement())
  type         String         @unique
  group        MaterialGroup  @relation(fields: [groupId], references: [id])
  groupId      Int            @map("group_id")
  MaterialName MaterialName[]

  @@map("material_type")
}

model MaterialName {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  dn          String
  pn          String
  degree      Int
  description String
  type        MaterialType  @relation(fields: [typeId], references: [id])
  typeId      Int           @map("type_id")
  InvoiceItem InvoiceItem[]

  @@map("material_name")
}

enum ShipmentStatus {
  APPLIED
  DECLARED
  ARRIVED
}

model Shipment {
  id                 Int            @id @default(autoincrement())
  alias              String         @unique
  status             ShipmentStatus
  declaration_number String?        @map("declaration_number")
  declaration_date   DateTime?      @map("declaration_date")
  user               User           @relation(fields: [userId], references: [id])
  userId             Int            @map("user_id")
  createdAt          DateTime       @default(now()) @map("created_at")
  Files              ShipmentFile[]
  Freights           Freight[]
  Invoices           Invoice[]

  @@map("shipment")
}

model ShipmentFile {
  id         Int      @id @default(autoincrement())
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  shipmentId Int      @map("shipment_id")
  fileName   String   @map("file_name")
  fileType   String?  @map("file_type")
  fileData   Bytes?   @map("file_data")

  @@map("shipment_file")
}

model Invoice {
  id            Int              @id @default(autoincrement())
  vendor        Vendor           @relation(fields: [vendorId], references: [id])
  vendorId      Int              @map("vendor_id")
  invoiceNumber String           @map("invoice_number")
  invoiceDate   DateTime         @map("invoice_date")
  totalAmount   Decimal          @map("total_amount")
  isArrived     Boolean?          @default(false) @map("is_arrived")
  user          User             @relation(fields: [userId], references: [id])
  userId        Int              @map("user_id")
  createdAt     DateTime         @default(now()) @map("created_at")
  currency      Currency         @relation(fields: [currencyId], references: [id])
  currencyId    Int              @map("currency_id")
  shipment      Shipment         @relation(fields: [shipmentId], references: [id])
  shipmentId    Int              @map("shipment_id")
  Items         InvoiceItem[]
  Freights      FreightInvoice[]

  @@map("invoice")
}

model InvoiceItem {
  id          Int          @id @default(autoincrement())
  invoice     Invoice      @relation(fields: [invoiceId], references: [id])
  invoiceId   Int
  product     MaterialName @relation(fields: [productId], references: [id])
  productId   Int          @map("product_id")
  description String
  quantity    Decimal
  unit        Unit         @relation(fields: [unitId], references: [id])
  unitId      Int
  unitPrice   Decimal      @map("unit_price")
  total       Decimal      @map("total")

  @@map("invoice_item")
}

model Freight {
  id          Int              @id @default(autoincrement())
  truckNumber String           @map("truck_number")
  forwarder   String?
  billNumber  String?          @map("bill_number")
  billDate    DateTime?        @map("bill_date")
  freightRate Decimal?         @map("freight_rate")
  currency    Currency?        @relation(fields: [currencyId], references: [id])
  currencyId  Int?             @map("currency_id")
  shipment    Shipment         @relation(fields: [shipmentId], references: [id])
  shipmentId  Int              @map("shipment_id")
  invoices    FreightInvoice[]
  isArrived   Boolean          @default(false) @map("is_arrived")
  user        User             @relation(fields: [userId], references: [id])
  userId      Int              @map("user_id")

  @@map("freight")
}

model FreightInvoice {
  freight   Freight @relation(fields: [freightId], references: [id])
  freightId Int     @map("freight_id")
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int     @map("invoice_id")

  @@id([freightId, invoiceId])
  @@map("freight_invoice")
}
